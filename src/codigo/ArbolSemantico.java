
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package codigo;

import java_cup.runtime.Symbol;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class ArbolSemantico extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public ArbolSemantico() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public ArbolSemantico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public ArbolSemantico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\166\000\002\002\004\000\002\002\015\000\002\002" +
    "\003\000\002\014\005\000\002\014\003\000\002\024\004" +
    "\000\002\024\004\000\002\024\004\000\002\024\004\000" +
    "\002\004\006\000\002\035\010\000\002\035\007\000\002" +
    "\035\004\000\002\035\006\000\002\035\002\000\002\023" +
    "\006\000\002\023\004\000\002\034\003\000\002\034\003" +
    "\000\002\034\003\000\002\034\003\000\002\033\005\000" +
    "\002\033\003\000\002\025\007\000\002\055\005\000\002" +
    "\055\005\000\002\055\005\000\002\055\005\000\002\055" +
    "\004\000\002\055\002\000\002\050\005\000\002\050\004" +
    "\000\002\050\002\000\002\006\012\000\002\006\011\000" +
    "\002\006\011\000\002\006\012\000\002\007\004\000\002" +
    "\007\004\000\002\007\004\000\002\007\004\000\002\007" +
    "\007\000\002\007\004\000\002\010\013\000\002\010\012" +
    "\000\002\010\012\000\002\010\011\000\002\041\005\000" +
    "\002\041\005\000\002\041\005\000\002\041\006\000\002" +
    "\044\003\000\002\044\003\000\002\030\004\000\002\030" +
    "\005\000\002\043\005\000\002\043\002\000\002\027\004" +
    "\000\002\042\005\000\002\042\002\000\002\026\010\000" +
    "\002\031\012\000\002\054\004\000\002\051\005\000\002" +
    "\051\002\000\002\052\004\000\002\053\005\000\002\053" +
    "\002\000\002\016\003\000\002\016\003\000\002\016\005" +
    "\000\002\046\003\000\002\046\005\000\002\046\005\000" +
    "\002\046\005\000\002\046\005\000\002\015\005\000\002" +
    "\015\007\000\002\015\005\000\002\060\010\000\002\062" +
    "\007\000\002\036\007\000\002\036\010\000\002\061\005" +
    "\000\002\061\005\000\002\061\007\000\002\061\003\000" +
    "\002\061\003\000\002\061\005\000\002\056\003\000\002" +
    "\056\003\000\002\020\005\000\002\020\005\000\002\020" +
    "\005\000\002\020\005\000\002\020\005\000\002\020\005" +
    "\000\002\020\005\000\002\020\005\000\002\020\005\000" +
    "\002\020\005\000\002\020\005\000\002\020\005\000\002" +
    "\020\004\000\002\020\005\000\002\020\002\000\002\045" +
    "\006\000\002\045\005\000\002\005\010\000\002\005\010" +
    "\000\002\011\007\000\002\012\007\000\002\017\004\000" +
    "\002\040\004\000\002\040\003\000\002\037\004\000\002" +
    "\037\003\000\002\037\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u011e\000\010\003\004\026\006\037\005\001\002\000" +
    "\006\002\uffff\026\uffff\001\002\000\004\004\016\001\002" +
    "\000\010\003\004\026\006\037\005\001\002\000\006\002" +
    "\uff8d\026\012\001\002\000\004\002\011\001\002\000\004" +
    "\002\001\001\002\000\006\002\uff8f\026\012\001\002\000" +
    "\004\002\uff8c\001\002\000\004\002\uff90\001\002\000\004" +
    "\002\uff8e\001\002\000\016\026\026\034\uffe4\036\020\051" +
    "\021\053\027\055\025\001\002\000\004\026\u011f\001\002" +
    "\000\006\004\u010a\066\u0109\001\002\000\004\004\366\001" +
    "\002\000\004\026\364\001\002\000\004\034\131\001\002" +
    "\000\004\026\127\001\002\000\004\004\116\001\002\000" +
    "\020\023\uffe4\026\026\034\uffe4\036\020\051\021\053\027" +
    "\055\025\001\002\000\004\004\034\001\002\000\004\026" +
    "\031\001\002\000\020\023\uffe4\026\026\034\uffe4\036\020" +
    "\051\021\053\027\055\025\001\002\000\006\023\uffe7\034" +
    "\uffe7\001\002\000\004\054\037\001\002\000\006\054\ufffd" +
    "\061\035\001\002\000\004\004\034\001\002\000\004\054" +
    "\ufffe\001\002\000\012\004\113\012\111\015\114\062\112" +
    "\001\002\000\006\026\ufff3\031\042\001\002\000\004\026" +
    "\ufff8\001\002\000\020\004\054\005\056\006\050\010\043" +
    "\035\044\056\045\066\053\001\002\000\010\004\061\005" +
    "\056\010\043\001\002\000\012\011\ufff0\026\ufff0\057\ufff0" +
    "\061\ufff0\001\002\000\004\016\103\001\002\000\012\011" +
    "\uffef\026\uffef\057\uffef\061\uffef\001\002\000\016\011\uffc1" +
    "\024\100\026\uffc1\047\uffc1\057\uffc1\061\uffc1\001\002\000" +
    "\012\011\uffee\026\uffee\057\uffee\061\uffee\001\002\000\020" +
    "\011\uffbe\024\uffbe\025\074\026\uffbe\047\uffbe\057\uffbe\061" +
    "\uffbe\001\002\000\012\011\uffed\026\uffed\057\uffed\061\uffed" +
    "\001\002\000\004\004\067\001\002\000\012\010\057\024" +
    "\uffbc\025\uffbc\026\uffbc\001\002\000\004\026\ufff5\001\002" +
    "\000\054\004\uffbd\011\uffbd\023\uffbd\024\uffbd\025\uffbd\026" +
    "\uffbd\030\uffbd\041\uffbd\042\uffbd\043\uffbd\044\uffbd\045\uffbd" +
    "\046\uffbd\047\uffbd\050\uffbd\052\uffbd\053\uffbd\056\uffbd\057" +
    "\uffbd\061\uffbd\065\uffbd\001\002\000\020\004\061\005\056" +
    "\006\050\010\043\011\060\035\044\056\045\001\002\000" +
    "\004\026\ufff4\001\002\000\054\004\uffbc\011\uffbc\023\uffbc" +
    "\024\uffbc\025\uffbc\026\uffbc\030\uffbc\041\uffbc\042\uffbc\043" +
    "\uffbc\044\uffbc\045\uffbc\046\uffbc\047\uffbc\050\uffbc\052\uffbc" +
    "\053\uffbc\056\uffbc\057\uffbc\061\uffbc\065\uffbc\001\002\000" +
    "\006\011\uffeb\061\065\001\002\000\004\011\064\001\002" +
    "\000\004\026\ufff6\001\002\000\016\004\061\005\056\006" +
    "\050\010\043\035\044\056\045\001\002\000\004\011\uffec" +
    "\001\002\000\004\010\070\001\002\000\016\004\061\005" +
    "\056\006\050\010\043\035\044\056\045\001\002\000\004" +
    "\011\072\001\002\000\004\026\ufff7\001\002\000\016\011" +
    "\uffc0\024\uffc0\026\uffc0\047\uffc0\057\uffc0\061\uffc0\001\002" +
    "\000\010\004\061\005\056\010\043\001\002\000\020\011" +
    "\uffbe\024\uffbe\025\074\026\uffbe\047\uffbe\057\uffbe\061\uffbe" +
    "\001\002\000\016\011\uffbf\024\uffbf\026\uffbf\047\uffbf\057" +
    "\uffbf\061\uffbf\001\002\000\014\011\uffc3\026\uffc3\047\uffc3" +
    "\057\uffc3\061\uffc3\001\002\000\010\004\061\005\056\010" +
    "\043\001\002\000\016\011\uffc1\024\100\026\uffc1\047\uffc1" +
    "\057\uffc1\061\uffc1\001\002\000\014\011\uffc2\026\uffc2\047" +
    "\uffc2\057\uffc2\061\uffc2\001\002\000\004\064\104\001\002" +
    "\000\004\010\105\001\002\000\004\011\106\001\002\000" +
    "\012\011\uffb1\026\uffb1\057\uffb1\061\uffb1\001\002\000\004" +
    "\011\110\001\002\000\054\004\uffbb\011\uffbb\023\uffbb\024" +
    "\uffbb\025\uffbb\026\uffbb\030\uffbb\041\uffbb\042\uffbb\043\uffbb" +
    "\044\uffbb\045\uffbb\046\uffbb\047\uffbb\050\uffbb\052\uffbb\053" +
    "\uffbb\056\uffbb\057\uffbb\061\uffbb\065\uffbb\001\002\000\036" +
    "\004\ufffc\011\ufffc\023\ufffc\026\ufffc\030\ufffc\031\ufffc\041" +
    "\ufffc\042\ufffc\043\ufffc\044\ufffc\052\ufffc\053\ufffc\056\ufffc" +
    "\061\ufffc\001\002\000\036\004\ufffa\011\ufffa\023\ufffa\026" +
    "\ufffa\030\ufffa\031\ufffa\041\ufffa\042\ufffa\043\ufffa\044\ufffa" +
    "\052\ufffa\053\ufffa\056\ufffa\061\ufffa\001\002\000\036\004" +
    "\ufff9\011\ufff9\023\ufff9\026\ufff9\030\ufff9\031\ufff9\041\ufff9" +
    "\042\ufff9\043\ufff9\044\ufff9\052\ufff9\053\ufff9\056\ufff9\061" +
    "\ufff9\001\002\000\036\004\ufffb\011\ufffb\023\ufffb\026\ufffb" +
    "\030\ufffb\031\ufffb\041\ufffb\042\ufffb\043\ufffb\044\ufffb\052" +
    "\ufffb\053\ufffb\056\ufffb\061\ufffb\001\002\000\006\023\uffe5" +
    "\034\uffe5\001\002\000\010\023\uffe1\026\120\053\027\001" +
    "\002\000\004\026\125\001\002\000\010\023\uffe1\026\120" +
    "\053\027\001\002\000\004\023\122\001\002\000\004\055" +
    "\123\001\002\000\004\026\uffea\001\002\000\004\023\uffe2" +
    "\001\002\000\010\023\uffe1\026\120\053\027\001\002\000" +
    "\004\023\uffe3\001\002\000\020\023\uffe4\026\026\034\uffe4" +
    "\036\020\051\021\053\027\055\025\001\002\000\006\023" +
    "\uffe9\034\uffe9\001\002\000\004\010\132\001\002\000\004" +
    "\011\133\001\002\000\030\004\147\023\uff98\026\134\030" +
    "\137\041\135\042\150\043\160\044\156\052\155\053\027" +
    "\056\144\001\002\000\036\004\147\023\uff98\026\134\030" +
    "\137\033\uff98\041\135\042\150\043\160\044\156\052\155" +
    "\053\027\056\144\063\uff98\065\uff98\001\002\000\004\004" +
    "\351\001\002\000\004\026\346\001\002\000\004\026\344" +
    "\001\002\000\004\023\336\001\002\000\004\026\334\001" +
    "\002\000\004\026\332\001\002\000\004\026\330\001\002" +
    "\000\004\016\306\001\002\000\004\026\304\001\002\000" +
    "\004\026\302\001\002\000\010\010\265\016\266\031\267" +
    "\001\002\000\006\004\170\010\166\001\002\000\004\026" +
    "\252\001\002\000\004\026\250\001\002\000\004\026\246" +
    "\001\002\000\004\026\244\001\002\000\012\004\226\005" +
    "\224\006\230\035\225\001\002\000\004\043\220\001\002" +
    "\000\004\026\216\001\002\000\006\004\170\010\166\001" +
    "\002\000\004\026\162\001\002\000\036\004\147\023\uff98" +
    "\026\134\030\137\033\uff98\041\135\042\150\043\160\044" +
    "\156\052\155\053\027\056\144\063\uff98\065\uff98\001\002" +
    "\000\012\023\uff9b\033\uff9b\063\uff9b\065\uff9b\001\002\000" +
    "\042\004\uffc6\011\uffc6\023\uffc6\026\uffc6\030\uffc6\041\uffc6" +
    "\042\uffc6\043\uffc6\044\uffc6\045\uffc6\046\212\050\uffc6\052" +
    "\uffc6\053\uffc6\056\uffc6\065\uffc6\001\002\000\040\004\uffc9" +
    "\011\uffc9\023\uffc9\026\uffc9\030\uffc9\041\uffc9\042\uffc9\043" +
    "\uffc9\044\uffc9\045\207\050\uffc9\052\uffc9\053\uffc9\056\uffc9" +
    "\065\uffc9\001\002\000\006\004\170\010\166\001\002\000" +
    "\030\004\147\023\uff98\026\134\030\137\041\135\042\150" +
    "\043\160\044\156\052\155\053\027\056\144\001\002\000" +
    "\006\014\171\031\173\001\002\000\016\004\uffce\005\uffce" +
    "\006\uffce\007\uffce\010\uffce\035\uffce\001\002\000\016\004" +
    "\061\005\056\006\177\007\176\010\043\035\174\001\002" +
    "\000\016\004\uffcd\005\uffcd\006\uffcd\007\uffcd\010\uffcd\035" +
    "\uffcd\001\002\000\042\004\uffd1\011\uffd1\023\uffd1\026\uffd1" +
    "\030\uffd1\041\uffd1\042\uffd1\043\uffd1\044\uffd1\045\uffd1\046" +
    "\uffd1\050\uffd1\052\uffd1\053\uffd1\056\uffd1\065\uffd1\001\002" +
    "\000\042\004\uffd2\011\uffd2\023\uffd2\026\uffd2\030\uffd2\041" +
    "\uffd2\042\uffd2\043\uffd2\044\uffd2\045\uffd2\046\uffd2\050\uffd2" +
    "\052\uffd2\053\uffd2\056\uffd2\065\uffd2\001\002\000\004\007" +
    "\200\001\002\000\042\004\uffd0\011\uffd0\023\uffd0\026\uffd0" +
    "\030\uffd0\041\uffd0\042\uffd0\043\uffd0\044\uffd0\045\uffd0\046" +
    "\uffd0\050\uffd0\052\uffd0\053\uffd0\056\uffd0\065\uffd0\001\002" +
    "\000\042\004\uffcf\011\uffcf\023\uffcf\026\uffcf\030\uffcf\041" +
    "\uffcf\042\uffcf\043\uffcf\044\uffcf\045\uffcf\046\uffcf\050\uffcf" +
    "\052\uffcf\053\uffcf\056\uffcf\065\uffcf\001\002\000\004\023" +
    "\202\001\002\000\004\043\203\001\002\000\004\026\uff93" +
    "\001\002\000\004\011\205\001\002\000\036\004\uffcb\011" +
    "\uffcb\023\uffcb\026\uffcb\030\uffcb\041\uffcb\042\uffcb\043\uffcb" +
    "\044\uffcb\050\uffcb\052\uffcb\053\uffcb\056\uffcb\065\uffcb\001" +
    "\002\000\036\004\uffcc\011\uffcc\023\uffcc\026\uffcc\030\uffcc" +
    "\041\uffcc\042\uffcc\043\uffcc\044\uffcc\050\uffcc\052\uffcc\053" +
    "\uffcc\056\uffcc\065\uffcc\001\002\000\004\004\170\001\002" +
    "\000\040\004\uffc9\011\uffc9\023\uffc9\026\uffc9\030\uffc9\041" +
    "\uffc9\042\uffc9\043\uffc9\044\uffc9\045\207\050\uffc9\052\uffc9" +
    "\053\uffc9\056\uffc9\065\uffc9\001\002\000\036\004\uffca\011" +
    "\uffca\023\uffca\026\uffca\030\uffca\041\uffca\042\uffca\043\uffca" +
    "\044\uffca\050\uffca\052\uffca\053\uffca\056\uffca\065\uffca\001" +
    "\002\000\004\004\170\001\002\000\040\004\uffc8\011\uffc8" +
    "\023\uffc8\026\uffc8\030\uffc8\041\uffc8\042\uffc8\043\uffc8\044" +
    "\uffc8\045\uffc8\050\uffc8\052\uffc8\053\uffc8\056\uffc8\065\uffc8" +
    "\001\002\000\042\004\uffc6\011\uffc6\023\uffc6\026\uffc6\030" +
    "\uffc6\041\uffc6\042\uffc6\043\uffc6\044\uffc6\045\uffc6\046\212" +
    "\050\uffc6\052\uffc6\053\uffc6\056\uffc6\065\uffc6\001\002\000" +
    "\040\004\uffc7\011\uffc7\023\uffc7\026\uffc7\030\uffc7\041\uffc7" +
    "\042\uffc7\043\uffc7\044\uffc7\045\uffc7\050\uffc7\052\uffc7\053" +
    "\uffc7\056\uffc7\065\uffc7\001\002\000\036\004\147\023\uff98" +
    "\026\134\030\137\033\uff98\041\135\042\150\043\160\044" +
    "\156\052\155\053\027\056\144\063\uff98\065\uff98\001\002" +
    "\000\012\023\uffa1\033\uffa1\063\uffa1\065\uffa1\001\002\000" +
    "\006\004\170\010\166\001\002\000\030\004\147\026\134" +
    "\030\137\041\135\042\150\043\160\044\156\052\155\053" +
    "\027\056\144\065\uff98\001\002\000\004\065\223\001\002" +
    "\000\004\026\uff92\001\002\000\004\026\uffdc\001\002\000" +
    "\004\026\uffda\001\002\000\006\010\231\026\uffdb\001\002" +
    "\000\004\026\uffd7\001\002\000\004\026\uffd9\001\002\000" +
    "\020\004\233\005\056\006\050\010\043\011\232\035\044" +
    "\056\045\001\002\000\006\026\uff96\057\uff96\001\002\000" +
    "\014\011\uffbc\024\uffbc\025\uffbc\054\037\061\uffbc\001\002" +
    "\000\004\011\237\001\002\000\004\011\236\001\002\000" +
    "\004\026\uffd8\001\002\000\006\026\uff97\057\uff97\001\002" +
    "\000\006\011\ufff1\061\241\001\002\000\004\004\243\001" +
    "\002\000\004\011\ufff2\001\002\000\004\054\037\001\002" +
    "\000\036\004\147\023\uff98\026\134\030\137\033\uff98\041" +
    "\135\042\150\043\160\044\156\052\155\053\027\056\144" +
    "\063\uff98\065\uff98\001\002\000\012\023\uff9f\033\uff9f\063" +
    "\uff9f\065\uff9f\001\002\000\036\004\147\023\uff98\026\134" +
    "\030\137\033\uff98\041\135\042\150\043\160\044\156\052" +
    "\155\053\027\056\144\063\uff98\065\uff98\001\002\000\012" +
    "\023\uffa4\033\uffa4\063\uffa4\065\uffa4\001\002\000\036\004" +
    "\147\023\uff98\026\134\030\137\033\uff98\041\135\042\150" +
    "\043\160\044\156\052\155\053\027\056\144\063\uff98\065" +
    "\uff98\001\002\000\012\023\uff9d\033\uff9d\063\uff9d\065\uff9d" +
    "\001\002\000\036\004\147\023\uff98\026\134\030\137\033" +
    "\uff98\041\135\042\150\043\160\044\156\052\155\053\027" +
    "\056\144\063\uff98\065\uff98\001\002\000\012\023\uffa3\033" +
    "\uffa3\063\uffa3\065\uffa3\001\002\000\004\050\255\001\002" +
    "\000\032\004\147\023\uff98\026\134\030\137\033\uff98\041" +
    "\135\042\150\043\160\044\156\052\155\053\027\056\144" +
    "\001\002\000\006\023\260\033\257\001\002\000\030\004" +
    "\147\023\uff98\026\134\030\137\041\135\042\150\043\160" +
    "\044\156\052\155\053\027\056\144\001\002\000\004\042" +
    "\261\001\002\000\004\026\uffc5\001\002\000\004\023\263" +
    "\001\002\000\004\042\264\001\002\000\004\026\uffc4\001" +
    "\002\000\020\004\061\005\056\006\050\010\043\011\232" +
    "\035\044\056\045\001\002\000\004\004\273\001\002\000" +
    "\016\004\271\005\056\006\050\010\043\035\044\056\045" +
    "\001\002\000\006\026\uffb3\057\uffb3\001\002\000\014\010" +
    "\265\024\uffbc\025\uffbc\026\uffbc\057\uffbc\001\002\000\006" +
    "\026\uffb5\057\uffb5\001\002\000\006\010\274\031\275\001" +
    "\002\000\020\004\061\005\056\006\050\010\043\011\277" +
    "\035\044\056\045\001\002\000\016\004\061\005\056\006" +
    "\050\010\043\035\044\056\045\001\002\000\006\026\uffb4" +
    "\057\uffb4\001\002\000\004\026\uffb0\001\002\000\004\011" +
    "\301\001\002\000\004\026\uffaf\001\002\000\036\004\147" +
    "\023\uff98\026\134\030\137\033\uff98\041\135\042\150\043" +
    "\160\044\156\052\155\053\027\056\144\063\uff98\065\uff98" +
    "\001\002\000\012\023\uff99\033\uff99\063\uff99\065\uff99\001" +
    "\002\000\036\004\147\023\uff98\026\134\030\137\033\uff98" +
    "\041\135\042\150\043\160\044\156\052\155\053\027\056" +
    "\144\063\uff98\065\uff98\001\002\000\012\023\uffa5\033\uffa5" +
    "\063\uffa5\065\uffa5\001\002\000\006\060\307\064\104\001" +
    "\002\000\004\010\310\001\002\000\012\004\312\005\056" +
    "\006\314\010\043\001\002\000\010\011\uffaa\047\316\061" +
    "\315\001\002\000\016\011\uffbc\016\322\024\uffbc\025\uffbc" +
    "\047\uffbc\061\uffbc\001\002\000\004\011\321\001\002\000" +
    "\010\011\uffab\047\316\061\315\001\002\000\012\004\uffa7" +
    "\005\uffa7\006\uffa7\010\uffa7\001\002\000\012\004\uffa8\005" +
    "\uffa8\006\uffa8\010\uffa8\001\002\000\012\004\312\005\056" +
    "\006\314\010\043\001\002\000\004\011\uffae\001\002\000" +
    "\004\026\uffb2\001\002\000\004\004\323\001\002\000\010" +
    "\011\uffa9\047\316\061\315\001\002\000\012\004\312\005" +
    "\056\006\314\010\043\001\002\000\004\011\uffac\001\002" +
    "\000\012\004\312\005\056\006\314\010\043\001\002\000" +
    "\004\011\uffad\001\002\000\036\004\147\023\uff98\026\134" +
    "\030\137\033\uff98\041\135\042\150\043\160\044\156\052" +
    "\155\053\027\056\144\063\uff98\065\uff98\001\002\000\012" +
    "\023\uffa6\033\uffa6\063\uffa6\065\uffa6\001\002\000\036\004" +
    "\147\023\uff98\026\134\030\137\033\uff98\041\135\042\150" +
    "\043\160\044\156\052\155\053\027\056\144\063\uff98\065" +
    "\uff98\001\002\000\012\023\uff9e\033\uff9e\063\uff9e\065\uff9e" +
    "\001\002\000\036\004\147\023\uff98\026\134\030\137\033" +
    "\uff98\041\135\042\150\043\160\044\156\052\155\053\027" +
    "\056\144\063\uff98\065\uff98\001\002\000\012\023\uffa0\033" +
    "\uffa0\063\uffa0\065\uffa0\001\002\000\004\036\337\001\002" +
    "\000\016\023\uffe4\026\026\036\020\051\021\053\027\055" +
    "\025\001\002\000\004\023\342\001\002\000\006\002\000" +
    "\026\000\001\002\000\004\037\343\001\002\000\006\002" +
    "\uff91\026\uff91\001\002\000\036\004\147\023\uff98\026\134" +
    "\030\137\033\uff98\041\135\042\150\043\160\044\156\052" +
    "\155\053\027\056\144\063\uff98\065\uff98\001\002\000\012" +
    "\023\uff9c\033\uff9c\063\uff9c\065\uff9c\001\002\000\036\004" +
    "\147\023\uff98\026\134\030\137\033\uff98\041\135\042\150" +
    "\043\160\044\156\052\155\053\027\056\144\063\uff98\065" +
    "\uff98\001\002\000\012\023\uffa2\033\uffa2\063\uffa2\065\uffa2" +
    "\001\002\000\004\057\354\001\002\000\006\016\352\031" +
    "\267\001\002\000\004\004\353\001\002\000\004\031\275" +
    "\001\002\000\006\004\356\005\355\001\002\000\030\004" +
    "\147\026\134\030\137\041\135\042\150\043\160\044\156" +
    "\052\155\053\027\056\144\063\uff98\001\002\000\030\004" +
    "\147\026\134\030\137\041\135\042\150\043\160\044\156" +
    "\052\155\053\027\056\144\063\uff98\001\002\000\004\063" +
    "\360\001\002\000\004\026\uff94\001\002\000\004\063\362" +
    "\001\002\000\004\026\uff95\001\002\000\012\023\uff9a\033" +
    "\uff9a\063\uff9a\065\uff9a\001\002\000\020\023\uffe4\026\026" +
    "\034\uffe4\036\020\051\021\053\027\055\025\001\002\000" +
    "\006\023\uffe8\034\uffe8\001\002\000\004\010\367\001\002" +
    "\000\006\004\243\011\371\001\002\000\004\011\u0101\001" +
    "\002\000\032\004\147\023\uff98\026\134\030\137\041\135" +
    "\042\150\043\160\044\156\052\155\053\027\054\037\056" +
    "\144\001\002\000\004\023\377\001\002\000\030\004\147" +
    "\023\uff98\026\134\030\137\041\135\042\150\043\160\044" +
    "\156\052\155\053\027\056\144\001\002\000\004\023\375" +
    "\001\002\000\004\051\376\001\002\000\004\026\uffd4\001" +
    "\002\000\004\051\u0100\001\002\000\004\026\uffd3\001\002" +
    "\000\032\004\147\023\uff98\026\134\030\137\041\135\042" +
    "\150\043\160\044\156\052\155\053\027\054\037\056\144" +
    "\001\002\000\004\023\u0107\001\002\000\030\004\147\023" +
    "\uff98\026\134\030\137\041\135\042\150\043\160\044\156" +
    "\052\155\053\027\056\144\001\002\000\004\023\u0105\001" +
    "\002\000\004\051\u0106\001\002\000\004\026\uffd6\001\002" +
    "\000\004\051\u0108\001\002\000\004\026\uffd5\001\002\000" +
    "\004\010\u0115\001\002\000\004\010\u010b\001\002\000\006" +
    "\004\243\011\u010d\001\002\000\004\011\u0111\001\002\000" +
    "\030\004\147\023\uff98\026\134\030\137\041\135\042\150" +
    "\043\160\044\156\052\155\053\027\056\144\001\002\000" +
    "\004\023\u010f\001\002\000\004\036\u0110\001\002\000\004" +
    "\026\uffdf\001\002\000\030\004\147\023\uff98\026\134\030" +
    "\137\041\135\042\150\043\160\044\156\052\155\053\027" +
    "\056\144\001\002\000\004\023\u0113\001\002\000\004\036" +
    "\u0114\001\002\000\004\026\uffe0\001\002\000\006\004\243" +
    "\011\u0117\001\002\000\004\011\u011b\001\002\000\030\004" +
    "\147\023\uff98\026\134\030\137\041\135\042\150\043\160" +
    "\044\156\052\155\053\027\056\144\001\002\000\004\023" +
    "\u0119\001\002\000\004\036\u011a\001\002\000\004\026\uffde" +
    "\001\002\000\030\004\147\023\uff98\026\134\030\137\041" +
    "\135\042\150\043\160\044\156\052\155\053\027\056\144" +
    "\001\002\000\004\023\u011d\001\002\000\004\036\u011e\001" +
    "\002\000\004\026\uffdd\001\002\000\020\023\uffe4\026\026" +
    "\034\uffe4\036\020\051\021\053\027\055\025\001\002\000" +
    "\006\023\uffe6\034\uffe6\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u011e\000\006\002\006\037\007\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\002\006\037\014\001\001" +
    "\000\004\040\012\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\040\013\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\004\023\006\016\010" +
    "\027\025\021\055\022\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\004\023" +
    "\006\016\010\027\025\021\055\114\001\001\000\004\014" +
    "\032\001\001\000\002\001\001\000\014\004\023\006\016" +
    "\010\027\025\021\055\031\001\001\000\002\001\001\000" +
    "\004\024\037\001\001\000\002\001\001\000\004\014\035" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\035" +
    "\040\001\001\000\002\001\001\000\014\016\050\034\054" +
    "\052\046\054\045\062\051\001\001\000\010\016\050\052" +
    "\046\054\106\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\051\076\001\001\000\002\001" +
    "\001\000\004\053\072\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\016\050\033\062\034\061\052\046\054\045" +
    "\062\051\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\016\050\033\065\034\061\052\046\054\045\062\051\001" +
    "\001\000\002\001\001\000\002\001\001\000\016\016\050" +
    "\033\070\034\061\052\046\054\045\062\051\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\016\074\001\001\000\004\053\075\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\016\050\052\100\001\001" +
    "\000\004\051\101\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\004\116\050\120\001\001\000\002\001" +
    "\001\000\006\004\116\050\123\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\004\116\050\125\001\001\000\002\001\001\000\014" +
    "\004\023\006\016\010\027\025\021\055\127\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\034" +
    "\004\142\005\156\007\145\011\140\012\153\015\152\020" +
    "\137\026\150\031\135\036\151\045\160\060\144\062\141" +
    "\001\001\000\034\004\142\005\156\007\145\011\140\012" +
    "\153\015\152\020\362\026\150\031\135\036\151\045\160" +
    "\060\144\062\141\001\001\000\004\015\347\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\027\164\030\253\041\163\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\045\226\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\027\164\030\166\041\163\001\001\000\002" +
    "\001\001\000\034\004\142\005\156\007\145\011\140\012" +
    "\153\015\152\020\162\026\150\031\135\036\151\045\160" +
    "\060\144\062\141\001\001\000\002\001\001\000\004\042" +
    "\212\001\001\000\004\043\205\001\001\000\010\027\164" +
    "\030\203\041\163\001\001\000\034\004\142\005\156\007" +
    "\145\011\140\012\153\015\152\020\200\026\150\031\135" +
    "\036\151\045\160\060\144\062\141\001\001\000\004\044" +
    "\171\001\001\000\002\001\001\000\004\016\174\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\027\207" +
    "\041\163\001\001\000\004\043\210\001\001\000\002\001" +
    "\001\000\004\041\213\001\001\000\002\001\001\000\004" +
    "\042\214\001\001\000\002\001\001\000\034\004\142\005" +
    "\156\007\145\011\140\012\153\015\152\020\216\026\150" +
    "\031\135\036\151\045\160\060\144\062\141\001\001\000" +
    "\002\001\001\000\010\027\164\030\220\041\163\001\001" +
    "\000\034\004\142\005\156\007\145\011\140\012\153\015" +
    "\152\020\221\026\150\031\135\036\151\045\160\060\144" +
    "\062\141\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\020\016\050\023\234\033" +
    "\233\034\061\052\046\054\045\062\051\001\001\000\002" +
    "\001\001\000\004\024\237\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\023\241\001\001\000\002\001\001\000" +
    "\004\024\237\001\001\000\034\004\142\005\156\007\145" +
    "\011\140\012\153\015\152\020\244\026\150\031\135\036" +
    "\151\045\160\060\144\062\141\001\001\000\002\001\001" +
    "\000\034\004\142\005\156\007\145\011\140\012\153\015" +
    "\152\020\246\026\150\031\135\036\151\045\160\060\144" +
    "\062\141\001\001\000\002\001\001\000\034\004\142\005" +
    "\156\007\145\011\140\012\153\015\152\020\250\026\150" +
    "\031\135\036\151\045\160\060\144\062\141\001\001\000" +
    "\002\001\001\000\034\004\142\005\156\007\145\011\140" +
    "\012\153\015\152\020\252\026\150\031\135\036\151\045" +
    "\160\060\144\062\141\001\001\000\002\001\001\000\002" +
    "\001\001\000\034\004\142\005\156\007\145\011\140\012" +
    "\153\015\152\020\255\026\150\031\135\036\151\045\160" +
    "\060\144\062\141\001\001\000\002\001\001\000\034\004" +
    "\142\005\156\007\145\011\140\012\153\015\152\020\261" +
    "\026\150\031\135\036\151\045\160\060\144\062\141\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\016\016\050\033" +
    "\233\034\061\052\046\054\045\062\051\001\001\000\002" +
    "\001\001\000\016\016\050\034\271\045\267\052\046\054" +
    "\045\062\051\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\016\016\050\033" +
    "\277\034\061\052\046\054\045\062\051\001\001\000\014" +
    "\016\050\034\275\052\046\054\045\062\051\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\034\004\142\005\156\007\145\011\140\012" +
    "\153\015\152\020\302\026\150\031\135\036\151\045\160" +
    "\060\144\062\141\001\001\000\002\001\001\000\034\004" +
    "\142\005\156\007\145\011\140\012\153\015\152\020\304" +
    "\026\150\031\135\036\151\045\160\060\144\062\141\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\016\050\052\046\054\310\061\312\001\001\000" +
    "\004\056\325\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\056\316\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\016\050\052\046\054\310\061\317\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\056\323\001\001\000\012\016\050\052\046\054\310" +
    "\061\324\001\001\000\002\001\001\000\012\016\050\052" +
    "\046\054\310\061\326\001\001\000\002\001\001\000\034" +
    "\004\142\005\156\007\145\011\140\012\153\015\152\020" +
    "\330\026\150\031\135\036\151\045\160\060\144\062\141" +
    "\001\001\000\002\001\001\000\034\004\142\005\156\007" +
    "\145\011\140\012\153\015\152\020\332\026\150\031\135" +
    "\036\151\045\160\060\144\062\141\001\001\000\002\001" +
    "\001\000\034\004\142\005\156\007\145\011\140\012\153" +
    "\015\152\020\334\026\150\031\135\036\151\045\160\060" +
    "\144\062\141\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\004\023\006\016\010\027\025\021\055\337\001" +
    "\001\000\004\017\340\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\034\004\142\005\156\007" +
    "\145\011\140\012\153\015\152\020\344\026\150\031\135" +
    "\036\151\045\160\060\144\062\141\001\001\000\002\001" +
    "\001\000\034\004\142\005\156\007\145\011\140\012\153" +
    "\015\152\020\346\026\150\031\135\036\151\045\160\060" +
    "\144\062\141\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\034\004\142\005\156\007\145\011\140" +
    "\012\153\015\152\020\360\026\150\031\135\036\151\045" +
    "\160\060\144\062\141\001\001\000\034\004\142\005\156" +
    "\007\145\011\140\012\153\015\152\020\356\026\150\031" +
    "\135\036\151\045\160\060\144\062\141\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\004\023\006\016\010\027" +
    "\025\021\055\364\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\023\367\001\001\000\002\001\001\000\036" +
    "\004\142\005\156\007\145\011\140\012\153\015\152\020" +
    "\371\024\372\026\150\031\135\036\151\045\160\060\144" +
    "\062\141\001\001\000\002\001\001\000\034\004\142\005" +
    "\156\007\145\011\140\012\153\015\152\020\373\026\150" +
    "\031\135\036\151\045\160\060\144\062\141\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\036\004\142\005\156\007" +
    "\145\011\140\012\153\015\152\020\u0101\024\u0102\026\150" +
    "\031\135\036\151\045\160\060\144\062\141\001\001\000" +
    "\002\001\001\000\034\004\142\005\156\007\145\011\140" +
    "\012\153\015\152\020\u0103\026\150\031\135\036\151\045" +
    "\160\060\144\062\141\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\023\u010b" +
    "\001\001\000\002\001\001\000\034\004\142\005\156\007" +
    "\145\011\140\012\153\015\152\020\u010d\026\150\031\135" +
    "\036\151\045\160\060\144\062\141\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\034\004\142" +
    "\005\156\007\145\011\140\012\153\015\152\020\u0111\026" +
    "\150\031\135\036\151\045\160\060\144\062\141\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\023\u0115\001\001\000\002\001\001\000\034\004\142" +
    "\005\156\007\145\011\140\012\153\015\152\020\u0117\026" +
    "\150\031\135\036\151\045\160\060\144\062\141\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\034\004\142\005\156\007\145\011\140\012\153\015\152" +
    "\020\u011b\026\150\031\135\036\151\045\160\060\144\062" +
    "\141\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\004\023\006\016\010\027\025\021\055" +
    "\u011f\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$ArbolSemantico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$ArbolSemantico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$ArbolSemantico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



	public String resultado="";
	//public Fila tipo;
        public Tabla tabla = new Tabla();
        public String cadena="";
        public String cadena2="";
        public String cadena3="";
	public int contador = 1;
        

 public void syntax_error(Symbol s){
        Ventana.notificar_er("Error de sintaxis: "+ s.value +" Linea " +(s.right)+" columna " +(s.left) );
    }

 public void semantic_error(String valor) throws java.lang.Exception {
        Ventana.notificar_er("Error de tipo, el error de tipo , es el error de tipo: "+ valor );
    }

   public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
      Ventana.notificar_er("Una Sentencia, Ciclo o Funcion no ha sido cerrada correctamente ");
    }

/*
  
    public void syntax_error(Symbol s){
        System.out.println("Error Sintactico en la Linea " + (s.right+1) +" Columna "+s.left+ ". Identificador " +s.value + " no reconocido." );
    }

 
    public void unrecovered_syntax_error(Symbol s){
        //System.out.println("Error Sintactico en la Linea " + (s.right+1)+ "Columna "+s.left+". Identificador " + s.value + " no reconocido.");
		System.out.println(s);
	}
*/


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$ArbolSemantico$actions {




  private final ArbolSemantico parser;

  /** Constructor */
  CUP$ArbolSemantico$actions(ArbolSemantico parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$ArbolSemantico$do_action_part00000000(
    int                        CUP$ArbolSemantico$act_num,
    java_cup.runtime.lr_parser CUP$ArbolSemantico$parser,
    java.util.Stack            CUP$ArbolSemantico$stack,
    int                        CUP$ArbolSemantico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$ArbolSemantico$result;

      /* select the action based on the action number */
      switch (CUP$ArbolSemantico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= PROGRAMA EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-1)).value;
		RESULT = start_val;
              CUP$ArbolSemantico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-1)), ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$ArbolSemantico$parser.done_parsing();
          return CUP$ArbolSemantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= SentenciaModulo Identificador CUERPO_ESTRUCTURA Main parentesisE parentesisC CUERPO End Sub CUERPO_ESTRUCTURA FINAL 
            {
              Object RESULT =null;

              CUP$ArbolSemantico$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-10)), ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()), RESULT);
            }
          return CUP$ArbolSemantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INICIO ::= error 
            {
              Object RESULT =null;

              CUP$ArbolSemantico$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()), RESULT);
            }
          return CUP$ArbolSemantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // VARIABLES ::= Identificador coma VARIABLES 
            {
              Object RESULT =null;

              CUP$ArbolSemantico$result = parser.getSymbolFactory().newSymbol("VARIABLES",10, ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-2)), ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()), RESULT);
            }
          return CUP$ArbolSemantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // VARIABLES ::= Identificador 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.peek()).value;
		
             
             RESULT = n1;
    
              CUP$ArbolSemantico$result = parser.getSymbolFactory().newSymbol("VARIABLES",10, ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()), RESULT);
            }
          return CUP$ArbolSemantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // TIPODATO ::= AS Integer 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-1)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.peek()).value;
		
            
             RESULT = n2; 
              CUP$ArbolSemantico$result = parser.getSymbolFactory().newSymbol("TIPODATO",18, ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-1)), ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()), RESULT);
            }
          return CUP$ArbolSemantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // TIPODATO ::= AS Boolean 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-1)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.peek()).value;
		
            
             RESULT = n2; 
              CUP$ArbolSemantico$result = parser.getSymbolFactory().newSymbol("TIPODATO",18, ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-1)), ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()), RESULT);
            }
          return CUP$ArbolSemantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // TIPODATO ::= AS String 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-1)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.peek()).value;
		
         
             RESULT = n2; 
              CUP$ArbolSemantico$result = parser.getSymbolFactory().newSymbol("TIPODATO",18, ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-1)), ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()), RESULT);
            }
          return CUP$ArbolSemantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // TIPODATO ::= AS Identificador 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-1)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.peek()).value;
		

                

             
          
             RESULT = n2; 

              CUP$ArbolSemantico$result = parser.getSymbolFactory().newSymbol("TIPODATO",18, ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-1)), ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()), RESULT);
            }
          return CUP$ArbolSemantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // DECLARACION ::= Dim VARIABLES TIPODATO IGUALDAD 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-3)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-3)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-3)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-2)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-2)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-2)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-1)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-1)).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-1)).value;
		int n4left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()).left;
		int n4right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()).right;
		Object n4 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.peek()).value;
		
      
   
int cont=0;
          for (int i =0; i < tabla.getListaSimbolo().size();i++){
    if(n2.toString().equals(tabla.getListaSimbolo().get(i).getNombreVar())){
cont++;

System.out.println("en esta posicion de la tabla " + i + " es el error y este es el cont " + cont);
}


}
    if(n4 != null){
  
    if(cont==0){
     if((n3.toString()).equals(n4.toString())){
        Fila Fila1 = new Fila(n3.toString() , n2.toString());
        tabla.getListaSimbolo().add(Fila1);

    }else {

        semantic_error("La variable no es del mismo tipo que el asignado" );
    }
}else{
semantic_error("La variable "+n2.toString()+" ya existe" );
}


 
    }else{
        
         if(cont==0){
        tabla.getListaSimbolo().add(new Fila(n3.toString() , n2.toString()));
}else{
semantic_error("La variable "+n2.toString()+" ya existe" );
}

            }

            String xd = "";
            xd = "(" + n2.toString()  + " x " + n3.toString() + ")";

                


RESULT = xd;





              CUP$ArbolSemantico$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-3)), ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()), RESULT);
            }
          return CUP$ArbolSemantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // IGUALDAD ::= Igual New Identificador parentesisE PARAMETROS2 parentesisC 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-5)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-5)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-5)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-4)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-4)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-4)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-3)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-3)).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-3)).value;
		int n4left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-2)).left;
		int n4right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-2)).right;
		Object n4 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-2)).value;
		int n5left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-1)).left;
		int n5right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-1)).right;
		Object n5 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-1)).value;
		int n6left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()).left;
		int n6right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()).right;
		Object n6 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.peek()).value;
		
         
            if (n5 != null){
          
            Funcion  TipoF  = new Funcion();
          String retor = "";
         
          String revisar = tabla.BuscarTipoFuncion(n3.toString());

              System.out.println("hasta aqui no hay vergues xD XD:: " + revisar );
              System.out.println("hasta aqui si hay vergues xD XD nooooooooo:: " + n5.toString() );
           
              if(!revisar.equals("error_tipo")){
                TipoF = tabla.esFuncion(n3.toString());
             
                if((n5.toString()).equals(TipoF.getArgumentos())){

                    
                    retor = TipoF.getRetorno();


                }
            }else {
                 semantic_error("Error tipo la variable   " + n3.toString() + "   no se encuentra" );
            }
  
                  System.out.println("AAAAAAAAAAAYUDADDDDD ADADA DA DS D" + retor  );

                RESULT = retor;
}
            
             
              CUP$ArbolSemantico$result = parser.getSymbolFactory().newSymbol("IGUALDAD",27, ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-5)), ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()), RESULT);
            }
          return CUP$ArbolSemantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // IGUALDAD ::= Igual Identificador parentesisE PARAMETROS2 parentesisC 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-4)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-4)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-4)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-3)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-3)).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-3)).value;
		int n4left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-2)).left;
		int n4right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-2)).right;
		Object n4 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-2)).value;
		int n5left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-1)).left;
		int n5right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-1)).right;
		Object n5 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-1)).value;
		int n6left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()).left;
		int n6right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()).right;
		Object n6 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.peek()).value;
		
         
            if (n5 != null){
          
            Funcion  TipoF  = new Funcion();
          String retor = "";
         
          String revisar = tabla.BuscarTipoFuncion(n3.toString());

              System.out.println("hasta aqui no hay vergues xD XD:: " + revisar );
              System.out.println("hasta aqui si hay vergues xD XD nooooooooo:: " + n5.toString() );
           
              if(!revisar.equals("error_tipo")){
                TipoF = tabla.esFuncion(n3.toString());
             
                if((n5.toString()).equals(TipoF.getArgumentos())){

                    
                    retor = TipoF.getRetorno();


                }
            }else {
                 semantic_error("Error tipo la variable   " + n3.toString() + "   no se encuentra" );
            }
  
                  System.out.println("AAAAAAAAAAAYUDADDDDD ADADA DA DS D" + retor  );

                RESULT = retor;
}
            
             
              CUP$ArbolSemantico$result = parser.getSymbolFactory().newSymbol("IGUALDAD",27, ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-4)), ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()), RESULT);
            }
          return CUP$ArbolSemantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // IGUALDAD ::= Igual DATO 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-1)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.peek()).value;
		
                System.out.println("Hola perra");
              String revisar = tabla.BuscarTipoN(n2.toString());
             
             if(!revisar.equals("error_tipo")){
                cadena = revisar;
            }else {
                 semantic_error("Error tipo la variable " + n2.toString() + " no se encuentra" );
            }
          
             
             RESULT = cadena;

             
             
              CUP$ArbolSemantico$result = parser.getSymbolFactory().newSymbol("IGUALDAD",27, ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-1)), ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()), RESULT);
            }
          return CUP$ArbolSemantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // IGUALDAD ::= Igual Identificador parentesisE parentesisC 
            {
              Object RESULT =null;
		int n3left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-2)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-2)).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-2)).value;
		

               
            Funcion  TipoF  = new Funcion();
          String retor = "";
         
          String revisar = tabla.BuscarTipoFuncion(n3.toString());

              System.out.println("hasta aqui no hay vergues xD XD:: " + revisar );
              System.out.println("hasta aqui si hay vergues xD XD nooooooooo:: " + n3.toString() );
           
              if(!revisar.equals("error_tipo")){
                 TipoF = tabla.esFuncion(n3.toString());
             
                if((TipoF.getArgumentos()).equals("void")){

                    
                    retor = TipoF.getRetorno();


                }
            }
  
                

                RESULT = retor;
            
              CUP$ArbolSemantico$result = parser.getSymbolFactory().newSymbol("IGUALDAD",27, ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-3)), ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()), RESULT);
            }
          return CUP$ArbolSemantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // IGUALDAD ::= 
            {
              Object RESULT =null;

              CUP$ArbolSemantico$result = parser.getSymbolFactory().newSymbol("IGUALDAD",27, ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()), RESULT);
            }
          return CUP$ArbolSemantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // PARAMETROS ::= Identificador TIPODATO coma PARAMETROS 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-3)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-3)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-3)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-2)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-2)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-2)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-1)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-1)).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-1)).value;
		int n4left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()).left;
		int n4right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()).right;
		Object n4 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.peek()).value;
		
                

                    
                if ((n4 != null) && (n2 != null)) {
                cadena = n4.toString()+ "x" + n2.toString() ;
            
                   tabla.getListaSimbolo().add(new Fila(n2.toString() , n1.toString()));
             
             RESULT = cadena;

             }
             
             
              CUP$ArbolSemantico$result = parser.getSymbolFactory().newSymbol("PARAMETROS",17, ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-3)), ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()), RESULT);
            }
          return CUP$ArbolSemantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // PARAMETROS ::= Identificador TIPODATO 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-1)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.peek()).value;
		

               tabla.getListaSimbolo().add(new Fila(n2.toString() , n1.toString()));
             if (n2 != null){
             RESULT = n2;}
             
              CUP$ArbolSemantico$result = parser.getSymbolFactory().newSymbol("PARAMETROS",17, ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-1)), ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()), RESULT);
            }
          return CUP$ArbolSemantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // DATO ::= Op_Booleano 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.peek()).value;
		
              
                 
             RESULT = "Boolean";
             
              CUP$ArbolSemantico$result = parser.getSymbolFactory().newSymbol("DATO",26, ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()), RESULT);
            }
          return CUP$ArbolSemantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // DATO ::= ARITMETICOS 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.peek()).value;
		
           
             if (n1 != null)
             RESULT = n1;
              
             
              CUP$ArbolSemantico$result = parser.getSymbolFactory().newSymbol("DATO",26, ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()), RESULT);
            }
          return CUP$ArbolSemantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // DATO ::= Cadena 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.peek()).value;
		
           
           
             RESULT = "String";
             
              CUP$ArbolSemantico$result = parser.getSymbolFactory().newSymbol("DATO",26, ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()), RESULT);
            }
          return CUP$ArbolSemantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // DATO ::= LEER 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.peek()).value;
		
              if (n1 != null)
             RESULT = n1;
             
              CUP$ArbolSemantico$result = parser.getSymbolFactory().newSymbol("DATO",26, ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()), RESULT);
            }
          return CUP$ArbolSemantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // PARAMETROS2 ::= DATO coma PARAMETROS2 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-2)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-1)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-1)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.peek()).value;
		
           
           // String revisar = tabla.BuscarTipoN(n1.toString());
             
             if(!(n1.toString()).equals("error_tipo")){
                cadena =  n3.toString()+ "x" + n1.toString() ;
            }else {
                System.out.println("yo voy segundo jaja");
                 semantic_error("Error tipo la variable sip aqui tamos xD " + n1.toString() + "no se encuentra" );
            }
               
         
             
             RESULT = cadena;
             
              CUP$ArbolSemantico$result = parser.getSymbolFactory().newSymbol("PARAMETROS2",25, ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-2)), ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()), RESULT);
            }
          return CUP$ArbolSemantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // PARAMETROS2 ::= DATO 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.peek()).value;
		
            String cad = "";
            //String revisar = tabla.BuscarTipoN(n1.toString());
             
             if(!(n1.toString()).equals("error_tipo")){
                cad = n1.toString();
            } else {
                   System.out.println("yo voy primero jaja  " +  n1.toString());
                 semantic_error("Error tipo la variable y aqui me presento " + n1.toString() + "no se encuentra" );
            }
          
             
             RESULT = cad;
             
              CUP$ArbolSemantico$result = parser.getSymbolFactory().newSymbol("PARAMETROS2",25, ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()), RESULT);
            }
          return CUP$ArbolSemantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // ESTRUCTURA ::= struct Identificador PARA_STRUCK End struct 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-4)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-4)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-4)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-3)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-3)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-3)).value;
		int n6left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-2)).left;
		int n6right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-2)).right;
		Object n6 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-2)).value;
		int n4left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-1)).left;
		int n4right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-1)).right;
		Object n4 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-1)).value;
		int n5left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()).left;
		int n5right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()).right;
		Object n5 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.peek()).value;
		

            Record registro = new Record();
        
        if (!(cadena2.equals(""))){
            

            cadena3 = "Record(" + cadena2 + ")";
            System.out.println("el registro masizo " + cadena3);

        Fila Fila1 = new Fila(cadena3 , n2.toString());
        tabla.getListaSimbolo().add(Fila1);
                
        registro = new Record (cadena3);
        
        registro.obtenerVariables();
        registro.impresion();
            
        cadena2 = "";
           
             }else{
              
System.out.println("no entre jijii ");
             Fila Fila1 = new Fila("void" , n2.toString());
            tabla.getListaSimbolo().add(Fila1);
            

                }
            // RESULT = nd;
             
              CUP$ArbolSemantico$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA",19, ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-4)), ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()), RESULT);
            }
          return CUP$ArbolSemantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // CUERPO_ESTRUCTURA ::= DECLARACION Enter CUERPO_ESTRUCTURA 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-2)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-2)).value;
		
       // cadena2 = "";
        //RESULT = nd;  
              CUP$ArbolSemantico$result = parser.getSymbolFactory().newSymbol("CUERPO_ESTRUCTURA",43, ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-2)), ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()), RESULT);
            }
          return CUP$ArbolSemantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // CUERPO_ESTRUCTURA ::= ESTRUCTURA Enter CUERPO_ESTRUCTURA 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-2)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-2)).value;
		
          
          //  RESULT = nd;  
              CUP$ArbolSemantico$result = parser.getSymbolFactory().newSymbol("CUERPO_ESTRUCTURA",43, ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-2)), ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()), RESULT);
            }
          return CUP$ArbolSemantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // CUERPO_ESTRUCTURA ::= FUNCION Enter CUERPO_ESTRUCTURA 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-2)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-2)).value;
		
           
           // RESULT = nd;  
              CUP$ArbolSemantico$result = parser.getSymbolFactory().newSymbol("CUERPO_ESTRUCTURA",43, ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-2)), ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()), RESULT);
            }
          return CUP$ArbolSemantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // CUERPO_ESTRUCTURA ::= PARA_SUB Enter CUERPO_ESTRUCTURA 
            {
              Object RESULT =null;
		
           
          //  RESULT = nd;  
              CUP$ArbolSemantico$result = parser.getSymbolFactory().newSymbol("CUERPO_ESTRUCTURA",43, ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-2)), ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()), RESULT);
            }
          return CUP$ArbolSemantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // CUERPO_ESTRUCTURA ::= Enter CUERPO_ESTRUCTURA 
            {
              Object RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-1)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-1)).value;
		
         //if (n2 != null)
            //RESULT = n2;


        
              CUP$ArbolSemantico$result = parser.getSymbolFactory().newSymbol("CUERPO_ESTRUCTURA",43, ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-1)), ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()), RESULT);
            }
          return CUP$ArbolSemantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // CUERPO_ESTRUCTURA ::= 
            {
              Object RESULT =null;

              CUP$ArbolSemantico$result = parser.getSymbolFactory().newSymbol("CUERPO_ESTRUCTURA",43, ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()), RESULT);
            }
          return CUP$ArbolSemantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // PARA_STRUCK ::= DECLARACION Enter PARA_STRUCK 
            {
              Object RESULT =null;
		int n2left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-2)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-2)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-2)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.peek()).value;
		

            

                String variableOP = n2.toString();
             
           
              
            if (n3 != null){
             
            cadena2 =  n2.toString()+ " x " + n3.toString() ;
            System.out.println("viva las nalgonas cuarentoans 1 ::  " + cadena2 );
                RESULT = cadena2;
            }else{

                    
                    cadena2 =  n2.toString() + cadena2 ;
                    System.out.println("viva las nalgonas cuarentoans 2 ::  " + cadena2 );
                    RESULT = cadena2;
                }


                
            


              CUP$ArbolSemantico$result = parser.getSymbolFactory().newSymbol("PARA_STRUCK",38, ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-2)), ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()), RESULT);
            }
          return CUP$ArbolSemantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // PARA_STRUCK ::= Enter PARA_STRUCK 
            {
              Object RESULT =null;

              CUP$ArbolSemantico$result = parser.getSymbolFactory().newSymbol("PARA_STRUCK",38, ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-1)), ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()), RESULT);
            }
          return CUP$ArbolSemantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // PARA_STRUCK ::= 
            {
              Object RESULT =null;
		




    
              CUP$ArbolSemantico$result = parser.getSymbolFactory().newSymbol("PARA_STRUCK",38, ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()), RESULT);
            }
          return CUP$ArbolSemantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // PARA_SUB ::= Sub Identificador parentesisE PARAMETROS parentesisC CUERPO End Sub 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-7)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-7)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-7)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-6)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-6)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-6)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-5)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-5)).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-5)).value;
		int n4left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-4)).left;
		int n4right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-4)).right;
		Object n4 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-4)).value;
		int n5left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-3)).left;
		int n5right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-3)).right;
		Object n5 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-3)).value;
		int n6left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-2)).left;
		int n6right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-2)).right;
		Object n6 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-2)).value;
		int n7left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-1)).left;
		int n7right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-1)).right;
		Object n7 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-1)).value;
		int n8left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()).left;
		int n8right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()).right;
		Object n8 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.peek()).value;
		
            System.out.println("Aqi esta el sub");
             Fila Fila1 = new Fila(new Funcion(n4.toString(), "void" ) , n2.toString());
             tabla.getListaSimbolo().add(Fila1);
             
             //RESULT = nd;
             
              CUP$ArbolSemantico$result = parser.getSymbolFactory().newSymbol("PARA_SUB",4, ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-7)), ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()), RESULT);
            }
          return CUP$ArbolSemantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // PARA_SUB ::= Sub Identificador parentesisE parentesisC CUERPO End Sub 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-6)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-6)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-6)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-5)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-5)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-5)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-4)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-4)).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-4)).value;
		int n4left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-3)).left;
		int n4right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-3)).right;
		Object n4 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-3)).value;
		int n5left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-2)).left;
		int n5right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-2)).right;
		Object n5 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-2)).value;
		int n6left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-1)).left;
		int n6right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-1)).right;
		Object n6 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-1)).value;
		int n7left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()).left;
		int n7right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()).right;
		Object n7 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.peek()).value;
		
            Fila Fila1 = new Fila(new Funcion("void", "void" ) , n2.toString());
             tabla.getListaSimbolo().add(Fila1);
         
            // RESULT = nd;
             
              CUP$ArbolSemantico$result = parser.getSymbolFactory().newSymbol("PARA_SUB",4, ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-6)), ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()), RESULT);
            }
          return CUP$ArbolSemantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // PARA_SUB ::= Sub New parentesisE parentesisC CUERPO End Sub 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-6)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-6)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-6)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-5)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-5)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-5)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-4)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-4)).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-4)).value;
		int n4left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-3)).left;
		int n4right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-3)).right;
		Object n4 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-3)).value;
		int n5left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-2)).left;
		int n5right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-2)).right;
		Object n5 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-2)).value;
		int n6left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-1)).left;
		int n6right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-1)).right;
		Object n6 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-1)).value;
		int n7left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()).left;
		int n7right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()).right;
		Object n7 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.peek()).value;
		
            Fila Fila1 = new Fila(new Funcion("void", "void" ) , n2.toString());
             tabla.getListaSimbolo().add(Fila1);
            // RESULT = nd;
             
              CUP$ArbolSemantico$result = parser.getSymbolFactory().newSymbol("PARA_SUB",4, ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-6)), ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()), RESULT);
            }
          return CUP$ArbolSemantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // PARA_SUB ::= Sub New parentesisE PARAMETROS parentesisC CUERPO End Sub 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-7)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-7)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-7)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-6)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-6)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-6)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-5)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-5)).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-5)).value;
		int n4left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-4)).left;
		int n4right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-4)).right;
		Object n4 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-4)).value;
		int n5left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-3)).left;
		int n5right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-3)).right;
		Object n5 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-3)).value;
		int n6left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-2)).left;
		int n6right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-2)).right;
		Object n6 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-2)).value;
		int n7left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-1)).left;
		int n7right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-1)).right;
		Object n7 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-1)).value;
		int n8left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()).left;
		int n8right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()).right;
		Object n8 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.peek()).value;
		
            Fila Fila1 = new Fila(new Funcion(n4.toString(), "void") , n2.toString());
            // RESULT = nd;
             
              CUP$ArbolSemantico$result = parser.getSymbolFactory().newSymbol("PARA_SUB",4, ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-7)), ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()), RESULT);
            }
          return CUP$ArbolSemantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // RETORNO ::= Return Numero 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-1)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.peek()).value;
		
         
             
           RESULT = "Integer";
             
              CUP$ArbolSemantico$result = parser.getSymbolFactory().newSymbol("RETORNO",5, ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-1)), ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()), RESULT);
            }
          return CUP$ArbolSemantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // RETORNO ::= Return Identificador 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-1)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.peek()).value;
		
           
            String revisar = tabla.BuscarTipoN(n2.toString());
            
             RESULT = revisar;
             
              CUP$ArbolSemantico$result = parser.getSymbolFactory().newSymbol("RETORNO",5, ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-1)), ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()), RESULT);
            }
          return CUP$ArbolSemantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // RETORNO ::= Return Op_Booleano 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-1)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.peek()).value;
		
         
             
             RESULT = "Boolean";
             
              CUP$ArbolSemantico$result = parser.getSymbolFactory().newSymbol("RETORNO",5, ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-1)), ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()), RESULT);
            }
          return CUP$ArbolSemantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // RETORNO ::= Return Cadena 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-1)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.peek()).value;
		
          
             
           RESULT = "String";
             
              CUP$ArbolSemantico$result = parser.getSymbolFactory().newSymbol("RETORNO",5, ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-1)), ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()), RESULT);
            }
          return CUP$ArbolSemantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // RETORNO ::= Return Identificador parentesisE PARAMETROS parentesisC 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-4)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-4)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-4)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-3)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-3)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-3)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-2)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-2)).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-2)).value;
		int n4left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-1)).left;
		int n4right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-1)).right;
		Object n4 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-1)).value;
		int n5left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()).left;
		int n5right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()).right;
		Object n5 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.peek()).value;
		
            
             //RESULT = nd;
             
              CUP$ArbolSemantico$result = parser.getSymbolFactory().newSymbol("RETORNO",5, ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-4)), ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()), RESULT);
            }
          return CUP$ArbolSemantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // RETORNO ::= Return RECURSION 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-1)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.peek()).value;
		
         
            // RESULT = nd;
  
           
              CUP$ArbolSemantico$result = parser.getSymbolFactory().newSymbol("RETORNO",5, ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-1)), ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()), RESULT);
            }
          return CUP$ArbolSemantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // FUNCION ::= Function Identificador parentesisE PARAMETROS parentesisC TIPODATO CUERPO End Function 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-8)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-8)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-8)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-7)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-7)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-7)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-6)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-6)).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-6)).value;
		int n4left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-5)).left;
		int n4right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-5)).right;
		Object n4 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-5)).value;
		int n5left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-4)).left;
		int n5right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-4)).right;
		Object n5 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-4)).value;
		int n6left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-3)).left;
		int n6right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-3)).right;
		Object n6 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-3)).value;
		int n7left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-2)).left;
		int n7right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-2)).right;
		Object n7 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-2)).value;
		int n8left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-1)).left;
		int n8right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-1)).right;
		Object n8 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-1)).value;
		int n9left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()).left;
		int n9right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()).right;
		Object n9 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.peek()).value;
		
             Fila Fila1 = new Fila(new Funcion(n4.toString(),n6.toString()) , n2.toString());
             tabla.getListaSimbolo().add(Fila1);


            
             

               
             //RESULT = nd;
             
              CUP$ArbolSemantico$result = parser.getSymbolFactory().newSymbol("FUNCION",6, ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-8)), ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()), RESULT);
            }
          return CUP$ArbolSemantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // FUNCION ::= Function Identificador parentesisE PARAMETROS parentesisC CUERPO End Function 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-7)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-7)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-7)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-6)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-6)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-6)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-5)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-5)).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-5)).value;
		int n4left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-4)).left;
		int n4right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-4)).right;
		Object n4 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-4)).value;
		int n5left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-3)).left;
		int n5right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-3)).right;
		Object n5 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-3)).value;
		int n6left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-2)).left;
		int n6right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-2)).right;
		Object n6 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-2)).value;
		int n7left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-1)).left;
		int n7right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-1)).right;
		Object n7 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-1)).value;
		int n8left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()).left;
		int n8right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()).right;
		Object n8 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.peek()).value;
		

            Fila Fila1 = new Fila(new Funcion(n4.toString(), "void" ) , n2.toString());
             tabla.getListaSimbolo().add(Fila1);
             
           
             //RESULT = nd;
             
              CUP$ArbolSemantico$result = parser.getSymbolFactory().newSymbol("FUNCION",6, ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-7)), ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()), RESULT);
            }
          return CUP$ArbolSemantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // FUNCION ::= Function Identificador parentesisE parentesisC TIPODATO CUERPO End Function 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-7)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-7)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-7)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-6)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-6)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-6)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-5)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-5)).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-5)).value;
		int n4left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-4)).left;
		int n4right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-4)).right;
		Object n4 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-4)).value;
		int n5left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-3)).left;
		int n5right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-3)).right;
		Object n5 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-3)).value;
		int n6left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-2)).left;
		int n6right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-2)).right;
		Object n6 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-2)).value;
		int n7left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-1)).left;
		int n7right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-1)).right;
		Object n7 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-1)).value;
		int n8left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()).left;
		int n8right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()).right;
		Object n8 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.peek()).value;
		

             Fila Fila1 = new Fila(new Funcion("void", n5.toString() ) , n2.toString());
             tabla.getListaSimbolo().add(Fila1);
          
            // RESULT = nd;
             
              CUP$ArbolSemantico$result = parser.getSymbolFactory().newSymbol("FUNCION",6, ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-7)), ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()), RESULT);
            }
          return CUP$ArbolSemantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // FUNCION ::= Function Identificador parentesisE parentesisC CUERPO End Function 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-6)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-6)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-6)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-5)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-5)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-5)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-4)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-4)).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-4)).value;
		int n4left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-3)).left;
		int n4right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-3)).right;
		Object n4 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-3)).value;
		int n5left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-2)).left;
		int n5right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-2)).right;
		Object n5 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-2)).value;
		int n6left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-1)).left;
		int n6right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-1)).right;
		Object n6 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-1)).value;
		int n7left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()).left;
		int n7right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()).right;
		Object n7 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.peek()).value;
		
             Fila Fila1 = new Fila(new Funcion("void", "void" ) , n2.toString());
             tabla.getListaSimbolo().add(Fila1);
            
          
             //RESULT = nd;
             
              CUP$ArbolSemantico$result = parser.getSymbolFactory().newSymbol("FUNCION",6, ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-6)), ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()), RESULT);
            }
          return CUP$ArbolSemantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // SENTENCIA_BOOLEANA ::= Identificador COMPARACION VALORES_NUMERICOS 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-2)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-1)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-1)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.peek()).value;
		
            String bandera = "";
            System.out.println("Hola perra1: "+n3.toString());
            String variable1 = tabla.BuscarTipoN(n1.toString());
            
            String variable2 = n3.toString();
            System.out.println("Hola puta: "+variable2);
            if ((!variable1.equals("error_tipo")) && (!variable2.equals("error_tipo"))){
                if ((!variable1.equals(variable2))){
                    bandera = "invalida";
                    semantic_error("Las variables no son del mismo tipo");
                    
            } else{
                    bandera = "valida" ;
                } 
            }else{
                semantic_error("Error tipo en el if con las variables " + n1.toString() + " o con "  + n3.toString());

                }
            
             RESULT = bandera;
             
              CUP$ArbolSemantico$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",31, ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-2)), ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()), RESULT);
            }
          return CUP$ArbolSemantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // SENTENCIA_BOOLEANA ::= Identificador COMPARACION Op_Booleano 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-2)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-1)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-1)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.peek()).value;
		
            String bandera = "";
            String variable1 = tabla.BuscarTipoN(n1.toString());
            System.out.println("Hola perra3: "+n3.toString());
            if ((!variable1.equals("error_tipo")) ){
                if ((!variable1.equals("Boolean"))){
                    semantic_error("la variable" + n1.toString() + "no es un boolean");
            }else {
                bandera = "valido";
            }
        }else{
                semantic_error("no se encontro la variable" + n1.toString());
          }
             RESULT = bandera;
             
              CUP$ArbolSemantico$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",31, ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-2)), ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()), RESULT);
            }
          return CUP$ArbolSemantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // SENTENCIA_BOOLEANA ::= Identificador COMPARACION Cadena 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-2)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-1)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-1)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.peek()).value;
		
            String bandera = "";
            String variable1 = tabla.BuscarTipoN(n1.toString());

            if ((!variable1.equals("error_tipo")) ){
                if ((!variable1.equals("String"))){
                    semantic_error("la variable" + n1.toString() + "no es un cadena");
            }else {
                bandera = "valido";
            }
        }else{
                semantic_error("no se encontro la variable" + n1.toString());
          }
             RESULT = bandera;
             
              CUP$ArbolSemantico$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",31, ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-2)), ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()), RESULT);
            }
          return CUP$ArbolSemantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // SENTENCIA_BOOLEANA ::= Identificador COMPARACION Comilla Comilla 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-3)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-3)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-3)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-2)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-2)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-2)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-1)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-1)).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-1)).value;
		int n4left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()).left;
		int n4right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()).right;
		Object n4 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.peek()).value;
		
            String bandera = "";
             String variable1 = tabla.BuscarTipoN(n1.toString());

            if ((!variable1.equals("error_tipo")) ){
                if ((!variable1.equals("String"))){
                    semantic_error("la variable" + n1.toString() + "no es un cadena");
            }else {
                bandera = "valido";
            }
        }else{
                semantic_error("no se encontro la variable" + n1.toString());
          }
             RESULT = bandera;
             
              CUP$ArbolSemantico$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",31, ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-3)), ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()), RESULT);
            }
          return CUP$ArbolSemantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // COMPARACION ::= OperadorRelacional 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.peek()).value;
		
      
             
             RESULT = n1;
             
              CUP$ArbolSemantico$result = parser.getSymbolFactory().newSymbol("COMPARACION",34, ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()), RESULT);
            }
          return CUP$ArbolSemantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // COMPARACION ::= Igual 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.peek()).value;
		
            
            
             RESULT = n1;
             
              CUP$ArbolSemantico$result = parser.getSymbolFactory().newSymbol("COMPARACION",34, ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()), RESULT);
            }
          return CUP$ArbolSemantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // DECLARACION_IF ::= LOGICOAND LOGICOOR 
            {
              Object RESULT =null;
		
         
             //RESULT = nd;
             
              CUP$ArbolSemantico$result = parser.getSymbolFactory().newSymbol("DECLARACION_IF",22, ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-1)), ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()), RESULT);
            }
          return CUP$ArbolSemantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // DECLARACION_IF ::= parentesisE DECLARACION_IF parentesisC 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-2)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-2)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.peek()).value;
		
          
             //RESULT = nd;
             
              CUP$ArbolSemantico$result = parser.getSymbolFactory().newSymbol("DECLARACION_IF",22, ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-2)), ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()), RESULT);
            }
          return CUP$ArbolSemantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // LOGICOOR ::= OR LOGICOAND LOGICOOR 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-2)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-2)).value;
		
            
             //RESULT = nd;
             
              CUP$ArbolSemantico$result = parser.getSymbolFactory().newSymbol("LOGICOOR",33, ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-2)), ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()), RESULT);
            }
          return CUP$ArbolSemantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // LOGICOOR ::= 
            {
              Object RESULT =null;

              CUP$ArbolSemantico$result = parser.getSymbolFactory().newSymbol("LOGICOOR",33, ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()), RESULT);
            }
          return CUP$ArbolSemantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // LOGICOAND ::= SENTENCIA_BOOLEANA LOGICOAND_Prima 
            {
              Object RESULT =null;
		
           
             //RESULT = nd;
             
              CUP$ArbolSemantico$result = parser.getSymbolFactory().newSymbol("LOGICOAND",21, ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-1)), ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()), RESULT);
            }
          return CUP$ArbolSemantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // LOGICOAND_Prima ::= And SENTENCIA_BOOLEANA LOGICOAND_Prima 
            {
              Object RESULT =null;
		
           
             //RESULT = nd;
             
              CUP$ArbolSemantico$result = parser.getSymbolFactory().newSymbol("LOGICOAND_Prima",32, ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-2)), ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()), RESULT);
            }
          return CUP$ArbolSemantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // LOGICOAND_Prima ::= 
            {
              Object RESULT =null;

              CUP$ArbolSemantico$result = parser.getSymbolFactory().newSymbol("LOGICOAND_Prima",32, ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()), RESULT);
            }
          return CUP$ArbolSemantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // SENTENCIA_IF ::= IF DECLARACION_IF then CUERPO End IF 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-5)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-5)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-5)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-3)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-3)).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-3)).value;
		int n5left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-1)).left;
		int n5right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-1)).right;
		Object n5 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-1)).value;
		int n6left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()).left;
		int n6right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()).right;
		Object n6 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.peek()).value;
		
            
             //RESULT = nd;
             
              CUP$ArbolSemantico$result = parser.getSymbolFactory().newSymbol("SENTENCIA_IF",20, ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-5)), ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()), RESULT);
            }
          return CUP$ArbolSemantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // ELSE_IF ::= IF DECLARACION_IF then CUERPO Else CUERPO End IF 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-7)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-7)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-7)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-5)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-5)).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-5)).value;
		int n4left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-4)).left;
		int n4right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-4)).right;
		Object n4 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-4)).value;
		int n5left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-3)).left;
		int n5right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-3)).right;
		Object n5 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-3)).value;
		int n6left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-2)).left;
		int n6right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-2)).right;
		Object n6 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-2)).value;
		int n7left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-1)).left;
		int n7right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-1)).right;
		Object n7 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-1)).value;
		int n8left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()).left;
		int n8right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()).right;
		Object n8 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.peek()).value;
		
           
             //RESULT = nd;
             
              CUP$ArbolSemantico$result = parser.getSymbolFactory().newSymbol("ELSE_IF",23, ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-7)), ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()), RESULT);
            }
          return CUP$ArbolSemantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // ARITMETICOS ::= MULTIPLICACIONES ADICIONES 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-1)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.peek()).value;
		
                if(n2 != null){
                    if(!(n1.toString()).equals("Integer")){
                              if((!(n1.toString()).equals("Boolean"))){
                semantic_error("la variable " + n1.toString() + " no es un Boolean");
                    RESULT = "error_tipo";
                }else{
                    RESULT = "Boolean";
                }
                        semantic_error("error de tipo , revise la multiplicacion" );
                            RESULT = "error_tipo" ;
                    }else{
                            RESULT = "Integer" ;

                        }
                     
                }else {
                        
                        RESULT = n1 ;
                    }
                
          
          
             
              CUP$ArbolSemantico$result = parser.getSymbolFactory().newSymbol("ARITMETICOS",42, ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-1)), ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()), RESULT);
            }
          return CUP$ArbolSemantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // ADICIONES ::= OPRestSuma MULTIPLICACIONES ADICIONES 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-2)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-1)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-1)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.peek()).value;
		
         
            
            System.out.println("Buenos Dias culona");

            
            if((n3 != null )){
                if ((!(n3.toString()).equals("error_tipo") )){
           

            if ((!(n2.toString()).equals("error_tipo")) ){
                if ((!(n2.toString()).equals("Integer"))){
                   // semantic_error("la variable" + n2.toString() + "no es un numero");
                    RESULT = "error_tipo";
            }else {
                RESULT = "Integer";
            } }else {
                   // semantic_error("error de tipo en la adicion");
                    RESULT = "error_tipo";
                        } 
        }else{
                // semantic_error("no se encontro la variable" + n2.toString());
                RESULT = "error_tipo";
          } 
        }else{
                
            /// si no es nulo
              
                if ((!(n2.toString()).equals("error_tipo")) ){
                if ((!(n2.toString()).equals("Integer"))){
                    semantic_error("no puede operar valores " + n2.toString() + " con enteros");
                    RESULT = "error_tipo";
            }else {
                RESULT = "Integer";
            } 
            }else {
                    semantic_error("error de tipo en la adicion");
                    RESULT = "error_tipo";

                    }
 
                }

             
              CUP$ArbolSemantico$result = parser.getSymbolFactory().newSymbol("ADICIONES",39, ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-2)), ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()), RESULT);
            }
          return CUP$ArbolSemantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // ADICIONES ::= 
            {
              Object RESULT =null;

              CUP$ArbolSemantico$result = parser.getSymbolFactory().newSymbol("ADICIONES",39, ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()), RESULT);
            }
          return CUP$ArbolSemantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // MULTIPLICACIONES ::= VALORES_NUMERICOS MULTIPLICACIONES_PRIMA 
            {
              Object RESULT =null;
		int n2left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-1)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-1)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.peek()).value;
		
               
                 if(n1 != null){
                    if(!(n1.toString()).equals("Integer")){
                            
                        semantic_error("error de tipo , revise la multiplicacion" );
                            RESULT = "error_tipo" ;
                    }else{
                            RESULT = "Integer" ;

                        }
                        
                     
                }else {
                        
                        RESULT = n2.toString() ;
                    }
            
           
             
              CUP$ArbolSemantico$result = parser.getSymbolFactory().newSymbol("MULTIPLICACIONES",40, ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-1)), ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()), RESULT);
            }
          return CUP$ArbolSemantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // MULTIPLICACIONES_PRIMA ::= OPMultDiv VALORES_NUMERICOS MULTIPLICACIONES_PRIMA 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-2)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-1)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-1)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.peek()).value;
		
             
            if((n3 != null )){
                if ((!(n3.toString()).equals("error_tipo") )){
           

            if ((!(n2.toString()).equals("error_tipo")) ){
                if ((!(n2.toString()).equals("Integer"))){
                   // semantic_error("la variable " + n2.toString() + " no es un numero");
                    RESULT = "error_tipo";
            }else {
                RESULT = "Integer";
            }
            
             }else {
                   // semantic_error("la variable" + n2.toString() + "no es un numero");
                    RESULT = "error_tipo";
                        } 
        }else{
                // semantic_error("no se encontro la variable" + n2.toString());
                RESULT = "error_tipo";
          } 
        }else{
                
            /// si no es nulo
              
                if ((!(n2.toString()).equals("error_tipo")) ){
                if ((!(n2.toString()).equals("Integer"))){
                    semantic_error("no puede operar valores " + n2.toString() + " con enteros");
                    RESULT = "error_tipo";
            }else {
                RESULT = "Integer";
            }
           
                 }else {
                    semantic_error("no puede operar valores " + n2.toString() + " con enteros");
                    RESULT = "error_tipo";

                    }
 
                }
           
             
             
              CUP$ArbolSemantico$result = parser.getSymbolFactory().newSymbol("MULTIPLICACIONES_PRIMA",41, ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-2)), ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()), RESULT);
            }
          return CUP$ArbolSemantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // MULTIPLICACIONES_PRIMA ::= 
            {
              Object RESULT =null;

              CUP$ArbolSemantico$result = parser.getSymbolFactory().newSymbol("MULTIPLICACIONES_PRIMA",41, ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()), RESULT);
            }
          return CUP$ArbolSemantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // VALORES_NUMERICOS ::= Numero 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.peek()).value;
		
            
             RESULT = "Integer";
             
              CUP$ArbolSemantico$result = parser.getSymbolFactory().newSymbol("VALORES_NUMERICOS",12, ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()), RESULT);
            }
          return CUP$ArbolSemantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // VALORES_NUMERICOS ::= Identificador 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.peek()).value;
		
                        String variable1 = "";

           if (((n1.toString()).toLowerCase()).equals("True".toLowerCase()) || ((n1.toString()).toLowerCase()).equals("False".toLowerCase())){
             
            variable1 = "Boolean";
            }else{
            String bandera = "";
            variable1 = tabla.BuscarTipoN(n1.toString());

            }
          
          RESULT = variable1;
             
              CUP$ArbolSemantico$result = parser.getSymbolFactory().newSymbol("VALORES_NUMERICOS",12, ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()), RESULT);
            }
          return CUP$ArbolSemantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // VALORES_NUMERICOS ::= parentesisE ARITMETICOS parentesisC 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-2)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-1)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-1)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.peek()).value;
		
                
                if (!((n2.toString()).equals("Integer"))){
                        RESULT = "error_tipo";
                    
                    }else{
                        RESULT = "Integer";

                    }
                
    
             
              CUP$ArbolSemantico$result = parser.getSymbolFactory().newSymbol("VALORES_NUMERICOS",12, ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-2)), ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()), RESULT);
            }
          return CUP$ArbolSemantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // OP_RECURSIVIDAD ::= RECURSION 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.peek()).value;
		
            
            // RESULT = nd;
             
              CUP$ArbolSemantico$result = parser.getSymbolFactory().newSymbol("OP_RECURSIVIDAD",36, ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()), RESULT);
            }
          return CUP$ArbolSemantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // OP_RECURSIVIDAD ::= RECURSION OPRestSuma ARITMETICOS 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-2)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-1)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-1)).value;
		
       
            // RESULT = nd;
             
              CUP$ArbolSemantico$result = parser.getSymbolFactory().newSymbol("OP_RECURSIVIDAD",36, ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-2)), ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()), RESULT);
            }
          return CUP$ArbolSemantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // OP_RECURSIVIDAD ::= RECURSION OPMultDiv ARITMETICOS 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-2)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-1)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-1)).value;
		
            
             //RESULT = nd;
             
              CUP$ArbolSemantico$result = parser.getSymbolFactory().newSymbol("OP_RECURSIVIDAD",36, ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-2)), ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()), RESULT);
            }
          return CUP$ArbolSemantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // OP_RECURSIVIDAD ::= ARITMETICOS OPRestSuma RECURSION 
            {
              Object RESULT =null;
		int n2left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-1)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-1)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.peek()).value;
		
           
            // RESULT = nd;
             
              CUP$ArbolSemantico$result = parser.getSymbolFactory().newSymbol("OP_RECURSIVIDAD",36, ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-2)), ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()), RESULT);
            }
          return CUP$ArbolSemantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // OP_RECURSIVIDAD ::= ARITMETICOS OPMultDiv RECURSION 
            {
              Object RESULT =null;
		int n2left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-1)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-1)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.peek()).value;
		
           
           //  RESULT = nd;
             
              CUP$ArbolSemantico$result = parser.getSymbolFactory().newSymbol("OP_RECURSIVIDAD",36, ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-2)), ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()), RESULT);
            }
          return CUP$ArbolSemantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // ASIGNACION ::= Identificador Igual DATO 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-2)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-1)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-1)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.peek()).value;
		 
                
               
                String revisar = tabla.BuscarTipoN(n1.toString()) ;
                String revisar2 = tabla.BuscarTipoN(n3.toString()) ;
                
                
                 System.out.println(revisar + " comparado con  : " + n3.toString());
                if(!((revisar).equals(n3.toString()))){
                     
                    semantic_error(revisar);
                
                }

         
        
             // RESULT = nd;
             
              CUP$ArbolSemantico$result = parser.getSymbolFactory().newSymbol("ASIGNACION",11, ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-2)), ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()), RESULT);
            }
          return CUP$ArbolSemantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // ASIGNACION ::= Identificador Punto Identificador Igual DATO 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-4)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-4)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-4)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-3)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-3)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-3)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-2)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-2)).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-2)).value;
		int n4left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-1)).left;
		int n4right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-1)).right;
		Object n4 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-1)).value;
		int n5left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()).left;
		int n5right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()).right;
		Object n5 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.peek()).value;
		
          
            // RESULT = nd;
             
              CUP$ArbolSemantico$result = parser.getSymbolFactory().newSymbol("ASIGNACION",11, ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-4)), ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()), RESULT);
            }
          return CUP$ArbolSemantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // ASIGNACION ::= Identificador Igual RECURSION 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-2)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-1)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-1)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.peek()).value;
		

                
      String revisar = tabla.BuscarTipoN(n1.toString());
    if (!((revisar).equals("error_tipo"))){
     if(!((revisar).equals(n3.toString()))){

        semantic_error("La variable no es del mismo tipo que el asignado" );
    }

}else{
            semantic_error("la variable " + n1 + " no existe ");

     }


                
            
            // RESULT = nd;
             
              CUP$ArbolSemantico$result = parser.getSymbolFactory().newSymbol("ASIGNACION",11, ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-2)), ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()), RESULT);
            }
          return CUP$ArbolSemantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // IMPRIMIR ::= Console Punto WriteLine parentesisE CONCATENACION parentesisC 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-5)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-5)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-5)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-4)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-4)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-4)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-3)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-3)).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-3)).value;
		int n4left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-2)).left;
		int n4right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-2)).right;
		Object n4 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-2)).value;
		int n5left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-1)).left;
		int n5right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-1)).right;
		Object n5 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-1)).value;
		int n6left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()).left;
		int n6right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()).right;
		Object n6 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.peek()).value;
		
       
         //    RESULT = nd;
             
              CUP$ArbolSemantico$result = parser.getSymbolFactory().newSymbol("IMPRIMIR",46, ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-5)), ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()), RESULT);
            }
          return CUP$ArbolSemantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // LEER ::= Console Punto ReadLine parentesisE parentesisC 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-4)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-4)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-4)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-3)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-3)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-3)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-2)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-2)).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-2)).value;
		int n4left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-1)).left;
		int n4right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-1)).right;
		Object n4 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-1)).value;
		int n5left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()).left;
		int n5right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()).right;
		Object n5 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.peek()).value;
		
            
           //  RESULT = nd;
             
              CUP$ArbolSemantico$result = parser.getSymbolFactory().newSymbol("LEER",48, ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-4)), ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()), RESULT);
            }
          return CUP$ArbolSemantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // LLAMADA_FUNCION ::= Identificador Punto Identificador parentesisE parentesisC 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-4)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-4)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-4)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-3)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-3)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-3)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-2)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-2)).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-2)).value;
		int n4left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-1)).left;
		int n4right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-1)).right;
		Object n4 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-1)).value;
		int n5left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()).left;
		int n5right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()).right;
		Object n5 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.peek()).value;
		
             
     
           //  RESULT = nd;
             
              CUP$ArbolSemantico$result = parser.getSymbolFactory().newSymbol("LLAMADA_FUNCION",28, ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-4)), ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()), RESULT);
            }
          return CUP$ArbolSemantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // LLAMADA_FUNCION ::= Identificador Punto Identificador parentesisE PARAMETROS2 parentesisC 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-5)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-5)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-5)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-3)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-3)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-3)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-2)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-2)).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-2)).value;
		int n4left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-1)).left;
		int n4right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-1)).right;
		Object n4 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-1)).value;
		int n5left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()).left;
		int n5right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()).right;
		Object n5 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.peek()).value;
		
         
           //  RESULT = nd;
             
              CUP$ArbolSemantico$result = parser.getSymbolFactory().newSymbol("LLAMADA_FUNCION",28, ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-5)), ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()), RESULT);
            }
          return CUP$ArbolSemantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // CONCATENACION ::= Cadena CONCATENABLES CONCATENACION 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-2)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-1)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-1)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.peek()).value;
		
       
             //RESULT = nd;
             
              CUP$ArbolSemantico$result = parser.getSymbolFactory().newSymbol("CONCATENACION",47, ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-2)), ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()), RESULT);
            }
          return CUP$ArbolSemantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // CONCATENACION ::= ARITMETICOS CONCATENABLES CONCATENACION 
            {
              Object RESULT =null;
		int n2left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-1)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-1)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.peek()).value;
		
           
           //  RESULT = nd;
             
              CUP$ArbolSemantico$result = parser.getSymbolFactory().newSymbol("CONCATENACION",47, ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-2)), ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()), RESULT);
            }
          return CUP$ArbolSemantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // CONCATENACION ::= Identificador Punto Identificador CONCATENABLES CONCATENACION 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-4)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-4)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-4)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-3)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-3)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-3)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-2)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-2)).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-2)).value;
		int n4left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-1)).left;
		int n4right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-1)).right;
		Object n4 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-1)).value;
		int n5left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()).left;
		int n5right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()).right;
		Object n5 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.peek()).value;
		
          
            // RESULT = nd;
             
              CUP$ArbolSemantico$result = parser.getSymbolFactory().newSymbol("CONCATENACION",47, ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-4)), ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()), RESULT);
            }
          return CUP$ArbolSemantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // CONCATENACION ::= Cadena 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.peek()).value;
		
          
      
            // RESULT = nd;
             
              CUP$ArbolSemantico$result = parser.getSymbolFactory().newSymbol("CONCATENACION",47, ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()), RESULT);
            }
          return CUP$ArbolSemantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // CONCATENACION ::= ARITMETICOS 
            {
              Object RESULT =null;
		
           
           //  RESULT = nd;
             
              CUP$ArbolSemantico$result = parser.getSymbolFactory().newSymbol("CONCATENACION",47, ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()), RESULT);
            }
          return CUP$ArbolSemantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // CONCATENACION ::= Identificador Punto Identificador 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-2)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-1)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-1)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.peek()).value;
		
           
            // RESULT = nd;
             
              CUP$ArbolSemantico$result = parser.getSymbolFactory().newSymbol("CONCATENACION",47, ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-2)), ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()), RESULT);
            }
          return CUP$ArbolSemantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // CONCATENABLES ::= concatenacion 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.peek()).value;
		
           
            // RESULT = nd;
             
              CUP$ArbolSemantico$result = parser.getSymbolFactory().newSymbol("CONCATENABLES",44, ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()), RESULT);
            }
          return CUP$ArbolSemantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // CONCATENABLES ::= coma 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.peek()).value;
		
         
            // RESULT = nd;
             
              CUP$ArbolSemantico$result = parser.getSymbolFactory().newSymbol("CONCATENABLES",44, ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()), RESULT);
            }
          return CUP$ArbolSemantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // CUERPO ::= DECLARACION Enter CUERPO 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-2)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.peek()).value;
		
            //cadena2 = "";
           //  RESULT = nd;
             
              CUP$ArbolSemantico$result = parser.getSymbolFactory().newSymbol("CUERPO",14, ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-2)), ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()), RESULT);
            }
          return CUP$ArbolSemantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // CUERPO ::= IMPRIMIR Enter CUERPO 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-2)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.peek()).value;
		
            
           //  RESULT = nd;
             
              CUP$ArbolSemantico$result = parser.getSymbolFactory().newSymbol("CUERPO",14, ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-2)), ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()), RESULT);
            }
          return CUP$ArbolSemantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // CUERPO ::= ASIGNACION Enter CUERPO 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-2)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.peek()).value;
		
            
            // RESULT = nd;
             
              CUP$ArbolSemantico$result = parser.getSymbolFactory().newSymbol("CUERPO",14, ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-2)), ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()), RESULT);
            }
          return CUP$ArbolSemantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // CUERPO ::= SENTENCIA_IF Enter CUERPO 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-2)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.peek()).value;
		
         
            // RESULT = nd;
             
              CUP$ArbolSemantico$result = parser.getSymbolFactory().newSymbol("CUERPO",14, ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-2)), ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()), RESULT);
            }
          return CUP$ArbolSemantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // CUERPO ::= ELSE_IF Enter CUERPO 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-2)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.peek()).value;
		
          
           //  RESULT = nd;
             
              CUP$ArbolSemantico$result = parser.getSymbolFactory().newSymbol("CUERPO",14, ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-2)), ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()), RESULT);
            }
          return CUP$ArbolSemantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // CUERPO ::= DECLARACION_FOR Enter CUERPO 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-2)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.peek()).value;
		
           
            // RESULT = nd;
             
              CUP$ArbolSemantico$result = parser.getSymbolFactory().newSymbol("CUERPO",14, ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-2)), ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()), RESULT);
            }
          return CUP$ArbolSemantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // CUERPO ::= WHILE Enter CUERPO 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-2)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.peek()).value;
		
        
            // RESULT = nd;
             
              CUP$ArbolSemantico$result = parser.getSymbolFactory().newSymbol("CUERPO",14, ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-2)), ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()), RESULT);
            }
          return CUP$ArbolSemantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // CUERPO ::= DO_WHILE Enter CUERPO 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-2)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.peek()).value;
		
           
            // RESULT = nd;
             
              CUP$ArbolSemantico$result = parser.getSymbolFactory().newSymbol("CUERPO",14, ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-2)), ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()), RESULT);
            }
          return CUP$ArbolSemantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // CUERPO ::= LEER Enter CUERPO 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-2)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.peek()).value;
		
     
            // RESULT = nd;
             
              CUP$ArbolSemantico$result = parser.getSymbolFactory().newSymbol("CUERPO",14, ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-2)), ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()), RESULT);
            }
          return CUP$ArbolSemantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // CUERPO ::= LLAMADA_FUNCION Enter CUERPO 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-2)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.peek()).value;
		
            
            // RESULT = nd;
             
              CUP$ArbolSemantico$result = parser.getSymbolFactory().newSymbol("CUERPO",14, ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-2)), ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()), RESULT);
            }
          return CUP$ArbolSemantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // CUERPO ::= Comentario Enter CUERPO 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-2)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.peek()).value;
		
          
           //  RESULT = nd;
             
              CUP$ArbolSemantico$result = parser.getSymbolFactory().newSymbol("CUERPO",14, ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-2)), ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()), RESULT);
            }
          return CUP$ArbolSemantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // CUERPO ::= RECURSION Enter CUERPO 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-2)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.peek()).value;
		
           
             //RESULT = nd;
             
              CUP$ArbolSemantico$result = parser.getSymbolFactory().newSymbol("CUERPO",14, ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-2)), ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()), RESULT);
            }
          return CUP$ArbolSemantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // CUERPO ::= Enter CUERPO 
            {
              Object RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-1)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.peek()).value;
		
    
           
            //RESULT = n2;

           
              CUP$ArbolSemantico$result = parser.getSymbolFactory().newSymbol("CUERPO",14, ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-1)), ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()), RESULT);
            }
          return CUP$ArbolSemantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // CUERPO ::= RETORNO Enter CUERPO 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-2)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-2)).value;
		
                  //RESULT = n1;
                
              CUP$ArbolSemantico$result = parser.getSymbolFactory().newSymbol("CUERPO",14, ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-2)), ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()), RESULT);
            }
          return CUP$ArbolSemantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // CUERPO ::= 
            {
              Object RESULT =null;

              CUP$ArbolSemantico$result = parser.getSymbolFactory().newSymbol("CUERPO",14, ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()), RESULT);
            }
          return CUP$ArbolSemantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // RECURSION ::= Identificador parentesisE PARAMETROS2 parentesisC 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-3)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-3)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-3)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-2)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-2)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-2)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-1)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-1)).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-1)).value;
		int n4left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()).left;
		int n4right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()).right;
		Object n4 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.peek()).value;
		

                
               if (n3 != null){
          
            Funcion  TipoF  = new Funcion();
          String retor = "";
         
          String revisar = tabla.BuscarTipoFuncion(n1.toString());

              System.out.println("hasta aqui no hay vergues xD XD:: " + revisar );
              System.out.println("hasta aqui si hay vergues xD XD nooooooooo:: " + n3.toString() );
           
              if(!revisar.equals("error_tipo")){
                TipoF = tabla.esFuncion(n1.toString());
                if((n3.toString()).contains(TipoF.getArgumentos())){

                    retor = TipoF.getRetorno();


                }else{
                semantic_error("Error tipo la variable   " + n1.toString() + "   no tiene esos tipos de parametros" );
            }
            }else {
                 semantic_error("Error tipo la variable   " + n1.toString() + "   no se encuentra" );
            }
                  System.out.println("aquie es man aqui hay cagadal " + retor  );

                RESULT = retor;
                }
            
             
              CUP$ArbolSemantico$result = parser.getSymbolFactory().newSymbol("RECURSION",35, ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-3)), ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()), RESULT);
            }
          return CUP$ArbolSemantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // RECURSION ::= Identificador parentesisE parentesisC 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-2)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-1)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-1)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.peek()).value;
		

System.out.println("efectivamente perra asquerosa: " );
                Funcion  TipoF  = new Funcion();
          String retor = "";
         System.out.println("Aqui es perra: "+n1.toString());
          String revisar = tabla.BuscarTipoFuncion(n1.toString());

              
           
              if(!revisar.equals("error_tipo")){
                 TipoF = tabla.esFuncion(n1.toString());
                System.out.println("hasta aqui si hay vergues xD XD nooooooooo:: " + TipoF.getRetorno() );
                 System.out.println("hasta aqui no hay vergues xD XD:: " + TipoF.getArgumentos() );
              
             
                if((TipoF.getArgumentos()).equals("void")){

                    
                    retor = TipoF.getRetorno();


                }else {
                        retor = "error_tipo";
                        semantic_error("Error tipo, la funcion "+ n1.toString()+" si tiene parametros"  );
                    }

            }
            
            RESULT = retor;
             
              CUP$ArbolSemantico$result = parser.getSymbolFactory().newSymbol("RECURSION",35, ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-2)), ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()), RESULT);
            }
          return CUP$ArbolSemantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // DECLARACION_FOR ::= For ASIGNACION TO Numero CUERPO Next 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-5)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-5)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-5)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-4)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-4)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-4)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-3)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-3)).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-3)).value;
		int n4left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-2)).left;
		int n4right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-2)).right;
		Object n4 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-2)).value;
		int n6left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()).left;
		int n6right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()).right;
		Object n6 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.peek()).value;
		
           
            
                 
              CUP$ArbolSemantico$result = parser.getSymbolFactory().newSymbol("DECLARACION_FOR",3, ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-5)), ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()), RESULT);
            }
          return CUP$ArbolSemantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // DECLARACION_FOR ::= For ASIGNACION TO Identificador CUERPO Next 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-5)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-5)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-5)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-4)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-4)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-4)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-3)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-3)).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-3)).value;
		int n4left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-2)).left;
		int n4right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-2)).right;
		Object n4 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-2)).value;
		int n6left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()).left;
		int n6right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()).right;
		Object n6 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.peek()).value;
		
                            String revisar = tabla.BuscarTipoN(n4.toString()); 

                            if(!(revisar.equals("Integer"))){
                                semantic_error("error de tipo , con el id de for");
                            }
                    
             
              CUP$ArbolSemantico$result = parser.getSymbolFactory().newSymbol("DECLARACION_FOR",3, ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-5)), ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()), RESULT);
            }
          return CUP$ArbolSemantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // WHILE ::= While DECLARACION_IF CUERPO End While 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-4)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-4)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-4)).value;
		int n4left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-1)).left;
		int n4right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-1)).right;
		Object n4 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-1)).value;
		int n5left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()).left;
		int n5right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()).right;
		Object n5 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.peek()).value;
		
            
          
             
              CUP$ArbolSemantico$result = parser.getSymbolFactory().newSymbol("WHILE",7, ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-4)), ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()), RESULT);
            }
          return CUP$ArbolSemantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // DO_WHILE ::= Do While DECLARACION_IF CUERPO Loop 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-4)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-4)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-4)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-3)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-3)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-3)).value;
		int n5left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()).left;
		int n5right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()).right;
		Object n5 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.peek()).value;
		
              
        
             
              CUP$ArbolSemantico$result = parser.getSymbolFactory().newSymbol("DO_WHILE",8, ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-4)), ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()), RESULT);
            }
          return CUP$ArbolSemantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // FINAL ::= End SentenciaModulo 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-1)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$ArbolSemantico$stack.peek()).value;
		

       
       
         




              CUP$ArbolSemantico$result = parser.getSymbolFactory().newSymbol("FINAL",13, ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-1)), ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()), RESULT);
            }
          return CUP$ArbolSemantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // DESPUES ::= Enter DESPUES 
            {
              Object RESULT =null;

              CUP$ArbolSemantico$result = parser.getSymbolFactory().newSymbol("DESPUES",30, ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-1)), ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()), RESULT);
            }
          return CUP$ArbolSemantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // DESPUES ::= Enter 
            {
              Object RESULT =null;

              CUP$ArbolSemantico$result = parser.getSymbolFactory().newSymbol("DESPUES",30, ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()), RESULT);
            }
          return CUP$ArbolSemantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // PROGRAMA ::= Enter PROGRAMA 
            {
              Object RESULT =null;

              CUP$ArbolSemantico$result = parser.getSymbolFactory().newSymbol("PROGRAMA",29, ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-1)), ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()), RESULT);
            }
          return CUP$ArbolSemantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // PROGRAMA ::= INICIO 
            {
              Object RESULT =null;

              CUP$ArbolSemantico$result = parser.getSymbolFactory().newSymbol("PROGRAMA",29, ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()), ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()), RESULT);
            }
          return CUP$ArbolSemantico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // PROGRAMA ::= INICIO DESPUES 
            {
              Object RESULT =null;

              CUP$ArbolSemantico$result = parser.getSymbolFactory().newSymbol("PROGRAMA",29, ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.elementAt(CUP$ArbolSemantico$top-1)), ((java_cup.runtime.Symbol)CUP$ArbolSemantico$stack.peek()), RESULT);
            }
          return CUP$ArbolSemantico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$ArbolSemantico$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$ArbolSemantico$do_action(
    int                        CUP$ArbolSemantico$act_num,
    java_cup.runtime.lr_parser CUP$ArbolSemantico$parser,
    java.util.Stack            CUP$ArbolSemantico$stack,
    int                        CUP$ArbolSemantico$top)
    throws java.lang.Exception
    {
              return CUP$ArbolSemantico$do_action_part00000000(
                               CUP$ArbolSemantico$act_num,
                               CUP$ArbolSemantico$parser,
                               CUP$ArbolSemantico$stack,
                               CUP$ArbolSemantico$top);
    }
}

}
