
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package codigo;

import java_cup.runtime.Symbol;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class CupArbol extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public CupArbol() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public CupArbol(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public CupArbol(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\162\000\002\002\004\000\002\002\015\000\002\014" +
    "\005\000\002\014\003\000\002\024\004\000\002\024\004" +
    "\000\002\024\004\000\002\024\004\000\002\024\004\000" +
    "\002\004\006\000\002\035\010\000\002\035\004\000\002" +
    "\035\006\000\002\035\002\000\002\023\006\000\002\023" +
    "\004\000\002\034\003\000\002\034\003\000\002\034\003" +
    "\000\002\034\003\000\002\033\005\000\002\033\003\000" +
    "\002\025\007\000\002\054\005\000\002\054\005\000\002" +
    "\054\005\000\002\054\005\000\002\054\004\000\002\054" +
    "\002\000\002\006\012\000\002\006\011\000\002\006\011" +
    "\000\002\006\012\000\002\007\004\000\002\007\004\000" +
    "\002\007\004\000\002\007\004\000\002\007\007\000\002" +
    "\007\004\000\002\010\013\000\002\010\012\000\002\010" +
    "\012\000\002\010\011\000\002\041\005\000\002\041\005" +
    "\000\002\041\005\000\002\041\005\000\002\041\006\000" +
    "\002\044\003\000\002\044\003\000\002\030\004\000\002" +
    "\030\005\000\002\043\005\000\002\043\002\000\002\027" +
    "\004\000\002\042\005\000\002\042\002\000\002\026\010" +
    "\000\002\031\012\000\002\053\004\000\002\050\005\000" +
    "\002\050\002\000\002\051\004\000\002\052\005\000\002" +
    "\052\002\000\002\016\003\000\002\016\003\000\002\016" +
    "\005\000\002\046\003\000\002\046\005\000\002\046\005" +
    "\000\002\046\005\000\002\046\005\000\002\015\005\000" +
    "\002\015\007\000\002\015\005\000\002\057\010\000\002" +
    "\061\007\000\002\036\007\000\002\036\010\000\002\060" +
    "\005\000\002\060\005\000\002\060\007\000\002\060\003" +
    "\000\002\060\003\000\002\060\005\000\002\055\003\000" +
    "\002\055\003\000\002\020\005\000\002\020\005\000\002" +
    "\020\005\000\002\020\005\000\002\020\005\000\002\020" +
    "\005\000\002\020\005\000\002\020\005\000\002\020\005" +
    "\000\002\020\005\000\002\020\005\000\002\020\005\000" +
    "\002\020\004\000\002\020\004\000\002\020\002\000\002" +
    "\045\006\000\002\045\005\000\002\005\010\000\002\011" +
    "\007\000\002\012\007\000\002\017\004\000\002\040\004" +
    "\000\002\040\003\000\002\037\004\000\002\037\003\000" +
    "\002\037\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0113\000\006\026\004\037\005\001\002\000\006\026" +
    "\004\037\005\001\002\000\004\004\014\001\002\000\006" +
    "\002\uff91\026\011\001\002\000\004\002\010\001\002\000" +
    "\004\002\001\001\002\000\010\002\uff93\023\uff93\026\011" +
    "\001\002\000\004\002\uff90\001\002\000\006\002\uff94\023" +
    "\uff94\001\002\000\016\026\024\034\uffe5\036\016\051\017" +
    "\053\025\055\023\001\002\000\004\026\u0113\001\002\000" +
    "\006\004\376\066\375\001\002\000\004\004\352\001\002" +
    "\000\004\026\350\001\002\000\004\026\346\001\002\000" +
    "\004\034\116\001\002\000\004\004\112\001\002\000\020" +
    "\023\uffe5\026\024\034\uffe5\036\016\051\017\053\025\055" +
    "\023\001\002\000\004\004\032\001\002\000\004\026\027" +
    "\001\002\000\020\023\uffe5\026\024\034\uffe5\036\016\051" +
    "\017\053\025\055\023\001\002\000\006\023\uffe8\034\uffe8" +
    "\001\002\000\004\054\035\001\002\000\006\054\ufffe\061" +
    "\033\001\002\000\004\004\032\001\002\000\004\054\uffff" +
    "\001\002\000\014\004\107\012\104\013\105\015\110\062" +
    "\106\001\002\000\006\026\ufff4\031\040\001\002\000\004" +
    "\026\ufff8\001\002\000\020\004\052\005\054\006\046\010" +
    "\041\035\042\056\043\066\051\001\002\000\010\004\052" +
    "\005\054\010\041\001\002\000\012\011\ufff0\026\ufff0\057" +
    "\ufff0\061\ufff0\001\002\000\004\016\076\001\002\000\012" +
    "\011\ufff1\026\ufff1\057\ufff1\061\ufff1\001\002\000\016\011" +
    "\uffc4\024\073\026\uffc4\047\uffc4\057\uffc4\061\uffc4\001\002" +
    "\000\012\011\uffef\026\uffef\057\uffef\061\uffef\001\002\000" +
    "\020\011\uffc1\024\uffc1\025\067\026\uffc1\047\uffc1\057\uffc1" +
    "\061\uffc1\001\002\000\012\011\uffee\026\uffee\057\uffee\061" +
    "\uffee\001\002\000\006\004\056\010\055\001\002\000\020" +
    "\011\uffbf\024\uffbf\025\uffbf\026\uffbf\047\uffbf\057\uffbf\061" +
    "\uffbf\001\002\000\004\026\ufff6\001\002\000\020\011\uffc0" +
    "\024\uffc0\025\uffc0\026\uffc0\047\uffc0\057\uffc0\061\uffc0\001" +
    "\002\000\004\011\065\001\002\000\004\010\057\001\002" +
    "\000\016\004\052\005\054\006\046\010\041\035\042\056" +
    "\043\001\002\000\006\011\uffec\061\063\001\002\000\004" +
    "\011\062\001\002\000\004\026\ufff7\001\002\000\016\004" +
    "\052\005\054\006\046\010\041\035\042\056\043\001\002" +
    "\000\004\011\uffed\001\002\000\004\026\ufff5\001\002\000" +
    "\016\011\uffc3\024\uffc3\026\uffc3\047\uffc3\057\uffc3\061\uffc3" +
    "\001\002\000\010\004\052\005\054\010\041\001\002\000" +
    "\020\011\uffc1\024\uffc1\025\067\026\uffc1\047\uffc1\057\uffc1" +
    "\061\uffc1\001\002\000\016\011\uffc2\024\uffc2\026\uffc2\047" +
    "\uffc2\057\uffc2\061\uffc2\001\002\000\014\011\uffc6\026\uffc6" +
    "\047\uffc6\057\uffc6\061\uffc6\001\002\000\010\004\052\005" +
    "\054\010\041\001\002\000\016\011\uffc4\024\073\026\uffc4" +
    "\047\uffc4\057\uffc4\061\uffc4\001\002\000\014\011\uffc5\026" +
    "\uffc5\047\uffc5\057\uffc5\061\uffc5\001\002\000\004\064\077" +
    "\001\002\000\004\010\100\001\002\000\004\011\101\001" +
    "\002\000\012\011\uffb4\026\uffb4\057\uffb4\061\uffb4\001\002" +
    "\000\004\011\103\001\002\000\020\011\uffbe\024\uffbe\025" +
    "\uffbe\026\uffbe\047\uffbe\057\uffbe\061\uffbe\001\002\000\036" +
    "\004\ufffd\011\ufffd\023\ufffd\026\ufffd\030\ufffd\031\ufffd\041" +
    "\ufffd\042\ufffd\043\ufffd\044\ufffd\052\ufffd\053\ufffd\056\ufffd" +
    "\061\ufffd\001\002\000\036\004\ufffb\011\ufffb\023\ufffb\026" +
    "\ufffb\030\ufffb\031\ufffb\041\ufffb\042\ufffb\043\ufffb\044\ufffb" +
    "\052\ufffb\053\ufffb\056\ufffb\061\ufffb\001\002\000\036\004" +
    "\ufffa\011\ufffa\023\ufffa\026\ufffa\030\ufffa\031\ufffa\041\ufffa" +
    "\042\ufffa\043\ufffa\044\ufffa\052\ufffa\053\ufffa\056\ufffa\061" +
    "\ufffa\001\002\000\036\004\ufff9\011\ufff9\023\ufff9\026\ufff9" +
    "\030\ufff9\031\ufff9\041\ufff9\042\ufff9\043\ufff9\044\ufff9\052" +
    "\ufff9\053\ufff9\056\ufff9\061\ufff9\001\002\000\036\004\ufffc" +
    "\011\ufffc\023\ufffc\026\ufffc\030\ufffc\031\ufffc\041\ufffc\042" +
    "\ufffc\043\ufffc\044\ufffc\052\ufffc\053\ufffc\056\ufffc\061\ufffc" +
    "\001\002\000\006\023\uffe6\034\uffe6\001\002\000\016\023" +
    "\uffe5\026\024\036\016\051\017\053\025\055\023\001\002" +
    "\000\004\023\114\001\002\000\004\055\115\001\002\000" +
    "\004\026\uffeb\001\002\000\004\010\117\001\002\000\004" +
    "\011\120\001\002\000\030\004\134\023\uff9b\026\122\030" +
    "\124\041\121\042\135\043\145\044\143\052\142\053\025" +
    "\056\131\001\002\000\004\004\337\001\002\000\036\004" +
    "\134\023\uff9b\026\122\030\124\033\uff9b\041\121\042\135" +
    "\043\145\044\143\052\142\053\025\056\131\063\uff9b\065" +
    "\uff9b\001\002\000\004\026\333\001\002\000\004\026\331" +
    "\001\002\000\004\026\327\001\002\000\004\023\321\001" +
    "\002\000\004\026\317\001\002\000\004\026\315\001\002" +
    "\000\004\016\273\001\002\000\004\026\271\001\002\000" +
    "\004\026\267\001\002\000\010\010\252\016\253\031\254" +
    "\001\002\000\006\004\154\010\152\001\002\000\004\026" +
    "\237\001\002\000\004\026\235\001\002\000\004\026\233" +
    "\001\002\000\004\026\231\001\002\000\012\004\213\005" +
    "\211\006\215\035\212\001\002\000\004\043\205\001\002" +
    "\000\004\026\203\001\002\000\006\004\154\010\152\001" +
    "\002\000\004\026\147\001\002\000\012\023\uff9d\033\uff9d" +
    "\063\uff9d\065\uff9d\001\002\000\042\004\uffc9\011\uffc9\023" +
    "\uffc9\026\uffc9\030\uffc9\041\uffc9\042\uffc9\043\uffc9\044\uffc9" +
    "\045\uffc9\046\177\050\uffc9\052\uffc9\053\uffc9\056\uffc9\065" +
    "\uffc9\001\002\000\040\004\uffcc\011\uffcc\023\uffcc\026\uffcc" +
    "\030\uffcc\041\uffcc\042\uffcc\043\uffcc\044\uffcc\045\174\050" +
    "\uffcc\052\uffcc\053\uffcc\056\uffcc\065\uffcc\001\002\000\006" +
    "\004\154\010\152\001\002\000\030\004\134\023\uff9b\026" +
    "\122\030\124\041\121\042\135\043\145\044\143\052\142" +
    "\053\025\056\131\001\002\000\006\014\155\031\157\001" +
    "\002\000\014\004\uffd1\005\uffd1\006\uffd1\007\uffd1\035\uffd1" +
    "\001\002\000\014\004\163\005\160\006\164\007\162\035" +
    "\161\001\002\000\014\004\uffd0\005\uffd0\006\uffd0\007\uffd0" +
    "\035\uffd0\001\002\000\042\004\uffd5\011\uffd5\023\uffd5\026" +
    "\uffd5\030\uffd5\041\uffd5\042\uffd5\043\uffd5\044\uffd5\045\uffd5" +
    "\046\uffd5\050\uffd5\052\uffd5\053\uffd5\056\uffd5\065\uffd5\001" +
    "\002\000\042\004\uffd4\011\uffd4\023\uffd4\026\uffd4\030\uffd4" +
    "\041\uffd4\042\uffd4\043\uffd4\044\uffd4\045\uffd4\046\uffd4\050" +
    "\uffd4\052\uffd4\053\uffd4\056\uffd4\065\uffd4\001\002\000\004" +
    "\007\165\001\002\000\042\004\uffd6\011\uffd6\023\uffd6\026" +
    "\uffd6\030\uffd6\041\uffd6\042\uffd6\043\uffd6\044\uffd6\045\uffd6" +
    "\046\uffd6\050\uffd6\052\uffd6\053\uffd6\056\uffd6\065\uffd6\001" +
    "\002\000\042\004\uffd3\011\uffd3\023\uffd3\026\uffd3\030\uffd3" +
    "\041\uffd3\042\uffd3\043\uffd3\044\uffd3\045\uffd3\046\uffd3\050" +
    "\uffd3\052\uffd3\053\uffd3\056\uffd3\065\uffd3\001\002\000\042" +
    "\004\uffd2\011\uffd2\023\uffd2\026\uffd2\030\uffd2\041\uffd2\042" +
    "\uffd2\043\uffd2\044\uffd2\045\uffd2\046\uffd2\050\uffd2\052\uffd2" +
    "\053\uffd2\056\uffd2\065\uffd2\001\002\000\004\023\167\001" +
    "\002\000\004\043\170\001\002\000\004\026\uff97\001\002" +
    "\000\004\011\172\001\002\000\036\004\uffce\011\uffce\023" +
    "\uffce\026\uffce\030\uffce\041\uffce\042\uffce\043\uffce\044\uffce" +
    "\050\uffce\052\uffce\053\uffce\056\uffce\065\uffce\001\002\000" +
    "\036\004\uffcf\011\uffcf\023\uffcf\026\uffcf\030\uffcf\041\uffcf" +
    "\042\uffcf\043\uffcf\044\uffcf\050\uffcf\052\uffcf\053\uffcf\056" +
    "\uffcf\065\uffcf\001\002\000\004\004\154\001\002\000\040" +
    "\004\uffcc\011\uffcc\023\uffcc\026\uffcc\030\uffcc\041\uffcc\042" +
    "\uffcc\043\uffcc\044\uffcc\045\174\050\uffcc\052\uffcc\053\uffcc" +
    "\056\uffcc\065\uffcc\001\002\000\036\004\uffcd\011\uffcd\023" +
    "\uffcd\026\uffcd\030\uffcd\041\uffcd\042\uffcd\043\uffcd\044\uffcd" +
    "\050\uffcd\052\uffcd\053\uffcd\056\uffcd\065\uffcd\001\002\000" +
    "\004\004\154\001\002\000\040\004\uffcb\011\uffcb\023\uffcb" +
    "\026\uffcb\030\uffcb\041\uffcb\042\uffcb\043\uffcb\044\uffcb\045" +
    "\uffcb\050\uffcb\052\uffcb\053\uffcb\056\uffcb\065\uffcb\001\002" +
    "\000\042\004\uffc9\011\uffc9\023\uffc9\026\uffc9\030\uffc9\041" +
    "\uffc9\042\uffc9\043\uffc9\044\uffc9\045\uffc9\046\177\050\uffc9" +
    "\052\uffc9\053\uffc9\056\uffc9\065\uffc9\001\002\000\040\004" +
    "\uffca\011\uffca\023\uffca\026\uffca\030\uffca\041\uffca\042\uffca" +
    "\043\uffca\044\uffca\045\uffca\050\uffca\052\uffca\053\uffca\056" +
    "\uffca\065\uffca\001\002\000\036\004\134\023\uff9b\026\122" +
    "\030\124\033\uff9b\041\121\042\135\043\145\044\143\052" +
    "\142\053\025\056\131\063\uff9b\065\uff9b\001\002\000\012" +
    "\023\uffa4\033\uffa4\063\uffa4\065\uffa4\001\002\000\006\004" +
    "\154\010\152\001\002\000\030\004\134\026\122\030\124" +
    "\041\121\042\135\043\145\044\143\052\142\053\025\056" +
    "\131\065\uff9b\001\002\000\004\065\210\001\002\000\004" +
    "\026\uff96\001\002\000\004\026\uffe0\001\002\000\004\026" +
    "\uffde\001\002\000\006\010\216\026\uffdf\001\002\000\004" +
    "\026\uffdb\001\002\000\004\026\uffdd\001\002\000\020\004" +
    "\220\005\054\006\046\010\041\011\217\035\042\056\043" +
    "\001\002\000\006\026\uff99\057\uff99\001\002\000\014\011" +
    "\uffbf\024\uffbf\025\uffbf\054\035\061\uffbf\001\002\000\004" +
    "\011\224\001\002\000\004\011\223\001\002\000\004\026" +
    "\uffdc\001\002\000\006\026\uff9a\057\uff9a\001\002\000\006" +
    "\011\ufff2\061\226\001\002\000\004\004\230\001\002\000" +
    "\004\011\ufff3\001\002\000\004\054\035\001\002\000\036" +
    "\004\134\023\uff9b\026\122\030\124\033\uff9b\041\121\042" +
    "\135\043\145\044\143\052\142\053\025\056\131\063\uff9b" +
    "\065\uff9b\001\002\000\012\023\uffa2\033\uffa2\063\uffa2\065" +
    "\uffa2\001\002\000\036\004\134\023\uff9b\026\122\030\124" +
    "\033\uff9b\041\121\042\135\043\145\044\143\052\142\053" +
    "\025\056\131\063\uff9b\065\uff9b\001\002\000\012\023\uffa7" +
    "\033\uffa7\063\uffa7\065\uffa7\001\002\000\036\004\134\023" +
    "\uff9b\026\122\030\124\033\uff9b\041\121\042\135\043\145" +
    "\044\143\052\142\053\025\056\131\063\uff9b\065\uff9b\001" +
    "\002\000\012\023\uffa6\033\uffa6\063\uffa6\065\uffa6\001\002" +
    "\000\036\004\134\023\uff9b\026\122\030\124\033\uff9b\041" +
    "\121\042\135\043\145\044\143\052\142\053\025\056\131" +
    "\063\uff9b\065\uff9b\001\002\000\012\023\uff9f\033\uff9f\063" +
    "\uff9f\065\uff9f\001\002\000\004\050\242\001\002\000\032" +
    "\004\134\023\uff9b\026\122\030\124\033\uff9b\041\121\042" +
    "\135\043\145\044\143\052\142\053\025\056\131\001\002" +
    "\000\006\023\245\033\244\001\002\000\030\004\134\023" +
    "\uff9b\026\122\030\124\041\121\042\135\043\145\044\143" +
    "\052\142\053\025\056\131\001\002\000\004\042\246\001" +
    "\002\000\004\026\uffc8\001\002\000\004\023\250\001\002" +
    "\000\004\042\251\001\002\000\004\026\uffc7\001\002\000" +
    "\020\004\052\005\054\006\046\010\041\011\217\035\042" +
    "\056\043\001\002\000\004\004\260\001\002\000\016\004" +
    "\256\005\054\006\046\010\041\035\042\056\043\001\002" +
    "\000\006\026\uffb6\057\uffb6\001\002\000\014\010\252\024" +
    "\uffbf\025\uffbf\026\uffbf\057\uffbf\001\002\000\006\026\uffb8" +
    "\057\uffb8\001\002\000\006\010\261\031\262\001\002\000" +
    "\020\004\052\005\054\006\046\010\041\011\264\035\042" +
    "\056\043\001\002\000\016\004\052\005\054\006\046\010" +
    "\041\035\042\056\043\001\002\000\006\026\uffb7\057\uffb7" +
    "\001\002\000\004\026\uffb3\001\002\000\004\011\266\001" +
    "\002\000\004\026\uffb2\001\002\000\036\004\134\023\uff9b" +
    "\026\122\030\124\033\uff9b\041\121\042\135\043\145\044" +
    "\143\052\142\053\025\056\131\063\uff9b\065\uff9b\001\002" +
    "\000\012\023\uffa1\033\uffa1\063\uffa1\065\uffa1\001\002\000" +
    "\036\004\134\023\uff9b\026\122\030\124\033\uff9b\041\121" +
    "\042\135\043\145\044\143\052\142\053\025\056\131\063" +
    "\uff9b\065\uff9b\001\002\000\012\023\uffa8\033\uffa8\063\uffa8" +
    "\065\uffa8\001\002\000\006\060\274\064\077\001\002\000" +
    "\004\010\275\001\002\000\012\004\277\005\054\006\301" +
    "\010\041\001\002\000\010\011\uffad\047\303\061\302\001" +
    "\002\000\016\011\uffbf\016\307\024\uffbf\025\uffbf\047\uffbf" +
    "\061\uffbf\001\002\000\004\011\306\001\002\000\010\011" +
    "\uffae\047\303\061\302\001\002\000\012\004\uffaa\005\uffaa" +
    "\006\uffaa\010\uffaa\001\002\000\012\004\uffab\005\uffab\006" +
    "\uffab\010\uffab\001\002\000\012\004\277\005\054\006\301" +
    "\010\041\001\002\000\004\011\uffb1\001\002\000\004\026" +
    "\uffb5\001\002\000\004\004\310\001\002\000\010\011\uffac" +
    "\047\303\061\302\001\002\000\012\004\277\005\054\006" +
    "\301\010\041\001\002\000\004\011\uffaf\001\002\000\012" +
    "\004\277\005\054\006\301\010\041\001\002\000\004\011" +
    "\uffb0\001\002\000\036\004\134\023\uff9b\026\122\030\124" +
    "\033\uff9b\041\121\042\135\043\145\044\143\052\142\053" +
    "\025\056\131\063\uff9b\065\uff9b\001\002\000\012\023\uffa9" +
    "\033\uffa9\063\uffa9\065\uffa9\001\002\000\036\004\134\023" +
    "\uff9b\026\122\030\124\033\uff9b\041\121\042\135\043\145" +
    "\044\143\052\142\053\025\056\131\063\uff9b\065\uff9b\001" +
    "\002\000\012\023\uffa0\033\uffa0\063\uffa0\065\uffa0\001\002" +
    "\000\004\036\322\001\002\000\004\026\011\001\002\000" +
    "\004\023\325\001\002\000\006\002\000\026\000\001\002" +
    "\000\004\037\326\001\002\000\006\002\uff95\026\uff95\001" +
    "\002\000\036\004\134\023\uff9b\026\122\030\124\033\uff9b" +
    "\041\121\042\135\043\145\044\143\052\142\053\025\056" +
    "\131\063\uff9b\065\uff9b\001\002\000\012\023\uffa3\033\uffa3" +
    "\063\uffa3\065\uffa3\001\002\000\036\004\134\023\uff9b\026" +
    "\122\030\124\033\uff9b\041\121\042\135\043\145\044\143" +
    "\052\142\053\025\056\131\063\uff9b\065\uff9b\001\002\000" +
    "\012\023\uff9e\033\uff9e\063\uff9e\065\uff9e\001\002\000\036" +
    "\004\134\023\uff9b\026\122\030\124\033\uff9b\041\121\042" +
    "\135\043\145\044\143\052\142\053\025\056\131\063\uff9b" +
    "\065\uff9b\001\002\000\012\023\uffa5\033\uffa5\063\uffa5\065" +
    "\uffa5\001\002\000\012\023\uff9c\033\uff9c\063\uff9c\065\uff9c" +
    "\001\002\000\004\057\342\001\002\000\006\016\340\031" +
    "\254\001\002\000\004\004\341\001\002\000\004\031\262" +
    "\001\002\000\004\005\343\001\002\000\030\004\134\026" +
    "\122\030\124\041\121\042\135\043\145\044\143\052\142" +
    "\053\025\056\131\063\uff9b\001\002\000\004\063\345\001" +
    "\002\000\004\026\uff98\001\002\000\020\023\uffe5\026\024" +
    "\034\uffe5\036\016\051\017\053\025\055\023\001\002\000" +
    "\006\023\uffea\034\uffea\001\002\000\020\023\uffe5\026\024" +
    "\034\uffe5\036\016\051\017\053\025\055\023\001\002\000" +
    "\006\023\uffe9\034\uffe9\001\002\000\004\010\353\001\002" +
    "\000\006\004\230\011\355\001\002\000\004\011\365\001" +
    "\002\000\032\004\134\023\uff9b\026\122\030\124\041\121" +
    "\042\135\043\145\044\143\052\142\053\025\054\035\056" +
    "\131\001\002\000\004\023\363\001\002\000\030\004\134" +
    "\023\uff9b\026\122\030\124\041\121\042\135\043\145\044" +
    "\143\052\142\053\025\056\131\001\002\000\004\023\361" +
    "\001\002\000\004\051\362\001\002\000\004\026\uffd8\001" +
    "\002\000\004\051\364\001\002\000\004\026\uffd7\001\002" +
    "\000\032\004\134\023\uff9b\026\122\030\124\041\121\042" +
    "\135\043\145\044\143\052\142\053\025\054\035\056\131" +
    "\001\002\000\004\023\373\001\002\000\030\004\134\023" +
    "\uff9b\026\122\030\124\041\121\042\135\043\145\044\143" +
    "\052\142\053\025\056\131\001\002\000\004\023\371\001" +
    "\002\000\004\051\372\001\002\000\004\026\uffda\001\002" +
    "\000\004\051\374\001\002\000\004\026\uffd9\001\002\000" +
    "\004\010\u0109\001\002\000\004\010\377\001\002\000\006" +
    "\004\230\011\u0101\001\002\000\004\011\u0105\001\002\000" +
    "\030\004\134\023\uff9b\026\122\030\124\041\121\042\135" +
    "\043\145\044\143\052\142\053\025\056\131\001\002\000" +
    "\004\023\u0103\001\002\000\004\036\u0104\001\002\000\004" +
    "\026\uffe3\001\002\000\030\004\134\023\uff9b\026\122\030" +
    "\124\041\121\042\135\043\145\044\143\052\142\053\025" +
    "\056\131\001\002\000\004\023\u0107\001\002\000\004\036" +
    "\u0108\001\002\000\004\026\uffe4\001\002\000\006\004\230" +
    "\011\u010b\001\002\000\004\011\u010f\001\002\000\030\004" +
    "\134\023\uff9b\026\122\030\124\041\121\042\135\043\145" +
    "\044\143\052\142\053\025\056\131\001\002\000\004\023" +
    "\u010d\001\002\000\004\036\u010e\001\002\000\004\026\uffe2" +
    "\001\002\000\030\004\134\023\uff9b\026\122\030\124\041" +
    "\121\042\135\043\145\044\143\052\142\053\025\056\131" +
    "\001\002\000\004\023\u0111\001\002\000\004\036\u0112\001" +
    "\002\000\004\026\uffe1\001\002\000\020\023\uffe5\026\024" +
    "\034\uffe5\036\016\051\017\053\025\055\023\001\002\000" +
    "\006\023\uffe7\034\uffe7\001\002\000\004\002\uff92\001\002" +
    "" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0113\000\006\002\005\037\006\001\001\000\006\002" +
    "\005\037\u0114\001\001\000\002\001\001\000\004\040\011" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\040" +
    "\012\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\004\020\006\014\010\025\025\017\054\021\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\004\020\006\014\010\025\025\017\054\110" +
    "\001\001\000\004\014\030\001\001\000\002\001\001\000" +
    "\014\004\020\006\014\010\025\025\017\054\027\001\001" +
    "\000\002\001\001\000\004\024\035\001\001\000\002\001" +
    "\001\000\004\014\033\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\035\036\001\001\000\002\001\001\000" +
    "\014\016\046\034\052\051\044\053\043\061\047\001\001" +
    "\000\010\016\046\051\044\053\101\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\050\071" +
    "\001\001\000\002\001\001\000\004\052\065\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\016\046\033\060\034\057\051\044\053\043" +
    "\061\047\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\016\046\033\063\034\057\051\044" +
    "\053\043\061\047\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\016\067\001\001\000\004" +
    "\052\070\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\016\046\051\073\001\001\000\004\050\074\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\004\020\006\014\010\025\025\017\054\112\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\034\004\127\005" +
    "\143\007\132\011\124\012\140\015\137\020\125\026\136" +
    "\031\122\036\135\045\145\057\131\061\126\001\001\000" +
    "\004\015\335\001\001\000\034\004\127\005\143\007\132" +
    "\011\124\012\140\015\137\020\334\026\136\031\122\036" +
    "\135\045\145\057\131\061\126\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\027" +
    "\150\030\240\041\147\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\045" +
    "\213\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\027\150\030\152\041\147\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\042\177\001\001\000\004\043\172" +
    "\001\001\000\010\027\150\030\170\041\147\001\001\000" +
    "\034\004\127\005\143\007\132\011\124\012\140\015\137" +
    "\020\165\026\136\031\122\036\135\045\145\057\131\061" +
    "\126\001\001\000\004\044\155\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\027\174\041\147\001\001\000" +
    "\004\043\175\001\001\000\002\001\001\000\004\041\200" +
    "\001\001\000\002\001\001\000\004\042\201\001\001\000" +
    "\002\001\001\000\034\004\127\005\143\007\132\011\124" +
    "\012\140\015\137\020\203\026\136\031\122\036\135\045" +
    "\145\057\131\061\126\001\001\000\002\001\001\000\010" +
    "\027\150\030\205\041\147\001\001\000\034\004\127\005" +
    "\143\007\132\011\124\012\140\015\137\020\206\026\136" +
    "\031\122\036\135\045\145\057\131\061\126\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\020\016\046\023\221\033\220\034\057\051\044" +
    "\053\043\061\047\001\001\000\002\001\001\000\004\024" +
    "\224\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\023" +
    "\226\001\001\000\002\001\001\000\004\024\224\001\001" +
    "\000\034\004\127\005\143\007\132\011\124\012\140\015" +
    "\137\020\231\026\136\031\122\036\135\045\145\057\131" +
    "\061\126\001\001\000\002\001\001\000\034\004\127\005" +
    "\143\007\132\011\124\012\140\015\137\020\233\026\136" +
    "\031\122\036\135\045\145\057\131\061\126\001\001\000" +
    "\002\001\001\000\034\004\127\005\143\007\132\011\124" +
    "\012\140\015\137\020\235\026\136\031\122\036\135\045" +
    "\145\057\131\061\126\001\001\000\002\001\001\000\034" +
    "\004\127\005\143\007\132\011\124\012\140\015\137\020" +
    "\237\026\136\031\122\036\135\045\145\057\131\061\126" +
    "\001\001\000\002\001\001\000\002\001\001\000\034\004" +
    "\127\005\143\007\132\011\124\012\140\015\137\020\242" +
    "\026\136\031\122\036\135\045\145\057\131\061\126\001" +
    "\001\000\002\001\001\000\034\004\127\005\143\007\132" +
    "\011\124\012\140\015\137\020\246\026\136\031\122\036" +
    "\135\045\145\057\131\061\126\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\016\046\033\220\034\057\051\044" +
    "\053\043\061\047\001\001\000\002\001\001\000\016\016" +
    "\046\034\256\045\254\051\044\053\043\061\047\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\016\046\033\264\034\057\051\044" +
    "\053\043\061\047\001\001\000\014\016\046\034\262\051" +
    "\044\053\043\061\047\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\034\004" +
    "\127\005\143\007\132\011\124\012\140\015\137\020\267" +
    "\026\136\031\122\036\135\045\145\057\131\061\126\001" +
    "\001\000\002\001\001\000\034\004\127\005\143\007\132" +
    "\011\124\012\140\015\137\020\271\026\136\031\122\036" +
    "\135\045\145\057\131\061\126\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\016\046\051" +
    "\044\053\275\060\277\001\001\000\004\055\312\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\055\303\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\016\046" +
    "\051\044\053\275\060\304\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\055\310\001\001" +
    "\000\012\016\046\051\044\053\275\060\311\001\001\000" +
    "\002\001\001\000\012\016\046\051\044\053\275\060\313" +
    "\001\001\000\002\001\001\000\034\004\127\005\143\007" +
    "\132\011\124\012\140\015\137\020\315\026\136\031\122" +
    "\036\135\045\145\057\131\061\126\001\001\000\002\001" +
    "\001\000\034\004\127\005\143\007\132\011\124\012\140" +
    "\015\137\020\317\026\136\031\122\036\135\045\145\057" +
    "\131\061\126\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\040\322\001\001\000\004\017\323\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\034" +
    "\004\127\005\143\007\132\011\124\012\140\015\137\020" +
    "\327\026\136\031\122\036\135\045\145\057\131\061\126" +
    "\001\001\000\002\001\001\000\034\004\127\005\143\007" +
    "\132\011\124\012\140\015\137\020\331\026\136\031\122" +
    "\036\135\045\145\057\131\061\126\001\001\000\002\001" +
    "\001\000\034\004\127\005\143\007\132\011\124\012\140" +
    "\015\137\020\333\026\136\031\122\036\135\045\145\057" +
    "\131\061\126\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\034\004\127\005\143" +
    "\007\132\011\124\012\140\015\137\020\343\026\136\031" +
    "\122\036\135\045\145\057\131\061\126\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\004\020\006\014\010" +
    "\025\025\017\054\346\001\001\000\002\001\001\000\014" +
    "\004\020\006\014\010\025\025\017\054\350\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\023\353\001\001" +
    "\000\002\001\001\000\036\004\127\005\143\007\132\011" +
    "\124\012\140\015\137\020\355\024\356\026\136\031\122" +
    "\036\135\045\145\057\131\061\126\001\001\000\002\001" +
    "\001\000\034\004\127\005\143\007\132\011\124\012\140" +
    "\015\137\020\357\026\136\031\122\036\135\045\145\057" +
    "\131\061\126\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\036\004\127\005\143\007\132\011\124\012\140\015\137" +
    "\020\365\024\366\026\136\031\122\036\135\045\145\057" +
    "\131\061\126\001\001\000\002\001\001\000\034\004\127" +
    "\005\143\007\132\011\124\012\140\015\137\020\367\026" +
    "\136\031\122\036\135\045\145\057\131\061\126\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\023\377\001\001\000\002\001\001\000" +
    "\034\004\127\005\143\007\132\011\124\012\140\015\137" +
    "\020\u0101\026\136\031\122\036\135\045\145\057\131\061" +
    "\126\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\034\004\127\005\143\007\132\011\124\012" +
    "\140\015\137\020\u0105\026\136\031\122\036\135\045\145" +
    "\057\131\061\126\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\023\u0109\001\001\000\002" +
    "\001\001\000\034\004\127\005\143\007\132\011\124\012" +
    "\140\015\137\020\u010b\026\136\031\122\036\135\045\145" +
    "\057\131\061\126\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\034\004\127\005\143\007\132" +
    "\011\124\012\140\015\137\020\u010f\026\136\031\122\036" +
    "\135\045\145\057\131\061\126\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\004\020\006" +
    "\014\010\025\025\017\054\u0113\001\001\000\002\001\001" +
    "\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$CupArbol$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$CupArbol$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$CupArbol$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



	public String resultado="";
	public Nodo padre;
	public int contador = 1;


 public void syntax_error(Symbol s){
        Ventana.notificar_er("Error de sintaxis: "+ s.value +" Linea " +(s.right)+" columna " +(s.left) );
    }

   public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
      Ventana.notificar_er("Una Sentencia, Ciclo o Funcion no ha sido cerrada correctamente ");
    }

/*
  
    public void syntax_error(Symbol s){
        System.out.println("Error Sintactico en la Linea " + (s.right+1) +" Columna "+s.left+ ". Identificador " +s.value + " no reconocido." );
    }

 
    public void unrecovered_syntax_error(Symbol s){
        //System.out.println("Error Sintactico en la Linea " + (s.right+1)+ "Columna "+s.left+". Identificador " + s.value + " no reconocido.");
		System.out.println(s);
	}
*/


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$CupArbol$actions {




  private final CupArbol parser;

  /** Constructor */
  CUP$CupArbol$actions(CupArbol parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$CupArbol$do_action_part00000000(
    int                        CUP$CupArbol$act_num,
    java_cup.runtime.lr_parser CUP$CupArbol$parser,
    java.util.Stack            CUP$CupArbol$stack,
    int                        CUP$CupArbol$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$CupArbol$result;

      /* select the action based on the action number */
      switch (CUP$CupArbol$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= PROGRAMA EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-1)).value;
		RESULT = start_val;
              CUP$CupArbol$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-1)), ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$CupArbol$parser.done_parsing();
          return CUP$CupArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= SentenciaModulo Identificador CUERPO_ESTRUCTURA Main parentesisE parentesisC CUERPO End Sub DESPUES FINAL 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-10)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-10)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-10)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-9)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-9)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-9)).value;
		int nCleft = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-8)).left;
		int nCright = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-8)).right;
		Object nC = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-8)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-7)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-7)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-7)).value;
		int Cuerpoleft = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-4)).left;
		int Cuerporight = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-4)).right;
		Object Cuerpo = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-4)).value;
		int n6left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-3)).left;
		int n6right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-3)).right;
		Object n6 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-3)).value;
		int n7left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)).left;
		int n7right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)).right;
		Object n7 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)).value;
		int n8left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()).left;
		int n8right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()).right;
		Object n8 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.peek()).value;
		
        
        Nodo nd = new Nodo("INICIO");
        
        nd.setNumNodo(parser.contador++);
        parser.contador++;
        nd.addHijo(new Nodo(n.toString()));
        nd.addHijo(new Nodo(n1.toString()));
        
        if (nC != null)
        nd.addHijo((Nodo)nC);

        nd.addHijo(new Nodo(n2.toString()));
        // E nd.addHijo(new Nodo(n3.toString() + " " + n4.toString()));

        if (Cuerpo != null)
        nd.addHijo((Nodo)Cuerpo);
        //nd.addHijo(new Nodo(n4.toString()));
       // nd.addHijo(new Nodo(n6.toString()));
        //nd.addHijo((Nodo)n5);
        nd.addHijo(new Nodo(n6.toString() + " " + n7.toString()));
        //nd.addHijo((Nodo)nC2); 
        nd.addHijo((Nodo)n8);
     
/*
        */

        parser.padre = (Nodo)nd;

        RESULT = nd;


              CUP$CupArbol$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-10)), ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()), RESULT);
            }
          return CUP$CupArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // VARIABLES ::= Identificador coma VARIABLES 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.peek()).value;
		
            Nodo nd = new Nodo("VARIABLES");
            nd.setNumNodo(parser.contador++);
            parser.contador++;
             nd.addHijo(new Nodo(n1.toString()));
             // E nd.addHijo(new Nodo(n2.toString()));
             nd.addHijo((Nodo)n3);
             
             RESULT = nd;


             
              CUP$CupArbol$result = parser.getSymbolFactory().newSymbol("VARIABLES",10, ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)), ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()), RESULT);
            }
          return CUP$CupArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // VARIABLES ::= Identificador 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.peek()).value;
		
             Nodo nd = new Nodo(n1.toString());
            nd.setNumNodo(parser.contador++);
            parser.contador++;
            
             RESULT = nd;
 



              CUP$CupArbol$result = parser.getSymbolFactory().newSymbol("VARIABLES",10, ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()), ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()), RESULT);
            }
          return CUP$CupArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // TIPODATO ::= AS Integer 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-1)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.peek()).value;
		
            Nodo nd = new Nodo(n2.toString());
            nd.setNumNodo(parser.contador++);
            parser.contador++;
            // nd.addHijo(new Nodo(n1.toString()));
             //nd.addHijo(new Nodo(n2.toString()));
             RESULT = nd; 
              CUP$CupArbol$result = parser.getSymbolFactory().newSymbol("TIPODATO",18, ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-1)), ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()), RESULT);
            }
          return CUP$CupArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // TIPODATO ::= AS Boolean 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-1)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.peek()).value;
		
            Nodo nd = new Nodo(n2.toString());
            nd.setNumNodo(parser.contador++);
            parser.contador++;
             // E nd.addHijo(new Nodo(n1.toString()));
             //nd.addHijo(new Nodo(n2.toString()));
             RESULT = nd; 
              CUP$CupArbol$result = parser.getSymbolFactory().newSymbol("TIPODATO",18, ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-1)), ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()), RESULT);
            }
          return CUP$CupArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // TIPODATO ::= AS Double 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-1)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.peek()).value;
		
            Nodo nd = new Nodo(n2.toString());
            nd.setNumNodo(parser.contador++);
            parser.contador++;
             // E nd.addHijo(new Nodo(n1.toString()));
             //nd.addHijo(new Nodo(n2.toString()));
             RESULT = nd; 
              CUP$CupArbol$result = parser.getSymbolFactory().newSymbol("TIPODATO",18, ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-1)), ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()), RESULT);
            }
          return CUP$CupArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // TIPODATO ::= AS String 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-1)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.peek()).value;
		
            Nodo nd = new Nodo(n2.toString());
            nd.setNumNodo(parser.contador++);
            parser.contador++;
             //E nd.addHijo(new Nodo(n1.toString()));
             //nd.addHijo(new Nodo(n2.toString()));
             RESULT = nd; 
              CUP$CupArbol$result = parser.getSymbolFactory().newSymbol("TIPODATO",18, ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-1)), ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()), RESULT);
            }
          return CUP$CupArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // TIPODATO ::= AS Identificador 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-1)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.peek()).value;
		
            Nodo nd = new Nodo(n2.toString());
            nd.setNumNodo(parser.contador++);
            parser.contador++;
             // E nd.addHijo(new Nodo(n1.toString()));
             //nd.addHijo(new Nodo(n2.toString()));
             RESULT = nd; 

              CUP$CupArbol$result = parser.getSymbolFactory().newSymbol("TIPODATO",18, ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-1)), ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()), RESULT);
            }
          return CUP$CupArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // DECLARACION ::= Dim VARIABLES TIPODATO IGUALDAD 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-3)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-3)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-3)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-1)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-1)).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-1)).value;
		int n4left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()).left;
		int n4right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()).right;
		Object n4 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.peek()).value;
		
        Nodo nd = new Nodo("DECLARACION_VAR");
       // E nd.addHijo(new Nodo(n1.toString()));
        nd.setNumNodo(parser.contador++);
        parser.contador++; 
        nd.addHijo((Nodo)n2);
        nd.addHijo((Nodo)n3);


        if (n4 != null)
        nd.addHijo((Nodo)n4);
        RESULT = nd;

              CUP$CupArbol$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-3)), ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()), RESULT);
            }
          return CUP$CupArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // IGUALDAD ::= Igual New Identificador parentesisE PARAMETROS2 parentesisC 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-5)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-5)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-5)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-4)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-4)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-4)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-3)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-3)).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-3)).value;
		int n4left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)).left;
		int n4right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)).right;
		Object n4 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)).value;
		int n5left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-1)).left;
		int n5right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-1)).right;
		Object n5 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-1)).value;
		int n6left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()).left;
		int n6right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()).right;
		Object n6 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.peek()).value;
		
            Nodo nd = new Nodo("IGUALDAD");
            nd.setNumNodo(parser.contador++);
            parser.contador++;
             nd.addHijo(new Nodo(n1.toString() + " " + n2.toString() + " " + n3.toString() ));
            // nd.addHijo(new Nodo(n2.toString()));
            // nd.addHijo(new Nodo(n3.toString()));
            // E nd.addHijo(new Nodo(n4.toString()));
             nd.addHijo((Nodo)n5);
            // E nd.addHijo(new Nodo(n6.toString()));
             
             RESULT = nd;
             
              CUP$CupArbol$result = parser.getSymbolFactory().newSymbol("IGUALDAD",27, ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-5)), ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()), RESULT);
            }
          return CUP$CupArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // IGUALDAD ::= Igual DATO 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-1)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.peek()).value;
		
            Nodo nd = new Nodo("IGUALDAD");
            nd.setNumNodo(parser.contador++);
            parser.contador++;
             nd.addHijo(new Nodo(n1.toString()));
             nd.addHijo((Nodo)n2);
             
             RESULT = nd;
             
              CUP$CupArbol$result = parser.getSymbolFactory().newSymbol("IGUALDAD",27, ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-1)), ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()), RESULT);
            }
          return CUP$CupArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // IGUALDAD ::= Igual New parentesisE parentesisC 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-3)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-3)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-3)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-1)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-1)).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-1)).value;
		int n4left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()).left;
		int n4right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()).right;
		Object n4 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.peek()).value;
		
            Nodo nd = new Nodo(n1.toString() + " " + n2.toString() + " " + n3.toString() + " " + n4.toString());
            nd.setNumNodo(parser.contador++);
            parser.contador++;
             //nd.addHijo(new Nodo(n1.toString()));
             //nd.addHijo(new Nodo(n2.toString()));
             //nd.addHijo(new Nodo(n3.toString()));
             //nd.addHijo(new Nodo(n4.toString()));
             
             RESULT = nd;
             
              CUP$CupArbol$result = parser.getSymbolFactory().newSymbol("IGUALDAD",27, ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-3)), ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()), RESULT);
            }
          return CUP$CupArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // IGUALDAD ::= 
            {
              Object RESULT =null;

              CUP$CupArbol$result = parser.getSymbolFactory().newSymbol("IGUALDAD",27, ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()), RESULT);
            }
          return CUP$CupArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // PARAMETROS ::= Identificador TIPODATO coma PARAMETROS 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-3)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-3)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-3)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-1)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-1)).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-1)).value;
		int n4left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()).left;
		int n4right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()).right;
		Object n4 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.peek()).value;
		
            Nodo nd = new Nodo("PARAMETROS");
            nd.setNumNodo(parser.contador++);
            parser.contador++;
             nd.addHijo(new Nodo(n1.toString()));
             nd.addHijo((Nodo)n2);
             //nd.addHijo(new Nodo(n3.toString()));
             nd.addHijo((Nodo)n4);
             
             RESULT = nd;
             
              CUP$CupArbol$result = parser.getSymbolFactory().newSymbol("PARAMETROS",17, ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-3)), ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()), RESULT);
            }
          return CUP$CupArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // PARAMETROS ::= Identificador TIPODATO 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-1)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.peek()).value;
		
            Nodo nd = new Nodo("PARAMETROS");
            nd.setNumNodo(parser.contador++);
            parser.contador++;
             nd.addHijo(new Nodo(n1.toString()));
             nd.addHijo((Nodo)n2);
             
             RESULT = nd;
             
              CUP$CupArbol$result = parser.getSymbolFactory().newSymbol("PARAMETROS",17, ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-1)), ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()), RESULT);
            }
          return CUP$CupArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // DATO ::= ARITMETICOS 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.peek()).value;
		
            Nodo nd = (Nodo)n1;
            nd.setNumNodo(parser.contador++);
            parser.contador++;
             //nd.addHijo((Nodo)n1);

             RESULT = nd;
             
              CUP$CupArbol$result = parser.getSymbolFactory().newSymbol("DATO",26, ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()), ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()), RESULT);
            }
          return CUP$CupArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // DATO ::= Op_Booleano 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.peek()).value;
		
            Nodo nd = new Nodo(n1.toString());
            nd.setNumNodo(parser.contador++);
            parser.contador++;
             //nd.addHijo(new Nodo(n1.toString()));

             RESULT = nd;
             
              CUP$CupArbol$result = parser.getSymbolFactory().newSymbol("DATO",26, ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()), ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()), RESULT);
            }
          return CUP$CupArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // DATO ::= Cadena 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.peek()).value;
		
            Nodo nd = new Nodo (n1.toString());
            //Nodo nhijo = new Nodo("Cadena");
            //nhijo.setValor(n1.toString());
            nd.setNumNodo(parser.contador++);
            parser.contador++;
             //nd.addHijo(new Nodo (nhijo.getValor()));
             
                //System.out.println();
             RESULT = nd;
             
              CUP$CupArbol$result = parser.getSymbolFactory().newSymbol("DATO",26, ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()), ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()), RESULT);
            }
          return CUP$CupArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // DATO ::= LEER 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.peek()).value;
		
            Nodo nd = (Nodo)n1;
            nd.setNumNodo(parser.contador++);
            parser.contador++;
             //nd.addHijo((Nodo)n1);

             RESULT = nd;
             
              CUP$CupArbol$result = parser.getSymbolFactory().newSymbol("DATO",26, ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()), ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()), RESULT);
            }
          return CUP$CupArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // PARAMETROS2 ::= DATO coma PARAMETROS2 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-1)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-1)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.peek()).value;
		
            Nodo nd = new Nodo("PARAMETROS");
            nd.setNumNodo(parser.contador++);
            parser.contador++;
            nd.addHijo((Nodo)n1);
             //nd.addHijo(new Nodo(n2.toString()));
             nd.addHijo((Nodo)n3);
             
             RESULT = nd;
             
              CUP$CupArbol$result = parser.getSymbolFactory().newSymbol("PARAMETROS2",25, ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)), ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()), RESULT);
            }
          return CUP$CupArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // PARAMETROS2 ::= DATO 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.peek()).value;
		
            Nodo nd = new Nodo("PARAMETROS");
            nd.setNumNodo(parser.contador++);
            parser.contador++;
            nd.addHijo((Nodo)n1);
             
             RESULT = nd;
             
              CUP$CupArbol$result = parser.getSymbolFactory().newSymbol("PARAMETROS2",25, ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()), ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()), RESULT);
            }
          return CUP$CupArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // ESTRUCTURA ::= struct Identificador CUERPO_ESTRUCTURA End struct 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-4)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-4)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-4)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-3)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-3)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-3)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)).value;
		int n4left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-1)).left;
		int n4right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-1)).right;
		Object n4 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-1)).value;
		int n5left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()).left;
		int n5right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()).right;
		Object n5 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.peek()).value;
		
            Nodo nd = new Nodo("ESTRUCTURA");
            nd.setNumNodo(parser.contador++);
            parser.contador++;
             nd.addHijo(new Nodo(n1.toString()));
             nd.addHijo(new Nodo(n2.toString()));
             
             if (n3 != null)
             nd.addHijo((Nodo)n3);

             nd.addHijo(new Nodo(n4.toString()+" "+n5.toString()));
             
             RESULT = nd;
             
              CUP$CupArbol$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA",19, ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-4)), ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()), RESULT);
            }
          return CUP$CupArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // CUERPO_ESTRUCTURA ::= DECLARACION Enter CUERPO_ESTRUCTURA 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.peek()).value;
		
        Nodo nd = new Nodo("CUERPO_FUNCIONES");
        nd.setNumNodo(parser.contador++);
        parser.contador++;
        nd.addHijo((Nodo)n1);

        if (n2 != null)
        nd.addHijo((Nodo)n2);
        RESULT = nd;  
              CUP$CupArbol$result = parser.getSymbolFactory().newSymbol("CUERPO_ESTRUCTURA",42, ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)), ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()), RESULT);
            }
          return CUP$CupArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // CUERPO_ESTRUCTURA ::= ESTRUCTURA Enter CUERPO_ESTRUCTURA 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.peek()).value;
		
            Nodo nd = new Nodo("CUERPO_FUNCIONES");
            nd.setNumNodo(parser.contador++);
            parser.contador++;
            nd.addHijo((Nodo)n1);

            if (n2 != null)
            nd.addHijo((Nodo)n2);
            RESULT = nd;  
              CUP$CupArbol$result = parser.getSymbolFactory().newSymbol("CUERPO_ESTRUCTURA",42, ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)), ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()), RESULT);
            }
          return CUP$CupArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // CUERPO_ESTRUCTURA ::= FUNCION Enter CUERPO_ESTRUCTURA 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.peek()).value;
		
            Nodo nd = new Nodo("CUERPO_FUNCIONES");
            nd.setNumNodo(parser.contador++);
            parser.contador++;
            nd.addHijo((Nodo)n1);

            if (n2 != null)
            nd.addHijo((Nodo)n2);
            RESULT = nd;  
              CUP$CupArbol$result = parser.getSymbolFactory().newSymbol("CUERPO_ESTRUCTURA",42, ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)), ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()), RESULT);
            }
          return CUP$CupArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // CUERPO_ESTRUCTURA ::= PARA_SUB Enter CUERPO_ESTRUCTURA 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.peek()).value;
		
            Nodo nd = new Nodo("CUERPO_FUNCIONES");
            nd.setNumNodo(parser.contador++);
            parser.contador++;
            nd.addHijo((Nodo)n1);

            if (n2 != null)
            nd.addHijo((Nodo)n2);
            RESULT = nd;  
              CUP$CupArbol$result = parser.getSymbolFactory().newSymbol("CUERPO_ESTRUCTURA",42, ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)), ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()), RESULT);
            }
          return CUP$CupArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // CUERPO_ESTRUCTURA ::= Enter CUERPO_ESTRUCTURA 
            {
              Object RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-1)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.peek()).value;
		
              
            if (n2 != null)
            RESULT = n2;


        
              CUP$CupArbol$result = parser.getSymbolFactory().newSymbol("CUERPO_ESTRUCTURA",42, ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-1)), ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()), RESULT);
            }
          return CUP$CupArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // CUERPO_ESTRUCTURA ::= 
            {
              Object RESULT =null;

              CUP$CupArbol$result = parser.getSymbolFactory().newSymbol("CUERPO_ESTRUCTURA",42, ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()), RESULT);
            }
          return CUP$CupArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // PARA_SUB ::= Sub Identificador parentesisE PARAMETROS parentesisC CUERPO End Sub 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-7)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-7)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-7)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-6)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-6)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-6)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-5)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-5)).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-5)).value;
		int n4left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-4)).left;
		int n4right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-4)).right;
		Object n4 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-4)).value;
		int n5left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-3)).left;
		int n5right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-3)).right;
		Object n5 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-3)).value;
		int n6left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)).left;
		int n6right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)).right;
		Object n6 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)).value;
		int n7left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-1)).left;
		int n7right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-1)).right;
		Object n7 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-1)).value;
		int n8left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()).left;
		int n8right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()).right;
		Object n8 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.peek()).value;
		
            Nodo nd = new Nodo("CUERPO_SUB");
            nd.setNumNodo(parser.contador++);
            parser.contador++;
             nd.addHijo(new Nodo(n1.toString()));
             nd.addHijo(new Nodo(n2.toString()));
             //nd.addHijo(new Nodo(n3.toString()));
             nd.addHijo((Nodo)n4);
             //nd.addHijo(new Nodo(n5.toString()));

             if (n6 != null)
             nd.addHijo((Nodo)n6);
             nd.addHijo(new Nodo(n7.toString()+" "+n8.toString()));
             
             RESULT = nd;
             
              CUP$CupArbol$result = parser.getSymbolFactory().newSymbol("PARA_SUB",4, ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-7)), ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()), RESULT);
            }
          return CUP$CupArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // PARA_SUB ::= Sub Identificador parentesisE parentesisC CUERPO End Sub 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-6)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-6)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-6)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-5)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-5)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-5)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-4)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-4)).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-4)).value;
		int n4left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-3)).left;
		int n4right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-3)).right;
		Object n4 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-3)).value;
		int n5left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)).left;
		int n5right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)).right;
		Object n5 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)).value;
		int n6left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-1)).left;
		int n6right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-1)).right;
		Object n6 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-1)).value;
		int n7left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()).left;
		int n7right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()).right;
		Object n7 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.peek()).value;
		
            Nodo nd = new Nodo("CUERPO_SUB");
            nd.setNumNodo(parser.contador++);
            parser.contador++;
             nd.addHijo(new Nodo(n1.toString()));
             nd.addHijo(new Nodo(n2.toString() + "" + n3.toString()+""+n4.toString()));
            // nd.addHijo(new Nodo());
             
             if (n5 != null)
             nd.addHijo((Nodo)n5);
             nd.addHijo(new Nodo(n6.toString()+" "+n7.toString()));
             
             RESULT = nd;
             
              CUP$CupArbol$result = parser.getSymbolFactory().newSymbol("PARA_SUB",4, ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-6)), ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()), RESULT);
            }
          return CUP$CupArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // PARA_SUB ::= Sub New parentesisE parentesisC CUERPO End Sub 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-6)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-6)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-6)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-5)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-5)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-5)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-4)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-4)).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-4)).value;
		int n4left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-3)).left;
		int n4right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-3)).right;
		Object n4 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-3)).value;
		int n5left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)).left;
		int n5right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)).right;
		Object n5 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)).value;
		int n6left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-1)).left;
		int n6right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-1)).right;
		Object n6 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-1)).value;
		int n7left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()).left;
		int n7right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()).right;
		Object n7 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.peek()).value;
		
            Nodo nd = new Nodo("CUERPO_SUB");
            nd.setNumNodo(parser.contador++);
            parser.contador++;
             nd.addHijo(new Nodo(n1.toString()));
             nd.addHijo(new Nodo(n2.toString()));
            // nd.addHijo(new Nodo(n3.toString()+" "+n4.toString()));

             if (n5 != null)
             nd.addHijo((Nodo)n5);
             nd.addHijo(new Nodo(n6.toString()+" "+n7.toString()));
             
             RESULT = nd;
             
              CUP$CupArbol$result = parser.getSymbolFactory().newSymbol("PARA_SUB",4, ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-6)), ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()), RESULT);
            }
          return CUP$CupArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // PARA_SUB ::= Sub New parentesisE PARAMETROS parentesisC CUERPO End Sub 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-7)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-7)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-7)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-6)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-6)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-6)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-5)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-5)).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-5)).value;
		int n4left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-4)).left;
		int n4right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-4)).right;
		Object n4 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-4)).value;
		int n5left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-3)).left;
		int n5right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-3)).right;
		Object n5 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-3)).value;
		int n6left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)).left;
		int n6right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)).right;
		Object n6 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)).value;
		int n7left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-1)).left;
		int n7right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-1)).right;
		Object n7 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-1)).value;
		int n8left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()).left;
		int n8right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()).right;
		Object n8 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.peek()).value;
		
            Nodo nd = new Nodo("CUERPO_SUB");
            nd.setNumNodo(parser.contador++);
            parser.contador++;
             nd.addHijo(new Nodo(n1.toString()));
             nd.addHijo(new Nodo(n2.toString()));
             //nd.addHijo(new Nodo(n3.toString()));
             nd.addHijo((Nodo)n4);
             //nd.addHijo(new Nodo(n5.toString()));
             
             if (n6 != null)
             nd.addHijo((Nodo)n6);
             nd.addHijo(new Nodo(n7.toString()+" "+n8.toString()));
             
             RESULT = nd;
             
              CUP$CupArbol$result = parser.getSymbolFactory().newSymbol("PARA_SUB",4, ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-7)), ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()), RESULT);
            }
          return CUP$CupArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // RETORNO ::= Return Numero 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-1)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.peek()).value;
		
            Nodo nd = new Nodo("RETORNO");
            nd.setNumNodo(parser.contador++);
            parser.contador++;
            // nd.addHijo(new Nodo(n1.toString()));
             nd.addHijo(new Nodo(n2.toString()));
             
             RESULT = nd;
             
              CUP$CupArbol$result = parser.getSymbolFactory().newSymbol("RETORNO",5, ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-1)), ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()), RESULT);
            }
          return CUP$CupArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // RETORNO ::= Return Identificador 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-1)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.peek()).value;
		
            Nodo nd = new Nodo("RETORNO");
            nd.setNumNodo(parser.contador++);
            parser.contador++;
             //nd.addHijo(new Nodo(n1.toString()));
             nd.addHijo(new Nodo(n2.toString()));
             
             RESULT = nd;
             
              CUP$CupArbol$result = parser.getSymbolFactory().newSymbol("RETORNO",5, ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-1)), ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()), RESULT);
            }
          return CUP$CupArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // RETORNO ::= Return Op_Booleano 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-1)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.peek()).value;
		
            Nodo nd = new Nodo("RETORNO");
            nd.setNumNodo(parser.contador++);
            parser.contador++;
             //nd.addHijo(new Nodo(n1.toString()));
             nd.addHijo(new Nodo(n2.toString()));
             
             RESULT = nd;
             
              CUP$CupArbol$result = parser.getSymbolFactory().newSymbol("RETORNO",5, ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-1)), ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()), RESULT);
            }
          return CUP$CupArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // RETORNO ::= Return Cadena 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-1)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.peek()).value;
		
            Nodo nd = new Nodo("RETORNO");
            nd.setNumNodo(parser.contador++);
            parser.contador++;
             //nd.addHijo(new Nodo(n1.toString()));
             nd.addHijo(new Nodo(n2.toString()));
             
             RESULT = nd;
             
              CUP$CupArbol$result = parser.getSymbolFactory().newSymbol("RETORNO",5, ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-1)), ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()), RESULT);
            }
          return CUP$CupArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // RETORNO ::= Return Identificador parentesisE PARAMETROS parentesisC 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-4)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-4)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-4)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-3)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-3)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-3)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)).value;
		int n4left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-1)).left;
		int n4right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-1)).right;
		Object n4 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-1)).value;
		int n5left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()).left;
		int n5right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()).right;
		Object n5 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.peek()).value;
		
            Nodo nd = new Nodo("RETORNO");
            nd.setNumNodo(parser.contador++);
            parser.contador++;
             //nd.addHijo(new Nodo(n1.toString()));
             nd.addHijo(new Nodo(n2.toString()));
             //nd.addHijo(new Nodo(n3.toString()));
             nd.addHijo((Nodo)n4);
             //nd.addHijo(new Nodo(n5.toString()));
             RESULT = nd;
             
              CUP$CupArbol$result = parser.getSymbolFactory().newSymbol("RETORNO",5, ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-4)), ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()), RESULT);
            }
          return CUP$CupArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // RETORNO ::= Return RECURSION 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-1)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.peek()).value;
		
            Nodo nd = new Nodo("RETORNO");
            nd.setNumNodo(parser.contador++);
            parser.contador++;
             //nd.addHijo(new Nodo(n1.toString()));
             nd.addHijo((Nodo)n2);
             RESULT = nd;
             
              CUP$CupArbol$result = parser.getSymbolFactory().newSymbol("RETORNO",5, ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-1)), ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()), RESULT);
            }
          return CUP$CupArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // FUNCION ::= Function Identificador parentesisE PARAMETROS parentesisC TIPODATO CUERPO End Function 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-8)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-8)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-8)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-7)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-7)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-7)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-6)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-6)).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-6)).value;
		int n4left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-5)).left;
		int n4right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-5)).right;
		Object n4 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-5)).value;
		int n5left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-4)).left;
		int n5right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-4)).right;
		Object n5 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-4)).value;
		int n6left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-3)).left;
		int n6right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-3)).right;
		Object n6 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-3)).value;
		int n7left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)).left;
		int n7right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)).right;
		Object n7 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)).value;
		int n8left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-1)).left;
		int n8right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-1)).right;
		Object n8 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-1)).value;
		int n9left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()).left;
		int n9right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()).right;
		Object n9 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.peek()).value;
		
            Nodo nd = new Nodo("FUNCION");
            nd.setNumNodo(parser.contador++);
            parser.contador++;
             nd.addHijo(new Nodo(n1.toString()));
             nd.addHijo(new Nodo(n2.toString()));
             //nd.addHijo(new Nodo(n3.toString()));
             nd.addHijo((Nodo)n4);
             nd.addHijo(new Nodo(n5.toString()));
             //nd.addHijo((Nodo)n6);

             if (n7 != null)
             nd.addHijo((Nodo)n7);
             nd.addHijo(new Nodo(n8.toString()+" "+n9.toString()));
             RESULT = nd;
             
              CUP$CupArbol$result = parser.getSymbolFactory().newSymbol("FUNCION",6, ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-8)), ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()), RESULT);
            }
          return CUP$CupArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // FUNCION ::= Function Identificador parentesisE PARAMETROS parentesisC CUERPO End Function 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-7)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-7)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-7)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-6)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-6)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-6)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-5)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-5)).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-5)).value;
		int n4left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-4)).left;
		int n4right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-4)).right;
		Object n4 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-4)).value;
		int n5left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-3)).left;
		int n5right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-3)).right;
		Object n5 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-3)).value;
		int n6left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)).left;
		int n6right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)).right;
		Object n6 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)).value;
		int n7left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-1)).left;
		int n7right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-1)).right;
		Object n7 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-1)).value;
		int n8left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()).left;
		int n8right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()).right;
		Object n8 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.peek()).value;
		
            Nodo nd = new Nodo("FUNCION");
            nd.setNumNodo(parser.contador++);
            parser.contador++;
             nd.addHijo(new Nodo(n1.toString()));
             nd.addHijo(new Nodo(n2.toString()));
             //nd.addHijo(new Nodo(n3.toString()));
             nd.addHijo((Nodo)n4);
             //nd.addHijo(new Nodo(n5.toString()));
             
             if (n6 != null)
             nd.addHijo((Nodo)n6);
             nd.addHijo(new Nodo(n7.toString()+" "+n8.toString()));
             RESULT = nd;
             
              CUP$CupArbol$result = parser.getSymbolFactory().newSymbol("FUNCION",6, ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-7)), ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()), RESULT);
            }
          return CUP$CupArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // FUNCION ::= Function Identificador parentesisE parentesisC TIPODATO CUERPO End Function 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-7)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-7)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-7)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-6)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-6)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-6)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-5)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-5)).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-5)).value;
		int n4left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-4)).left;
		int n4right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-4)).right;
		Object n4 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-4)).value;
		int n5left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-3)).left;
		int n5right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-3)).right;
		Object n5 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-3)).value;
		int n6left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)).left;
		int n6right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)).right;
		Object n6 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)).value;
		int n7left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-1)).left;
		int n7right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-1)).right;
		Object n7 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-1)).value;
		int n8left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()).left;
		int n8right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()).right;
		Object n8 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.peek()).value;
		
            Nodo nd = new Nodo("FUNCION");
            nd.setNumNodo(parser.contador++);
            parser.contador++;
             nd.addHijo(new Nodo(n1.toString()));
             nd.addHijo(new Nodo(n2.toString() + n3.toString()+""+n4.toString()));
            
             nd.addHijo((Nodo)n5);

             if (n6 != null)
             nd.addHijo((Nodo)n6);
             nd.addHijo(new Nodo(n7.toString()+" "+n8.toString()));
             RESULT = nd;
             
              CUP$CupArbol$result = parser.getSymbolFactory().newSymbol("FUNCION",6, ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-7)), ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()), RESULT);
            }
          return CUP$CupArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // FUNCION ::= Function Identificador parentesisE parentesisC CUERPO End Function 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-6)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-6)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-6)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-5)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-5)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-5)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-4)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-4)).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-4)).value;
		int n4left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-3)).left;
		int n4right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-3)).right;
		Object n4 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-3)).value;
		int n5left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)).left;
		int n5right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)).right;
		Object n5 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)).value;
		int n6left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-1)).left;
		int n6right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-1)).right;
		Object n6 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-1)).value;
		int n7left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()).left;
		int n7right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()).right;
		Object n7 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.peek()).value;
		
            Nodo nd = new Nodo("FUNCION");
            nd.setNumNodo(parser.contador++);
            parser.contador++;
             nd.addHijo(new Nodo(n1.toString()));
             nd.addHijo(new Nodo(n2.toString() + n3.toString()+" "+n4.toString()));
            

             if (n5 != null)
             nd.addHijo((Nodo)n5);
             nd.addHijo(new Nodo(n6.toString()+" "+n7.toString()));
             RESULT = nd;
             
              CUP$CupArbol$result = parser.getSymbolFactory().newSymbol("FUNCION",6, ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-6)), ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()), RESULT);
            }
          return CUP$CupArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // SENTENCIA_BOOLEANA ::= Identificador COMPARACION Identificador 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-1)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-1)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.peek()).value;
		
            Nodo nd = new Nodo("SENTENCIA_BOOLEANA");
            nd.setNumNodo(parser.contador++);
            parser.contador++;
             nd.addHijo(new Nodo(n1.toString()));
             nd.addHijo((Nodo)n2);
             nd.addHijo(new Nodo(n3.toString()));
             RESULT = nd;
             
              CUP$CupArbol$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",31, ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)), ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()), RESULT);
            }
          return CUP$CupArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // SENTENCIA_BOOLEANA ::= Identificador COMPARACION Numero 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-1)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-1)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.peek()).value;
		
            Nodo nd = new Nodo("SENTENCIA_BOOLEANA");
            nd.setNumNodo(parser.contador++);
            parser.contador++;
             nd.addHijo(new Nodo(n1.toString()));
             nd.addHijo((Nodo)n2);
             nd.addHijo(new Nodo(n3.toString()));
             RESULT = nd;
             
              CUP$CupArbol$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",31, ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)), ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()), RESULT);
            }
          return CUP$CupArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // SENTENCIA_BOOLEANA ::= Identificador COMPARACION Op_Booleano 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-1)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-1)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.peek()).value;
		
            Nodo nd = new Nodo("SENTENCIA_BOOLEANA");
            nd.setNumNodo(parser.contador++);
            parser.contador++;
             nd.addHijo(new Nodo(n1.toString()));
             nd.addHijo((Nodo)n2);
             nd.addHijo(new Nodo(n3.toString()));
             RESULT = nd;
             
              CUP$CupArbol$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",31, ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)), ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()), RESULT);
            }
          return CUP$CupArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // SENTENCIA_BOOLEANA ::= Identificador COMPARACION Cadena 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-1)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-1)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.peek()).value;
		
            Nodo nd = new Nodo("SENTENCIA_BOOLEANA");
            nd.setNumNodo(parser.contador++);
            parser.contador++;
             nd.addHijo(new Nodo(n1.toString()));
             nd.addHijo((Nodo)n2);
             nd.addHijo(new Nodo(n3.toString()));
             RESULT = nd;
             
              CUP$CupArbol$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",31, ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)), ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()), RESULT);
            }
          return CUP$CupArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // SENTENCIA_BOOLEANA ::= Identificador COMPARACION Comilla Comilla 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-3)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-3)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-3)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-1)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-1)).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-1)).value;
		int n4left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()).left;
		int n4right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()).right;
		Object n4 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.peek()).value;
		
            Nodo nd = new Nodo("SENTENCIA_BOOLEANA");
            nd.setNumNodo(parser.contador++);
            parser.contador++;
             nd.addHijo(new Nodo(n1.toString()));
             nd.addHijo((Nodo)n2);
             nd.addHijo(new Nodo(n3.toString()+" "+n4.toString()));
             RESULT = nd;
             
              CUP$CupArbol$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",31, ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-3)), ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()), RESULT);
            }
          return CUP$CupArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // COMPARACION ::= OperadorRelacional 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.peek()).value;
		
            Nodo nd = new Nodo(n1.toString());
            nd.setNumNodo(parser.contador++);
            parser.contador++;
             
             RESULT = nd;
             
              CUP$CupArbol$result = parser.getSymbolFactory().newSymbol("COMPARACION",34, ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()), ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()), RESULT);
            }
          return CUP$CupArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // COMPARACION ::= Igual 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.peek()).value;
		
            Nodo nd = new Nodo(n1.toString());
            nd.setNumNodo(parser.contador++);
            parser.contador++;
            
             RESULT = nd;
             
              CUP$CupArbol$result = parser.getSymbolFactory().newSymbol("COMPARACION",34, ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()), ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()), RESULT);
            }
          return CUP$CupArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // DECLARACION_IF ::= LOGICOAND LOGICOOR 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-1)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.peek()).value;
		
            Nodo nd = new Nodo("DECLARACION_IF");
            nd.setNumNodo(parser.contador++);
            parser.contador++;
             nd.addHijo((Nodo)n1);

             if (n2 != null)
             nd.addHijo((Nodo)n2);
             RESULT = nd;
             
              CUP$CupArbol$result = parser.getSymbolFactory().newSymbol("DECLARACION_IF",22, ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-1)), ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()), RESULT);
            }
          return CUP$CupArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // DECLARACION_IF ::= parentesisE DECLARACION_IF parentesisC 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-1)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-1)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.peek()).value;
		
            Nodo nd = new Nodo("DECLARACION_IF");
            nd.setNumNodo(parser.contador++);
            parser.contador++;
            // nd.addHijo(new Nodo(n1.toString()));
             nd.addHijo((Nodo)n2);
            // nd.addHijo(new Nodo(n3.toString()));
             RESULT = nd;
             
              CUP$CupArbol$result = parser.getSymbolFactory().newSymbol("DECLARACION_IF",22, ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)), ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()), RESULT);
            }
          return CUP$CupArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // LOGICOOR ::= OR LOGICOAND LOGICOOR 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-1)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-1)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.peek()).value;
		
            Nodo nd = new Nodo(n1.toString());
            nd.setNumNodo(parser.contador++);
            parser.contador++;
             //nd.addHijo(new Nodo(n1.toString()));
             nd.addHijo((Nodo)n2);

             if (n3 != null)
             nd.addHijo((Nodo)n3);
             RESULT = nd;
             
              CUP$CupArbol$result = parser.getSymbolFactory().newSymbol("LOGICOOR",33, ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)), ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()), RESULT);
            }
          return CUP$CupArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // LOGICOOR ::= 
            {
              Object RESULT =null;

              CUP$CupArbol$result = parser.getSymbolFactory().newSymbol("LOGICOOR",33, ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()), RESULT);
            }
          return CUP$CupArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // LOGICOAND ::= SENTENCIA_BOOLEANA LOGICOAND_Prima 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-1)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.peek()).value;
		
            Nodo nd = new Nodo("LOGICOAND");
            nd.setNumNodo(parser.contador++);
            parser.contador++;
             nd.addHijo((Nodo)n1);

             if (n2 != null)
             nd.addHijo((Nodo)n2);
             RESULT = nd;
             
              CUP$CupArbol$result = parser.getSymbolFactory().newSymbol("LOGICOAND",21, ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-1)), ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()), RESULT);
            }
          return CUP$CupArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // LOGICOAND_Prima ::= And SENTENCIA_BOOLEANA LOGICOAND_Prima 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-1)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-1)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.peek()).value;
		
            Nodo nd = new Nodo(n1.toString());
            nd.setNumNodo(parser.contador++);
            parser.contador++;
             //nd.addHijo(new Nodo(n1.toString()));
             nd.addHijo((Nodo)n2);

             if (n3 != null)
             nd.addHijo((Nodo)n3);
             RESULT = nd;
             
              CUP$CupArbol$result = parser.getSymbolFactory().newSymbol("LOGICOAND_Prima",32, ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)), ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()), RESULT);
            }
          return CUP$CupArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // LOGICOAND_Prima ::= 
            {
              Object RESULT =null;

              CUP$CupArbol$result = parser.getSymbolFactory().newSymbol("LOGICOAND_Prima",32, ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()), RESULT);
            }
          return CUP$CupArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // SENTENCIA_IF ::= IF DECLARACION_IF then CUERPO End IF 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-5)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-5)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-5)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-4)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-4)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-4)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-3)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-3)).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-3)).value;
		int n4left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)).left;
		int n4right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)).right;
		Object n4 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)).value;
		int n5left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-1)).left;
		int n5right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-1)).right;
		Object n5 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-1)).value;
		int n6left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()).left;
		int n6right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()).right;
		Object n6 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.peek()).value;
		
            Nodo nd = new Nodo("SENTENCIA_IF");
            nd.setNumNodo(parser.contador++);
            parser.contador++;
             nd.addHijo(new Nodo(n1.toString()));
             nd.addHijo((Nodo)n2);
           //  nd.addHijo(new Nodo(n3.toString()));

             if (n4 != null)
             nd.addHijo((Nodo)n4);
             nd.addHijo(new Nodo(n5.toString()+" "+n6.toString()));
             RESULT = nd;
             
              CUP$CupArbol$result = parser.getSymbolFactory().newSymbol("SENTENCIA_IF",20, ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-5)), ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()), RESULT);
            }
          return CUP$CupArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // ELSE_IF ::= IF DECLARACION_IF then CUERPO Else CUERPO End IF 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-7)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-7)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-7)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-6)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-6)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-6)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-5)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-5)).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-5)).value;
		int n4left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-4)).left;
		int n4right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-4)).right;
		Object n4 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-4)).value;
		int n5left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-3)).left;
		int n5right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-3)).right;
		Object n5 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-3)).value;
		int n6left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)).left;
		int n6right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)).right;
		Object n6 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)).value;
		int n7left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-1)).left;
		int n7right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-1)).right;
		Object n7 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-1)).value;
		int n8left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()).left;
		int n8right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()).right;
		Object n8 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.peek()).value;
		
            Nodo nd = new Nodo("SENTENCIA_ELSE_IF");
            nd.setNumNodo(parser.contador++);
            parser.contador++;
             nd.addHijo(new Nodo(n1.toString()));
             nd.addHijo((Nodo)n2);
             //nd.addHijo(new Nodo(n3.toString()));

             if (n4 != null)
             nd.addHijo((Nodo)n4);
             nd.addHijo(new Nodo(n5.toString()));

             if (n6 != null)
             nd.addHijo((Nodo)n6);
             nd.addHijo(new Nodo(n7.toString()+" "+n8.toString()));
             RESULT = nd;
             
              CUP$CupArbol$result = parser.getSymbolFactory().newSymbol("ELSE_IF",23, ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-7)), ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()), RESULT);
            }
          return CUP$CupArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // ARITMETICOS ::= MULTIPLICACIONES ADICIONES 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-1)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.peek()).value;
		
            Nodo nd = new Nodo("ARITMETICOS");
            nd.setNumNodo(parser.contador++);
            parser.contador++;
             nd.addHijo((Nodo)n1);

             if (n2 != null)
             nd.addHijo((Nodo)n2);
             RESULT = nd;
             
              CUP$CupArbol$result = parser.getSymbolFactory().newSymbol("ARITMETICOS",41, ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-1)), ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()), RESULT);
            }
          return CUP$CupArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // ADICIONES ::= OPRestSuma MULTIPLICACIONES ADICIONES 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-1)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-1)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.peek()).value;
		
            Nodo nd = new Nodo("ADICIONES");
            nd.setNumNodo(parser.contador++);
            parser.contador++;
            nd.addHijo(new Nodo(n1.toString()));
             nd.addHijo((Nodo)n2);

             if (n3 != null)
             nd.addHijo((Nodo)n3);
             RESULT = nd;
             
              CUP$CupArbol$result = parser.getSymbolFactory().newSymbol("ADICIONES",38, ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)), ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()), RESULT);
            }
          return CUP$CupArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // ADICIONES ::= 
            {
              Object RESULT =null;

              CUP$CupArbol$result = parser.getSymbolFactory().newSymbol("ADICIONES",38, ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()), RESULT);
            }
          return CUP$CupArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // MULTIPLICACIONES ::= VALORES_NUMERICOS MULTIPLICACIONES_PRIMA 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-1)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.peek()).value;
		
            Nodo nd = new Nodo("MULTIPLICACIONES");
            nd.setNumNodo(parser.contador++);
            parser.contador++;
             nd.addHijo((Nodo)n1);

             if (n2 != null)
             nd.addHijo((Nodo)n2);
             RESULT = nd;
             
              CUP$CupArbol$result = parser.getSymbolFactory().newSymbol("MULTIPLICACIONES",39, ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-1)), ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()), RESULT);
            }
          return CUP$CupArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // MULTIPLICACIONES_PRIMA ::= OPMultDiv VALORES_NUMERICOS MULTIPLICACIONES_PRIMA 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-1)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-1)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.peek()).value;
		
            Nodo nd = new Nodo("MULTIPLICACIONES_PRIMA");
            nd.setNumNodo(parser.contador++);
            parser.contador++;
            nd.addHijo(new Nodo(n1.toString()));
             nd.addHijo((Nodo)n2);
             
             if (n3 != null)
             nd.addHijo((Nodo)n3);
             RESULT = nd;
             
              CUP$CupArbol$result = parser.getSymbolFactory().newSymbol("MULTIPLICACIONES_PRIMA",40, ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)), ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()), RESULT);
            }
          return CUP$CupArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // MULTIPLICACIONES_PRIMA ::= 
            {
              Object RESULT =null;

              CUP$CupArbol$result = parser.getSymbolFactory().newSymbol("MULTIPLICACIONES_PRIMA",40, ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()), RESULT);
            }
          return CUP$CupArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // VALORES_NUMERICOS ::= Numero 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.peek()).value;
		
            Nodo nd = new Nodo(n1.toString());
            nd.setNumNodo(parser.contador++);
            parser.contador++;
          
             RESULT = nd;
             
              CUP$CupArbol$result = parser.getSymbolFactory().newSymbol("VALORES_NUMERICOS",12, ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()), ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()), RESULT);
            }
          return CUP$CupArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // VALORES_NUMERICOS ::= Identificador 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.peek()).value;
		
            Nodo nd = new Nodo(n1.toString());
            nd.setNumNodo(parser.contador++);
            parser.contador++;
           
             RESULT = nd;
             
              CUP$CupArbol$result = parser.getSymbolFactory().newSymbol("VALORES_NUMERICOS",12, ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()), ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()), RESULT);
            }
          return CUP$CupArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // VALORES_NUMERICOS ::= parentesisE ARITMETICOS parentesisC 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-1)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-1)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.peek()).value;
		
            Nodo nd = new Nodo("VALORES_NUMERICOS");
            nd.setNumNodo(parser.contador++);
            parser.contador++;
           // nd.addHijo(new Nodo(n1.toString()));
             nd.addHijo((Nodo)n2);
            // nd.addHijo(new Nodo(n3.toString()));
             RESULT = nd;
             
              CUP$CupArbol$result = parser.getSymbolFactory().newSymbol("VALORES_NUMERICOS",12, ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)), ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()), RESULT);
            }
          return CUP$CupArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // OP_RECURSIVIDAD ::= RECURSION 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.peek()).value;
		
            Nodo nd = new Nodo("OP_RECURSIVIDAD");
            nd.setNumNodo(parser.contador++);
            parser.contador++;
             nd.addHijo((Nodo)n1);
             RESULT = nd;
             
              CUP$CupArbol$result = parser.getSymbolFactory().newSymbol("OP_RECURSIVIDAD",36, ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()), ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()), RESULT);
            }
          return CUP$CupArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // OP_RECURSIVIDAD ::= RECURSION OPRestSuma ARITMETICOS 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-1)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-1)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.peek()).value;
		
            Nodo nd = new Nodo("OP_RECURSIVIDAD");
            nd.setNumNodo(parser.contador++);
            parser.contador++;
            nd.addHijo((Nodo)n1);
            nd.addHijo(new Nodo(n2.toString()));
             nd.addHijo((Nodo)n3);
             RESULT = nd;
             
              CUP$CupArbol$result = parser.getSymbolFactory().newSymbol("OP_RECURSIVIDAD",36, ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)), ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()), RESULT);
            }
          return CUP$CupArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // OP_RECURSIVIDAD ::= RECURSION OPMultDiv ARITMETICOS 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-1)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-1)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.peek()).value;
		
            Nodo nd = new Nodo("OP_RECURSIVIDAD");
            nd.setNumNodo(parser.contador++);
            parser.contador++;
            nd.addHijo((Nodo)n1);
            nd.addHijo(new Nodo(n2.toString()));
             nd.addHijo((Nodo)n3);
             RESULT = nd;
             
              CUP$CupArbol$result = parser.getSymbolFactory().newSymbol("OP_RECURSIVIDAD",36, ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)), ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()), RESULT);
            }
          return CUP$CupArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // OP_RECURSIVIDAD ::= ARITMETICOS OPRestSuma RECURSION 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-1)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-1)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.peek()).value;
		
            Nodo nd = new Nodo("OP_RECURSIVIDAD");
            nd.setNumNodo(parser.contador++);
            parser.contador++;
            nd.addHijo((Nodo)n1);
            nd.addHijo(new Nodo(n2.toString()));
             nd.addHijo((Nodo)n3);
             RESULT = nd;
             
              CUP$CupArbol$result = parser.getSymbolFactory().newSymbol("OP_RECURSIVIDAD",36, ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)), ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()), RESULT);
            }
          return CUP$CupArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // OP_RECURSIVIDAD ::= ARITMETICOS OPMultDiv RECURSION 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-1)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-1)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.peek()).value;
		
            Nodo nd = new Nodo("OP_RECURSIVIDAD");
            nd.setNumNodo(parser.contador++);
            parser.contador++;
            nd.addHijo((Nodo)n1);
            nd.addHijo(new Nodo(n2.toString()));
             nd.addHijo((Nodo)n3);
             RESULT = nd;
             
              CUP$CupArbol$result = parser.getSymbolFactory().newSymbol("OP_RECURSIVIDAD",36, ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)), ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()), RESULT);
            }
          return CUP$CupArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // ASIGNACION ::= Identificador Igual DATO 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-1)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-1)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.peek()).value;
		
            Nodo nd = new Nodo("ASIGNACION");
            nd.setNumNodo(parser.contador++);
            parser.contador++;
            nd.addHijo(new Nodo(n1.toString()+n2.toString()));
            //nd.addHijo(new Nodo());
             nd.addHijo((Nodo)n3);
             RESULT = nd;
             
              CUP$CupArbol$result = parser.getSymbolFactory().newSymbol("ASIGNACION",11, ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)), ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()), RESULT);
            }
          return CUP$CupArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // ASIGNACION ::= Identificador Punto Identificador Igual DATO 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-4)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-4)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-4)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-3)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-3)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-3)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)).value;
		int n4left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-1)).left;
		int n4right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-1)).right;
		Object n4 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-1)).value;
		int n5left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()).left;
		int n5right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()).right;
		Object n5 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.peek()).value;
		
            Nodo nd = new Nodo("ASIGNACION");
            nd.setNumNodo(parser.contador++);
            parser.contador++;
            nd.addHijo(new Nodo(n1.toString() + n2.toString() + n3.toString() + n4.toString()));
           
             nd.addHijo((Nodo)n5);
             RESULT = nd;
             
              CUP$CupArbol$result = parser.getSymbolFactory().newSymbol("ASIGNACION",11, ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-4)), ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()), RESULT);
            }
          return CUP$CupArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // ASIGNACION ::= Identificador Igual RECURSION 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-1)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-1)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.peek()).value;
		
            Nodo nd = new Nodo("ASIGNACION");
            nd.setNumNodo(parser.contador++);
            parser.contador++;
            nd.addHijo(new Nodo(n1.toString() + n2.toString() ));
            
             nd.addHijo((Nodo)n3);
             RESULT = nd;
             
              CUP$CupArbol$result = parser.getSymbolFactory().newSymbol("ASIGNACION",11, ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)), ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()), RESULT);
            }
          return CUP$CupArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // IMPRIMIR ::= Console Punto WriteLine parentesisE CONCATENACION parentesisC 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-5)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-5)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-5)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-4)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-4)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-4)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-3)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-3)).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-3)).value;
		int n4left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)).left;
		int n4right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)).right;
		Object n4 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)).value;
		int n5left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-1)).left;
		int n5right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-1)).right;
		Object n5 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-1)).value;
		int n6left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()).left;
		int n6right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()).right;
		Object n6 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.peek()).value;
		
            Nodo nd = new Nodo(n1.toString() + n2.toString() + n3.toString() );
            nd.setNumNodo(parser.contador++);
            parser.contador++;
           // nd.addHijo(new Nodo(n1.toString() + n2.toString() + n3.toString() ));
           // nd.addHijo(new Nodo(n4.toString()));
             //nd.addHijo((Nodo)n5);
             //nd.addHijo(new Nodo(n6.toString()));
             RESULT = nd;
             
              CUP$CupArbol$result = parser.getSymbolFactory().newSymbol("IMPRIMIR",45, ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-5)), ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()), RESULT);
            }
          return CUP$CupArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // LEER ::= Console Punto ReadLine parentesisE parentesisC 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-4)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-4)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-4)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-3)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-3)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-3)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)).value;
		int n4left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-1)).left;
		int n4right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-1)).right;
		Object n4 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-1)).value;
		int n5left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()).left;
		int n5right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()).right;
		Object n5 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.peek()).value;
		
             Nodo nd = new Nodo(n1.toString() + n2.toString() + n3.toString() + n4.toString()+" "+n5.toString());
            //Nodo nd = new Nodo("LEER");
            nd.setNumNodo(parser.contador++);
            parser.contador++;
            //nd.addHijo(new Nodo(n1.toString() + n2.toString() + n3.toString() + n4.toString()+" "+n5.toString()));
            //nd.addHijo(new Nodo(n4.toString()+" "+n5.toString()));
             RESULT = nd;
             
              CUP$CupArbol$result = parser.getSymbolFactory().newSymbol("LEER",47, ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-4)), ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()), RESULT);
            }
          return CUP$CupArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // LLAMADA_FUNCION ::= Identificador Punto Identificador parentesisE parentesisC 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-4)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-4)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-4)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-3)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-3)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-3)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)).value;
		int n4left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-1)).left;
		int n4right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-1)).right;
		Object n4 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-1)).value;
		int n5left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()).left;
		int n5right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()).right;
		Object n5 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.peek()).value;
		
            Nodo nd = new Nodo("LLAMADA_FUNCION");
            nd.setNumNodo(parser.contador++);
            parser.contador++;
          
            nd.addHijo(new Nodo(n1.toString() + n2.toString() + n3.toString() + n4.toString()+" "+n5.toString() ));
     
             RESULT = nd;
             
              CUP$CupArbol$result = parser.getSymbolFactory().newSymbol("LLAMADA_FUNCION",28, ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-4)), ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()), RESULT);
            }
          return CUP$CupArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // LLAMADA_FUNCION ::= Identificador Punto Identificador parentesisE PARAMETROS2 parentesisC 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-5)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-5)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-5)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-3)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-3)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-3)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)).value;
		int n4left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-1)).left;
		int n4right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-1)).right;
		Object n4 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-1)).value;
		int n5left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()).left;
		int n5right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()).right;
		Object n5 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.peek()).value;
		
            Nodo nd = new Nodo("LLAMADA_FUNCION");
            nd.setNumNodo(parser.contador++);
            parser.contador++;
            nd.addHijo(new Nodo(n1.toString()));
            nd.addHijo(new Nodo(n2.toString()));
            //nd.addHijo(new Nodo(n3.toString()));;
             nd.addHijo((Nodo)n4);
             //nd.addHijo(new Nodo(n5.toString()));
             RESULT = nd;
             
              CUP$CupArbol$result = parser.getSymbolFactory().newSymbol("LLAMADA_FUNCION",28, ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-5)), ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()), RESULT);
            }
          return CUP$CupArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // CONCATENACION ::= Cadena CONCATENABLES CONCATENACION 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-1)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-1)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.peek()).value;
		
            Nodo nd = new Nodo("CONCATENACION");
            nd.setNumNodo(parser.contador++);
            parser.contador++;
            nd.addHijo(new Nodo(n1.toString()));
            //nd.addHijo((Nodo)n2);
             nd.addHijo((Nodo)n3);
             RESULT = nd;
             
              CUP$CupArbol$result = parser.getSymbolFactory().newSymbol("CONCATENACION",46, ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)), ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()), RESULT);
            }
          return CUP$CupArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // CONCATENACION ::= ARITMETICOS CONCATENABLES CONCATENACION 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-1)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-1)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.peek()).value;
		
            Nodo nd = new Nodo("CONCATENACION");
            nd.setNumNodo(parser.contador++);
            parser.contador++;
            nd.addHijo((Nodo)n1);
            //nd.addHijo((Nodo)n2);
             nd.addHijo((Nodo)n3);
             RESULT = nd;
             
              CUP$CupArbol$result = parser.getSymbolFactory().newSymbol("CONCATENACION",46, ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)), ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()), RESULT);
            }
          return CUP$CupArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // CONCATENACION ::= Identificador Punto Identificador CONCATENABLES CONCATENACION 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-4)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-4)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-4)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-3)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-3)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-3)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)).value;
		int n4left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-1)).left;
		int n4right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-1)).right;
		Object n4 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-1)).value;
		int n5left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()).left;
		int n5right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()).right;
		Object n5 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.peek()).value;
		
            Nodo nd = new Nodo("CONCATENACION");
            nd.setNumNodo(parser.contador++);
            parser.contador++;
            nd.addHijo(new Nodo(n1.toString()));
           // nd.addHijo(new Nodo(n2.toString()));
            nd.addHijo(new Nodo(n3.toString()));
             //nd.addHijo((Nodo)n4);
             nd.addHijo((Nodo)n5);
             RESULT = nd;
             
              CUP$CupArbol$result = parser.getSymbolFactory().newSymbol("CONCATENACION",46, ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-4)), ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()), RESULT);
            }
          return CUP$CupArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // CONCATENACION ::= Cadena 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.peek()).value;
		
            Nodo nd = new Nodo("CONCATENACION");
            nd.setNumNodo(parser.contador++);
            parser.contador++;
            nd.addHijo(new Nodo(n1.toString()));
             RESULT = nd;
             
              CUP$CupArbol$result = parser.getSymbolFactory().newSymbol("CONCATENACION",46, ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()), ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()), RESULT);
            }
          return CUP$CupArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // CONCATENACION ::= ARITMETICOS 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.peek()).value;
		
            Nodo nd = new Nodo("CONCATENACION");
            nd.setNumNodo(parser.contador++);
            parser.contador++;
             nd.addHijo((Nodo)n1);
             RESULT = nd;
             
              CUP$CupArbol$result = parser.getSymbolFactory().newSymbol("CONCATENACION",46, ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()), ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()), RESULT);
            }
          return CUP$CupArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // CONCATENACION ::= Identificador Punto Identificador 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-1)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-1)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.peek()).value;
		
            Nodo nd = new Nodo("CONCATENACION");
            nd.setNumNodo(parser.contador++);
            parser.contador++;
            nd.addHijo(new Nodo(n1.toString()));
            //nd.addHijo(new Nodo(n2.toString()));
            nd.addHijo(new Nodo(n3.toString()));
             RESULT = nd;
             
              CUP$CupArbol$result = parser.getSymbolFactory().newSymbol("CONCATENACION",46, ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)), ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()), RESULT);
            }
          return CUP$CupArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // CONCATENABLES ::= concatenacion 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.peek()).value;
		
            Nodo nd = new Nodo("CONCATENABLES");
            nd.setNumNodo(parser.contador++);
            parser.contador++;
            nd.addHijo(new Nodo(n1.toString()));
             RESULT = nd;
             
              CUP$CupArbol$result = parser.getSymbolFactory().newSymbol("CONCATENABLES",43, ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()), ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()), RESULT);
            }
          return CUP$CupArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // CONCATENABLES ::= coma 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.peek()).value;
		
            Nodo nd = new Nodo("CONCATENABLES");
            nd.setNumNodo(parser.contador++);
            parser.contador++;
            nd.addHijo(new Nodo(n1.toString()));
             RESULT = nd;
             
              CUP$CupArbol$result = parser.getSymbolFactory().newSymbol("CONCATENABLES",43, ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()), ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()), RESULT);
            }
          return CUP$CupArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // CUERPO ::= DECLARACION Enter CUERPO 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.peek()).value;
		
            Nodo nd = new Nodo("CUERPO");
            nd.setNumNodo(parser.contador++);
            parser.contador++;
             nd.addHijo((Nodo)n1);

             if (n2 != null)
             nd.addHijo((Nodo)n2);

             RESULT = nd;
             
              CUP$CupArbol$result = parser.getSymbolFactory().newSymbol("CUERPO",14, ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)), ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()), RESULT);
            }
          return CUP$CupArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // CUERPO ::= IMPRIMIR Enter CUERPO 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.peek()).value;
		
            Nodo nd = new Nodo("CUERPO");
            nd.setNumNodo(parser.contador++);
            parser.contador++;
             nd.addHijo((Nodo)n1);

              if (n2 != null)
             nd.addHijo((Nodo)n2);
             RESULT = nd;
             
              CUP$CupArbol$result = parser.getSymbolFactory().newSymbol("CUERPO",14, ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)), ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()), RESULT);
            }
          return CUP$CupArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // CUERPO ::= ASIGNACION Enter CUERPO 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.peek()).value;
		
            Nodo nd = new Nodo("CUERPO");
            nd.setNumNodo(parser.contador++);
            parser.contador++;
             nd.addHijo((Nodo)n1);

              if (n2 != null)
             nd.addHijo((Nodo)n2);
             RESULT = nd;
             
              CUP$CupArbol$result = parser.getSymbolFactory().newSymbol("CUERPO",14, ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)), ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()), RESULT);
            }
          return CUP$CupArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // CUERPO ::= SENTENCIA_IF Enter CUERPO 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.peek()).value;
		
            Nodo nd = new Nodo("CUERPO");
            nd.setNumNodo(parser.contador++);
            parser.contador++;
             nd.addHijo((Nodo)n1);


              if (n2 != null)
             nd.addHijo((Nodo)n2);
             RESULT = nd;
             
              CUP$CupArbol$result = parser.getSymbolFactory().newSymbol("CUERPO",14, ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)), ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()), RESULT);
            }
          return CUP$CupArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // CUERPO ::= ELSE_IF Enter CUERPO 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.peek()).value;
		
            Nodo nd = new Nodo("CUERPO");
            nd.setNumNodo(parser.contador++);
            parser.contador++;
             nd.addHijo((Nodo)n1);
             
              if (n2 != null)
             nd.addHijo((Nodo)n2);
             RESULT = nd;
             
              CUP$CupArbol$result = parser.getSymbolFactory().newSymbol("CUERPO",14, ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)), ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()), RESULT);
            }
          return CUP$CupArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // CUERPO ::= DECLARACION_FOR Enter CUERPO 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.peek()).value;
		
            Nodo nd = new Nodo("CUERPO");
            nd.setNumNodo(parser.contador++);
            parser.contador++;
             nd.addHijo((Nodo)n1);

              if (n2 != null)
             nd.addHijo((Nodo)n2);
             RESULT = nd;
             
              CUP$CupArbol$result = parser.getSymbolFactory().newSymbol("CUERPO",14, ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)), ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()), RESULT);
            }
          return CUP$CupArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // CUERPO ::= WHILE Enter CUERPO 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.peek()).value;
		
            Nodo nd = new Nodo("CUERPO");
            nd.setNumNodo(parser.contador++);
            parser.contador++;
             nd.addHijo((Nodo)n1);

              if (n2 != null)
             nd.addHijo((Nodo)n2);
             RESULT = nd;
             
              CUP$CupArbol$result = parser.getSymbolFactory().newSymbol("CUERPO",14, ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)), ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()), RESULT);
            }
          return CUP$CupArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // CUERPO ::= DO_WHILE Enter CUERPO 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.peek()).value;
		
            Nodo nd = new Nodo("CUERPO");
            nd.setNumNodo(parser.contador++);
            parser.contador++;
             nd.addHijo((Nodo)n1);


              if (n2 != null)
             nd.addHijo((Nodo)n2);
             RESULT = nd;
             
              CUP$CupArbol$result = parser.getSymbolFactory().newSymbol("CUERPO",14, ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)), ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()), RESULT);
            }
          return CUP$CupArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // CUERPO ::= RETORNO Enter CUERPO 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.peek()).value;
		
            Nodo nd = new Nodo("CUERPO");
            nd.setNumNodo(parser.contador++);
            parser.contador++;
             nd.addHijo((Nodo)n1);

              if (n2 != null)
             nd.addHijo((Nodo)n2);
             RESULT = nd;
             
              CUP$CupArbol$result = parser.getSymbolFactory().newSymbol("CUERPO",14, ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)), ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()), RESULT);
            }
          return CUP$CupArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // CUERPO ::= LEER Enter CUERPO 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.peek()).value;
		
            Nodo nd = new Nodo("CUERPO");
            nd.setNumNodo(parser.contador++);
            parser.contador++;
             nd.addHijo((Nodo)n1);

              if (n2 != null)
             nd.addHijo((Nodo)n2);
             RESULT = nd;
             
              CUP$CupArbol$result = parser.getSymbolFactory().newSymbol("CUERPO",14, ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)), ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()), RESULT);
            }
          return CUP$CupArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // CUERPO ::= LLAMADA_FUNCION Enter CUERPO 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.peek()).value;
		
            Nodo nd = new Nodo("CUERPO");
            nd.setNumNodo(parser.contador++);
            parser.contador++;
             nd.addHijo((Nodo)n1);

              if (n2 != null)
             nd.addHijo((Nodo)n2);
             RESULT = nd;
             
              CUP$CupArbol$result = parser.getSymbolFactory().newSymbol("CUERPO",14, ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)), ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()), RESULT);
            }
          return CUP$CupArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // CUERPO ::= Comentario Enter CUERPO 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.peek()).value;
		
            Nodo nd = new Nodo("CUERPO");
            nd.setNumNodo(parser.contador++);
            parser.contador++;
              nd.addHijo(new Nodo(n1.toString()));

               if (n2 != null)
             nd.addHijo((Nodo)n2);
             RESULT = nd;
             
              CUP$CupArbol$result = parser.getSymbolFactory().newSymbol("CUERPO",14, ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)), ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()), RESULT);
            }
          return CUP$CupArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // CUERPO ::= RECURSION Enter 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-1)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-1)).value;
		
            Nodo nd = new Nodo("CUERPO");
            nd.setNumNodo(parser.contador++);
            parser.contador++;
             nd.addHijo((Nodo)n1);
             RESULT = nd;
             
              CUP$CupArbol$result = parser.getSymbolFactory().newSymbol("CUERPO",14, ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-1)), ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()), RESULT);
            }
          return CUP$CupArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // CUERPO ::= Enter CUERPO 
            {
              Object RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-1)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.peek()).value;
		
    
           

            if (n2 != null)
            RESULT = n2;

           
              CUP$CupArbol$result = parser.getSymbolFactory().newSymbol("CUERPO",14, ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-1)), ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()), RESULT);
            }
          return CUP$CupArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // CUERPO ::= 
            {
              Object RESULT =null;

              CUP$CupArbol$result = parser.getSymbolFactory().newSymbol("CUERPO",14, ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()), RESULT);
            }
          return CUP$CupArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // RECURSION ::= Identificador parentesisE PARAMETROS2 parentesisC 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-3)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-3)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-3)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-1)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-1)).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-1)).value;
		int n4left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()).left;
		int n4right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()).right;
		Object n4 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.peek()).value;
		
            Nodo nd = new Nodo("RECURSION");
            nd.setNumNodo(parser.contador++);
            parser.contador++;
              nd.addHijo(new Nodo(n1.toString()));
              //nd.addHijo(new Nodo(n2.toString()));
             nd.addHijo((Nodo)n3);
             //nd.addHijo(new Nodo(n4.toString()));
             RESULT = nd;
             
              CUP$CupArbol$result = parser.getSymbolFactory().newSymbol("RECURSION",35, ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-3)), ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()), RESULT);
            }
          return CUP$CupArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // RECURSION ::= Identificador parentesisE parentesisC 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-1)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-1)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.peek()).value;
		
            Nodo nd = new Nodo("RECURSION");
            nd.setNumNodo(parser.contador++);
            parser.contador++;
              nd.addHijo(new Nodo(n1.toString()));
             // nd.addHijo(new Nodo(n2.toString()+" "+n3.toString()));
             RESULT = nd;
             
              CUP$CupArbol$result = parser.getSymbolFactory().newSymbol("RECURSION",35, ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)), ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()), RESULT);
            }
          return CUP$CupArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // DECLARACION_FOR ::= For ASIGNACION TO Numero CUERPO Next 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-5)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-5)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-5)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-4)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-4)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-4)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-3)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-3)).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-3)).value;
		int n4left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)).left;
		int n4right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)).right;
		Object n4 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)).value;
		int n5left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-1)).left;
		int n5right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-1)).right;
		Object n5 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-1)).value;
		int n6left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()).left;
		int n6right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()).right;
		Object n6 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.peek()).value;
		
            Nodo nd = new Nodo("FOR");
            nd.setNumNodo(parser.contador++);
            parser.contador++;
              nd.addHijo(new Nodo(n1.toString()));
              nd.addHijo((Nodo)n2);
              nd.addHijo(new Nodo(n3.toString() + " " + n4.toString() ));
              

             if (n5 != null)
             nd.addHijo((Nodo)n5);
             nd.addHijo(new Nodo(n6.toString()));
             RESULT = nd;
             
              CUP$CupArbol$result = parser.getSymbolFactory().newSymbol("DECLARACION_FOR",3, ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-5)), ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()), RESULT);
            }
          return CUP$CupArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // WHILE ::= While DECLARACION_IF CUERPO End While 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-4)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-4)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-4)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-3)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-3)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-3)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)).value;
		int n4left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-1)).left;
		int n4right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-1)).right;
		Object n4 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-1)).value;
		int n5left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()).left;
		int n5right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()).right;
		Object n5 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.peek()).value;
		
            Nodo nd = new Nodo("WHILE");
            nd.setNumNodo(parser.contador++);
            parser.contador++;
              nd.addHijo(new Nodo(n1.toString()));
              nd.addHijo((Nodo)n2);


              if (n3 != null)
              nd.addHijo((Nodo)n3);
              nd.addHijo(new Nodo(n4.toString()+" "+n5.toString()));
             RESULT = nd;
             
              CUP$CupArbol$result = parser.getSymbolFactory().newSymbol("WHILE",7, ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-4)), ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()), RESULT);
            }
          return CUP$CupArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // DO_WHILE ::= Do While DECLARACION_IF CUERPO Loop 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-4)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-4)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-4)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-3)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-3)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-3)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-2)).value;
		int n4left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-1)).left;
		int n4right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-1)).right;
		Object n4 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-1)).value;
		int n5left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()).left;
		int n5right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()).right;
		Object n5 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.peek()).value;
		
            Nodo nd = new Nodo("DO_WHILE");
            nd.setNumNodo(parser.contador++);
            parser.contador++;
              nd.addHijo(new Nodo(n1.toString() + " " + n2.toString()));
              
              nd.addHijo((Nodo)n3);

              if (n4 != null)
              nd.addHijo((Nodo)n4);
              nd.addHijo(new Nodo(n5.toString()));
             RESULT = nd;
             
              CUP$CupArbol$result = parser.getSymbolFactory().newSymbol("DO_WHILE",8, ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-4)), ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()), RESULT);
            }
          return CUP$CupArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // FINAL ::= End SentenciaModulo 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-1)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$CupArbol$stack.peek()).value;
		

        Nodo nd = new Nodo("FINAL");
        nd.setNumNodo(parser.contador++);
        parser.contador++;

        nd.addHijo(new Nodo(n1.toString() + " " + n2.toString()));
       
         
        RESULT = nd;



              CUP$CupArbol$result = parser.getSymbolFactory().newSymbol("FINAL",13, ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-1)), ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()), RESULT);
            }
          return CUP$CupArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // DESPUES ::= Enter DESPUES 
            {
              Object RESULT =null;

              CUP$CupArbol$result = parser.getSymbolFactory().newSymbol("DESPUES",30, ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-1)), ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()), RESULT);
            }
          return CUP$CupArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // DESPUES ::= Enter 
            {
              Object RESULT =null;

              CUP$CupArbol$result = parser.getSymbolFactory().newSymbol("DESPUES",30, ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()), ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()), RESULT);
            }
          return CUP$CupArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // PROGRAMA ::= Enter PROGRAMA 
            {
              Object RESULT =null;

              CUP$CupArbol$result = parser.getSymbolFactory().newSymbol("PROGRAMA",29, ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-1)), ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()), RESULT);
            }
          return CUP$CupArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // PROGRAMA ::= INICIO 
            {
              Object RESULT =null;

              CUP$CupArbol$result = parser.getSymbolFactory().newSymbol("PROGRAMA",29, ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()), ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()), RESULT);
            }
          return CUP$CupArbol$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // PROGRAMA ::= INICIO DESPUES 
            {
              Object RESULT =null;

              CUP$CupArbol$result = parser.getSymbolFactory().newSymbol("PROGRAMA",29, ((java_cup.runtime.Symbol)CUP$CupArbol$stack.elementAt(CUP$CupArbol$top-1)), ((java_cup.runtime.Symbol)CUP$CupArbol$stack.peek()), RESULT);
            }
          return CUP$CupArbol$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$CupArbol$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$CupArbol$do_action(
    int                        CUP$CupArbol$act_num,
    java_cup.runtime.lr_parser CUP$CupArbol$parser,
    java.util.Stack            CUP$CupArbol$stack,
    int                        CUP$CupArbol$top)
    throws java.lang.Exception
    {
              return CUP$CupArbol$do_action_part00000000(
                               CUP$CupArbol$act_num,
                               CUP$CupArbol$parser,
                               CUP$CupArbol$stack,
                               CUP$CupArbol$top);
    }
}

}
