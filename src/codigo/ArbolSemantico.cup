
package codigo;

import java_cup.runtime.Symbol;

parser code
{:
	public String resultado="";
	//public Fila tipo;
        public Tabla tabla = new Tabla();
        public String cadena="";
        public String cadena2="";
        public String cadena3="";
	public int contador = 1;
        

 public void syntax_error(Symbol s){
        Ventana.notificar_er("Error de sintaxis: "+ s.value +" Linea " +(s.right)+" columna " +(s.left) );
    }

 public void semantic_error(String valor) throws java.lang.Exception {
        Ventana.notificar_er("Error de tipo, el error de tipo , es el error de tipo: "+ valor );
    }

   public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
      Ventana.notificar_er("Una Sentencia, Ciclo o Funcion no ha sido cerrada correctamente ");
    }

/*
  
    public void syntax_error(Symbol s){
        System.out.println("Error Sintactico en la Linea " + (s.right+1) +" Columna "+s.left+ ". Identificador " +s.value + " no reconocido." );
    }

 
    public void unrecovered_syntax_error(Symbol s){
        //System.out.println("Error Sintactico en la Linea " + (s.right+1)+ "Columna "+s.left+". Identificador " + s.value + " no reconocido.");
		System.out.println(s);
	}
*/
:}

action code
{:

:}



terminal Identificador,  Numero, Cadena, Comilla, parentesisE, parentesisC, Integer,Double,OperadorRelacional,Boolean,Punto,llaveE,
    llaveC, corcheteE, corcheteC,End,OPRestSuma,OPMultDiv, Enter,ContinuacionLinea,Comentario, Igual, ERROR, Else, Main, Op_Booleano,
    Sub, SentenciaModulo, Declaracion,For, IF,While,Do,OR,And,concatenacion,then,Function,Return,Dim,AS,struct, Console, TO,
    WriteLine, coma, String, Next, ReadLine, Loop, New,RMain,
    espacio
/* Declarados*/
   
;


/* no terminales */

non terminal INICIO, SENTENCIA, DECLARACION, DECLARACION_FOR, PARA_SUB,  RETORNO, FUNCION, 
    WHILE, DO_WHILE,  SENTENCIA_FOR, VARIABLES, ASIGNACION, VALORES_NUMERICOS, FINAL, CUERPO, LINEAS, GLOBALES, PARAMETROS, TIPODATO,ESTRUCTURA,

/* Para IF SENTENCIA_EMPAREJADA, SENTENCIA_DESMPAREJADA, */
SENTENCIA_IF, LOGICOAND , DECLARACION_IF , ELSE_IF, DECLARACIONES,PARAMETROS2, DATO, IGUALDAD, LLAMADA_FUNCION, PROGRAMA, DESPUES,

/* Para Boolean */
     SENTENCIA_BOOLEANA , LOGICOAND_Prima ,  LOGICOOR, COMPARACION, RECURSION,OP_RECURSIVIDAD, OP_Recursion,PARA_STRUCK,

/* Para Aritmeticas */
     ADICIONES , MULTIPLICACIONES,  MULTIPLICACIONES_PRIMA,  ARITMETICOS, CUERPO_ESTRUCTURA, CONCATENABLES, CUERPO_ESTRUCTURA2,

/* Para Imprimir */
IMPRIMIR, CONCATENACION, LEER ,S 
;


/* Precedencia */
precedence left Igual;
precedence left OR;
precedence left And;
precedence left OperadorRelacional;
precedence left OPRestSuma , concatenacion;
precedence left OPMultDiv;
precedence nonassoc Else;



start with PROGRAMA;





INICIO::= SentenciaModulo Identificador CUERPO_ESTRUCTURA
    Main parentesisE parentesisC CUERPO End Sub CUERPO_ESTRUCTURA FINAL |error 
;


   VARIABLES::= Identificador coma VARIABLES | 
             Identificador:n1{:
             
             RESULT = n1;
    :};



    TIPODATO::= AS:n1 Integer:n2{:
            
             RESULT = n2; :}                      
            | 
            AS:n1  Boolean:n2{:
            
             RESULT = n2; :} 
 
            | 
           
            AS:n1  String:n2{:
         
             RESULT = n2; :} 
            | 
            AS:n1  Identificador:n2{:

                

             
          
             RESULT = n2; 
:} ;


DECLARACION::=  Dim:n1 VARIABLES:n2 TIPODATO:n3 IGUALDAD:n4{:
      
   
int cont=0;
          for (int i =0; i < tabla.getListaSimbolo().size();i++){
    if(n2.toString().equals(tabla.getListaSimbolo().get(i).getNombreVar())){
cont++;

System.out.println("en esta posicion de la tabla " + i + " es el error y este es el cont " + cont);
}


}
    if(n4 != null){
  
    if(cont==0){
     if((n3.toString()).equals(n4.toString())){
        Fila Fila1 = new Fila(n3.toString() , n2.toString());
        tabla.getListaSimbolo().add(Fila1);

    }else {

        semantic_error("La variable no es del mismo tipo que el asignado" );
    }
}else{
semantic_error("La variable "+n2.toString()+" ya existe" );
}


 
    }else{
        
         if(cont==0){
        tabla.getListaSimbolo().add(new Fila(n3.toString() , n2.toString()));
}else{
semantic_error("La variable "+n2.toString()+" ya existe" );
}

            }

            String xd = "";
            xd = "(" + n2.toString()  + " x " + n3.toString() + ")";

                


RESULT = xd;




:};


IGUALDAD::= Igual:n1 New:n2 Identificador:n3 parentesisE:n4 PARAMETROS2:n5 parentesisC:n6{:
         
            if (n5 != null){
          
            Funcion  TipoF  = new Funcion();
          String retor = "";
         
          String revisar = tabla.BuscarTipoFuncion(n3.toString());

              System.out.println("hasta aqui no hay vergues xD XD:: " + revisar );
              System.out.println("hasta aqui si hay vergues xD XD nooooooooo:: " + n5.toString() );
           
              if(!revisar.equals("error_tipo")){
                TipoF = tabla.esFuncion(n3.toString());
             
                if((n5.toString()).equals(TipoF.getArgumentos())){

                    
                    retor = TipoF.getRetorno();


                }
            }else {
                 semantic_error("Error tipo la variable   " + n3.toString() + "   no se encuentra" );
            }
  
                  System.out.println("AAAAAAAAAAAYUDADDDDD ADADA DA DS D" + retor  );

                RESULT = retor;
}
            
             :}
            | Igual:n1 Identificador:n3 parentesisE:n4 PARAMETROS2:n5 parentesisC:n6{:
         
            if (n5 != null){
          
            Funcion  TipoF  = new Funcion();
          String retor = "";
         
          String revisar = tabla.BuscarTipoFuncion(n3.toString());

              System.out.println("hasta aqui no hay vergues xD XD:: " + revisar );
              System.out.println("hasta aqui si hay vergues xD XD nooooooooo:: " + n5.toString() );
           
              if(!revisar.equals("error_tipo")){
                TipoF = tabla.esFuncion(n3.toString());
             
                if((n5.toString()).equals(TipoF.getArgumentos())){

                    
                    retor = TipoF.getRetorno();


                }
            }else {
                 semantic_error("Error tipo la variable   " + n3.toString() + "   no se encuentra" );
            }
  
                  System.out.println("AAAAAAAAAAAYUDADDDDD ADADA DA DS D" + retor  );

                RESULT = retor;
}
            
             :}
            |
             Igual:n1 DATO:n2{:
                System.out.println("Hola perra");
              String revisar = tabla.BuscarTipoN(n2.toString());
             
             if(!revisar.equals("error_tipo")){
                cadena = revisar;
            }else {
                 semantic_error("Error tipo la variable " + n2.toString() + " no se encuentra" );
            }
          
             
             RESULT = cadena;

             
             :}
            | 
            Igual Identificador:n3 parentesisE parentesisC {:

               
            Funcion  TipoF  = new Funcion();
          String retor = "";
         
          String revisar = tabla.BuscarTipoFuncion(n3.toString());

              System.out.println("hasta aqui no hay vergues xD XD:: " + revisar );
              System.out.println("hasta aqui si hay vergues xD XD nooooooooo:: " + n3.toString() );
           
              if(!revisar.equals("error_tipo")){
                 TipoF = tabla.esFuncion(n3.toString());
             
                if((TipoF.getArgumentos()).equals("void")){

                    
                    retor = TipoF.getRetorno();


                }
            }
  
                

                RESULT = retor;
            :}|
;

PARAMETROS::= Identificador:n1 TIPODATO:n2 coma:n3 PARAMETROS:n4{:
                

                    
                if ((n4 != null) && (n2 != null)) {
                cadena = n4.toString()+ "x" + n2.toString() ;
            
                   tabla.getListaSimbolo().add(new Fila(n2.toString() , n1.toString()));
             
             RESULT = cadena;

             }
             
             :}
              | 
               Identificador:n1 TIPODATO:n2{:

               tabla.getListaSimbolo().add(new Fila(n2.toString() , n1.toString()));
             if (n2 != null){
             RESULT = n2;}
             :}
;

DATO::=  Op_Booleano:n1{:
              
                 
             RESULT = "Boolean";
             :} 
            
            | ARITMETICOS:n1{:
           
             if (n1 != null)
             RESULT = n1;
              
             :}
            | 
           
            Cadena:n1{:
           
           
             RESULT = "String";
             :} 
            | 
            LEER:n1{:
              if (n1 != null)
             RESULT = n1;
             :}  ;

PARAMETROS2::=  DATO:n1 coma:n2 PARAMETROS2:n3{:
           
           // String revisar = tabla.BuscarTipoN(n1.toString());
             
             if(!(n1.toString()).equals("error_tipo")){
                cadena =  n3.toString()+ "x" + n1.toString() ;
            }else {
                System.out.println("yo voy segundo jaja");
                 semantic_error("Error tipo la variable sip aqui tamos xD " + n1.toString() + "no se encuentra" );
            }
               
         
             
             RESULT = cadena;
             :} 
            | 

            DATO:n1 {:
            String cad = "";
            //String revisar = tabla.BuscarTipoN(n1.toString());
             
             if(!(n1.toString()).equals("error_tipo")){
                cad = n1.toString();
            } else {
                   System.out.println("yo voy primero jaja  " +  n1.toString());
                 semantic_error("Error tipo la variable y aqui me presento " + n1.toString() + "no se encuentra" );
            }
          
             
             RESULT = cad;
             :} ;


// si ocupamos tabla de ambito aqui tiene que ser 
ESTRUCTURA::= struct:n1 Identificador:n2 PARA_STRUCK:n6 End:n4 struct:n5{:

            Record registro = new Record();
        
        if (!(cadena2.equals(""))){
            

            cadena3 = "Record(" + cadena2 + ")";
            System.out.println("el registro masizo " + cadena3);

        Fila Fila1 = new Fila(cadena3 , n2.toString());
        tabla.getListaSimbolo().add(Fila1);
                
        registro = new Record (cadena3);
        
        registro.obtenerVariables();
        registro.impresion();
            
        cadena2 = "";
           
             }else{
              
System.out.println("no entre jijii ");
             Fila Fila1 = new Fila("void" , n2.toString());
            tabla.getListaSimbolo().add(Fila1);
            

                }
            // RESULT = nd;
             :};

/* Para Funciones y Estructuras */







  CUERPO_ESTRUCTURA::=  DECLARACION:n1 Enter  CUERPO_ESTRUCTURA {:
       // cadena2 = "";
        //RESULT = nd;  :} 
        |       
        ESTRUCTURA:n1 Enter  CUERPO_ESTRUCTURA {:
          
          //  RESULT = nd;  :}
        |       
        FUNCION:n1 Enter CUERPO_ESTRUCTURA {:
           
           // RESULT = nd;  :}
         |       
        PARA_SUB Enter CUERPO_ESTRUCTURA {:
           
          //  RESULT = nd;  :} 
        | Enter:x CUERPO_ESTRUCTURA {:
         //if (n2 != null)
            //RESULT = n2;


        :}
        | 

;


PARA_STRUCK::= DECLARACION:n2 Enter PARA_STRUCK:n3 {:

            

                String variableOP = n2.toString();
             
           
              
            if (n3 != null){
             
            cadena2 =  n2.toString()+ " x " + n3.toString() ;
            System.out.println("viva las nalgonas cuarentoans 1 ::  " + cadena2 );
                RESULT = cadena2;
            }else{

                    
                    cadena2 =  n2.toString() + cadena2 ;
                    System.out.println("viva las nalgonas cuarentoans 2 ::  " + cadena2 );
                    RESULT = cadena2;
                }


                
            

:} | Enter PARA_STRUCK |  {:




    :};
PARA_SUB::= Sub:n1 Identificador:n2 parentesisE:n3 PARAMETROS:n4 parentesisC:n5 CUERPO:n6 End:n7 Sub:n8{:
            System.out.println("Aqi esta el sub");
             Fila Fila1 = new Fila(new Funcion(n4.toString(), "void" ) , n2.toString());
             tabla.getListaSimbolo().add(Fila1);
             
             //RESULT = nd;
             :}
            | 
            Sub:n1 Identificador:n2 parentesisE:n3  parentesisC:n4 CUERPO:n5 End:n6 Sub:n7{:
            Fila Fila1 = new Fila(new Funcion("void", "void" ) , n2.toString());
             tabla.getListaSimbolo().add(Fila1);
         
            // RESULT = nd;
             :}
            | 
            Sub:n1 New:n2 parentesisE:n3  parentesisC:n4 CUERPO:n5 End:n6 Sub:n7{:
            Fila Fila1 = new Fila(new Funcion("void", "void" ) , n2.toString());
             tabla.getListaSimbolo().add(Fila1);
            // RESULT = nd;
             :}
            | 
            Sub:n1 New:n2 parentesisE:n3 PARAMETROS:n4 parentesisC:n5 CUERPO:n6 End:n7 Sub:n8{:
            Fila Fila1 = new Fila(new Funcion(n4.toString(), "void") , n2.toString());
            // RESULT = nd;
             :};

RETORNO::= Return:n1 Numero:n2{:
         
             
           RESULT = "Integer";
             :}
           | 
            Return:n1 Identificador:n2 {:
           
            String revisar = tabla.BuscarTipoN(n2.toString());
            
             RESULT = revisar;
             :}
           | 
            Return:n1 Op_Booleano:n2 {:
         
             
             RESULT = "Boolean";
             :}
           | 
            Return:n1 Cadena:n2 {:
          
             
           RESULT = "String";
             :}
           | 
            Return:n1 Identificador:n2 parentesisE:n3 PARAMETROS:n4 parentesisC:n5 {:
            
             //RESULT = nd;
             :}
           | 
            Return:n1 RECURSION:n2 {:
         
            // RESULT = nd;
  
           :};


/// que pedo y el retorno ?????? ------
FUNCION::= Function:n1 Identificador:n2 parentesisE:n3 PARAMETROS:n4 parentesisC:n5 TIPODATO:n6 CUERPO:n7 End:n8 Function:n9 {:
             Fila Fila1 = new Fila(new Funcion(n4.toString(),n6.toString()) , n2.toString());
             tabla.getListaSimbolo().add(Fila1);


            
             

               
             //RESULT = nd;
             :}
            | 
            Function:n1 Identificador:n2 parentesisE:n3 PARAMETROS:n4 parentesisC:n5 CUERPO:n6 End:n7 Function:n8{:

            Fila Fila1 = new Fila(new Funcion(n4.toString(), "void" ) , n2.toString());
             tabla.getListaSimbolo().add(Fila1);
             
           
             //RESULT = nd;
             :}
            |
             Function:n1 Identificador:n2 parentesisE:n3  parentesisC:n4 TIPODATO:n5 CUERPO:n6 End:n7 Function:n8{:

             Fila Fila1 = new Fila(new Funcion("void", n5.toString() ) , n2.toString());
             tabla.getListaSimbolo().add(Fila1);
          
            // RESULT = nd;
             :}  
            | 
            Function:n1 Identificador:n2 parentesisE:n3 parentesisC:n4 CUERPO:n5 End:n6 Function:n7{:
             Fila Fila1 = new Fila(new Funcion("void", "void" ) , n2.toString());
             tabla.getListaSimbolo().add(Fila1);
            
          
             //RESULT = nd;
             :};

SENTENCIA_BOOLEANA::=Identificador:n1  COMPARACION:n2 VALORES_NUMERICOS:n3{:
            String bandera = "";
            System.out.println("Hola perra1: "+n3.toString());
            String variable1 = tabla.BuscarTipoN(n1.toString());
            
            String variable2 = n3.toString();
            System.out.println("Hola puta: "+variable2);
            if ((!variable1.equals("error_tipo")) && (!variable2.equals("error_tipo"))){
                if ((!variable1.equals(variable2))){
                    bandera = "invalida";
                    semantic_error("Las variables no son del mismo tipo");
                    
            } else{
                    bandera = "valida" ;
                } 
            }else{
                semantic_error("Error tipo en el if con las variables " + n1.toString() + " o con "  + n3.toString());

                }
            
             RESULT = bandera;
             :}
       |  
        
        Identificador:n1  COMPARACION:n2 Op_Booleano:n3 {:
            String bandera = "";
            String variable1 = tabla.BuscarTipoN(n1.toString());
            System.out.println("Hola perra3: "+n3.toString());
            if ((!variable1.equals("error_tipo")) ){
                if ((!variable1.equals("Boolean"))){
                    semantic_error("la variable" + n1.toString() + "no es un boolean");
            }else {
                bandera = "valido";
            }
        }else{
                semantic_error("no se encontro la variable" + n1.toString());
          }
             RESULT = bandera;
             :}
       | 
        Identificador:n1  COMPARACION:n2 Cadena:n3{:
            String bandera = "";
            String variable1 = tabla.BuscarTipoN(n1.toString());

            if ((!variable1.equals("error_tipo")) ){
                if ((!variable1.equals("String"))){
                    semantic_error("la variable" + n1.toString() + "no es un cadena");
            }else {
                bandera = "valido";
            }
        }else{
                semantic_error("no se encontro la variable" + n1.toString());
          }
             RESULT = bandera;
             :}
       | Identificador:n1  COMPARACION:n2 Comilla:n3 Comilla:n4{:
            String bandera = "";
             String variable1 = tabla.BuscarTipoN(n1.toString());

            if ((!variable1.equals("error_tipo")) ){
                if ((!variable1.equals("String"))){
                    semantic_error("la variable" + n1.toString() + "no es un cadena");
            }else {
                bandera = "valido";
            }
        }else{
                semantic_error("no se encontro la variable" + n1.toString());
          }
             RESULT = bandera;
             :};

COMPARACION::= OperadorRelacional:n1 {:
      
             
             RESULT = n1;
             :} 
            |
             Igual:n1{:
            
            
             RESULT = n1;
             :} ;

DECLARACION_IF::= LOGICOAND LOGICOOR {:
         
             //RESULT = nd;
             :}
            |
             parentesisE:n1 DECLARACION_IF parentesisC:n3{:
          
             //RESULT = nd;
             :};

LOGICOOR::=  OR:n1 LOGICOAND LOGICOOR {:
            
             //RESULT = nd;
             :}
             | 
;

LOGICOAND::=    SENTENCIA_BOOLEANA LOGICOAND_Prima{:
           
             //RESULT = nd;
             :};

LOGICOAND_Prima::= And SENTENCIA_BOOLEANA LOGICOAND_Prima {:
           
             //RESULT = nd;
             :}
                   | 
;


SENTENCIA_IF::=  IF:n1 DECLARACION_IF then:n3 CUERPO End:n5 IF:n6{:
            
             //RESULT = nd;
             :};

ELSE_IF::= IF:n1 DECLARACION_IF then:n3 CUERPO:n4 Else:n5 CUERPO:n6 End:n7 IF:n8 {:
           
             //RESULT = nd;
             :};

ARITMETICOS::= MULTIPLICACIONES:n1 ADICIONES:n2{:
                if(n2 != null){
                    if(!(n1.toString()).equals("Integer")){
                              if((!(n1.toString()).equals("Boolean"))){
                semantic_error("la variable " + n1.toString() + " no es un Boolean");
                    RESULT = "error_tipo";
                }else{
                    RESULT = "Boolean";
                }
                        semantic_error("error de tipo , revise la multiplicacion" );
                            RESULT = "error_tipo" ;
                    }else{
                            RESULT = "Integer" ;

                        }
                     
                }else {
                        
                        RESULT = n1 ;
                    }
                
          
          
             :};

ADICIONES::=   OPRestSuma:n1 MULTIPLICACIONES:n2 ADICIONES:n3 {:
         
            
            System.out.println("Buenos Dias culona");

            
            if((n3 != null )){
                if ((!(n3.toString()).equals("error_tipo") )){
           

            if ((!(n2.toString()).equals("error_tipo")) ){
                if ((!(n2.toString()).equals("Integer"))){
                   // semantic_error("la variable" + n2.toString() + "no es un numero");
                    RESULT = "error_tipo";
            }else {
                RESULT = "Integer";
            } }else {
                   // semantic_error("error de tipo en la adicion");
                    RESULT = "error_tipo";
                        } 
        }else{
                // semantic_error("no se encontro la variable" + n2.toString());
                RESULT = "error_tipo";
          } 
        }else{
                
            /// si no es nulo
              
                if ((!(n2.toString()).equals("error_tipo")) ){
                if ((!(n2.toString()).equals("Integer"))){
                    semantic_error("no puede operar valores " + n2.toString() + " con enteros");
                    RESULT = "error_tipo";
            }else {
                RESULT = "Integer";
            } 
            }else {
                    semantic_error("error de tipo en la adicion");
                    RESULT = "error_tipo";

                    }
 
                }

             :}
               | 
;

MULTIPLICACIONES::= VALORES_NUMERICOS:n2 MULTIPLICACIONES_PRIMA:n1{:
               
                 if(n1 != null){
                    if(!(n1.toString()).equals("Integer")){
                            
                        semantic_error("error de tipo , revise la multiplicacion" );
                            RESULT = "error_tipo" ;
                    }else{
                            RESULT = "Integer" ;

                        }
                        
                     
                }else {
                        
                        RESULT = n2.toString() ;
                    }
            
           
             :} ;

MULTIPLICACIONES_PRIMA::= OPMultDiv:n1 VALORES_NUMERICOS:n2 MULTIPLICACIONES_PRIMA:n3{:
             
            if((n3 != null )){
                if ((!(n3.toString()).equals("error_tipo") )){
           

            if ((!(n2.toString()).equals("error_tipo")) ){
                if ((!(n2.toString()).equals("Integer"))){
                   // semantic_error("la variable " + n2.toString() + " no es un numero");
                    RESULT = "error_tipo";
            }else {
                RESULT = "Integer";
            }
            
             }else {
                   // semantic_error("la variable" + n2.toString() + "no es un numero");
                    RESULT = "error_tipo";
                        } 
        }else{
                // semantic_error("no se encontro la variable" + n2.toString());
                RESULT = "error_tipo";
          } 
        }else{
                
            /// si no es nulo
              
                if ((!(n2.toString()).equals("error_tipo")) ){
                if ((!(n2.toString()).equals("Integer"))){
                    semantic_error("no puede operar valores " + n2.toString() + " con enteros");
                    RESULT = "error_tipo";
            }else {
                RESULT = "Integer";
            }
           
                 }else {
                    semantic_error("no puede operar valores " + n2.toString() + " con enteros");
                    RESULT = "error_tipo";

                    }
 
                }
           
             
             :}
               | 
;


VALORES_NUMERICOS::=  Numero:n1 {:
            
             RESULT = "Integer";
             :}
                      | 
                        Identificador:n1 {:
                        String variable1 = "";

           if (((n1.toString()).toLowerCase()).equals("True".toLowerCase()) || ((n1.toString()).toLowerCase()).equals("False".toLowerCase())){
             
            variable1 = "Boolean";
            }else{
            String bandera = "";
            variable1 = tabla.BuscarTipoN(n1.toString());

            }
          
          RESULT = variable1;
             :}
                      |  
            parentesisE:n1 ARITMETICOS:n2 parentesisC:n3{:
                
                if (!((n2.toString()).equals("Integer"))){
                        RESULT = "error_tipo";
                    
                    }else{
                        RESULT = "Integer";

                    }
                
    
             :};


OP_RECURSIVIDAD::= RECURSION:n1 {:
            
            // RESULT = nd;
             :}

               | 
                RECURSION:n1 OPRestSuma:n2 ARITMETICOS{:
       
            // RESULT = nd;
             :}
               | 
                RECURSION:n1 OPMultDiv:n2 ARITMETICOS {:
            
             //RESULT = nd;
             :}
               | 
                ARITMETICOS OPRestSuma:n2 RECURSION:n3{:
           
            // RESULT = nd;
             :}
               | 
                ARITMETICOS OPMultDiv:n2 RECURSION:n3{:
           
           //  RESULT = nd;
             :};

ASIGNACION::=  Identificador:n1 Igual:n2 DATO:n3{: 
                
               
                String revisar = tabla.BuscarTipoN(n1.toString()) ;
                String revisar2 = tabla.BuscarTipoN(n3.toString()) ;
                
                
                 System.out.println(revisar + " comparado con  : " + n3.toString());
                if(!((revisar).equals(n3.toString()))){
                     
                    semantic_error(revisar);
                
                }

         
        
             // RESULT = nd;
             :}
               | 
                Identificador:n1 Punto:n2 Identificador:n3 Igual:n4 DATO:n5 {:
          
            // RESULT = nd;
             :}
               | 
                Identificador:n1 Igual:n2 RECURSION:n3{:

                
      String revisar = tabla.BuscarTipoN(n1.toString());
    if (!((revisar).equals("error_tipo"))){
     if(!((revisar).equals(n3.toString()))){

        semantic_error("La variable no es del mismo tipo que el asignado" );
    }

}else{
            semantic_error("la variable " + n1 + " no existe ");

     }


                
            
            // RESULT = nd;
             :};

IMPRIMIR::= Console:n1 Punto:n2 WriteLine:n3 parentesisE:n4 CONCATENACION:n5 parentesisC:n6 {:
       
         //    RESULT = nd;
             :};

LEER::=  Console:n1 Punto:n2 ReadLine:n3 parentesisE:n4 parentesisC:n5{:
            
           //  RESULT = nd;
             :}; 

LLAMADA_FUNCION::= Identificador:n1 Punto:n2 Identificador:n3 parentesisE:n4  parentesisC:n5 {:
             
     
           //  RESULT = nd;
             :}
                   | 
                    Identificador:n1 Punto Identificador:n2 parentesisE:n3 PARAMETROS2:n4 parentesisC:n5{:
         
           //  RESULT = nd;
             :} ;

CONCATENACION::=  Cadena:n1 CONCATENABLES:n2 CONCATENACION:n3 {:
       
             //RESULT = nd;
             :}
                  | ARITMETICOS CONCATENABLES:n2 CONCATENACION:n3 {:
           
           //  RESULT = nd;
             :}
                  | Identificador:n1 Punto:n2 Identificador:n3 CONCATENABLES:n4 CONCATENACION:n5 {:
          
            // RESULT = nd;
             :}
                  |Cadena:n1 {:
          
      
            // RESULT = nd;
             :}
                  | ARITMETICOS {:
           
           //  RESULT = nd;
             :}
                  | Identificador:n1 Punto:n2 Identificador:n3{:
           
            // RESULT = nd;
             :};

CONCATENABLES::= concatenacion:n1 {:
           
            // RESULT = nd;
             :}
            | coma:n1{:
         
            // RESULT = nd;
             :};


CUERPO::=  DECLARACION:n1 Enter  CUERPO:n2 {:
            //cadena2 = "";
           //  RESULT = nd;
             :}
           | IMPRIMIR:n1 Enter CUERPO:n2 {:
            
           //  RESULT = nd;
             :}
           | ASIGNACION:n1 Enter CUERPO:n2 {:
            
            // RESULT = nd;
             :}
           | SENTENCIA_IF:n1 Enter  CUERPO:n2 {:
         
            // RESULT = nd;
             :}
           | ELSE_IF:n1 Enter CUERPO:n2 {:
          
           //  RESULT = nd;
             :}
           | DECLARACION_FOR:n1 Enter  CUERPO:n2 {:
           
            // RESULT = nd;
             :}
           | WHILE:n1 Enter  CUERPO:n2 {:
        
            // RESULT = nd;
             :}
           | DO_WHILE:n1 Enter CUERPO:n2 {:
           
            // RESULT = nd;
             :}
          
           | LEER:n1 Enter CUERPO:n2 {:
     
            // RESULT = nd;
             :}
           | LLAMADA_FUNCION:n1 Enter CUERPO:n2 {:
            
            // RESULT = nd;
             :}
           | Comentario:n1 Enter CUERPO:n2 {:
          
           //  RESULT = nd;
             :}
           | RECURSION:n1 Enter CUERPO:n2 {:
           
             //RESULT = nd;
             :}
           | Enter:x CUERPO:n2{:
    
           
            //RESULT = n2;

           :}
            | RETORNO:n1 Enter CUERPO {:
                  //RESULT = n1;
                :}
           |
;

RECURSION::= Identificador:n1 parentesisE:n2 PARAMETROS2:n3 parentesisC:n4 {:

                
               if (n3 != null){
          
            Funcion  TipoF  = new Funcion();
          String retor = "";
         
          String revisar = tabla.BuscarTipoFuncion(n1.toString());

              System.out.println("hasta aqui no hay vergues xD XD:: " + revisar );
              System.out.println("hasta aqui si hay vergues xD XD nooooooooo:: " + n3.toString() );
           
              if(!revisar.equals("error_tipo")){
                TipoF = tabla.esFuncion(n1.toString());
                if((n3.toString()).contains(TipoF.getArgumentos())){

                    retor = TipoF.getRetorno();


                }else{
                semantic_error("Error tipo la variable   " + n1.toString() + "   no tiene esos tipos de parametros" );
            }
            }else {
                 semantic_error("Error tipo la variable   " + n1.toString() + "   no se encuentra" );
            }
                  System.out.println("aquie es man aqui hay cagadal " + retor  );

                RESULT = retor;
                }
            
             :}
            | Identificador:n1 parentesisE:n2 parentesisC:n3{:

System.out.println("efectivamente perra asquerosa: " );
                Funcion  TipoF  = new Funcion();
          String retor = "";
         System.out.println("Aqui es perra: "+n1.toString());
          String revisar = tabla.BuscarTipoFuncion(n1.toString());

              
           
              if(!revisar.equals("error_tipo")){
                 TipoF = tabla.esFuncion(n1.toString());
                System.out.println("hasta aqui si hay vergues xD XD nooooooooo:: " + TipoF.getRetorno() );
                 System.out.println("hasta aqui no hay vergues xD XD:: " + TipoF.getArgumentos() );
              
             
                if((TipoF.getArgumentos()).equals("void")){

                    
                    retor = TipoF.getRetorno();


                }else {
                        retor = "error_tipo";
                        semantic_error("Error tipo, la funcion "+ n1.toString()+" si tiene parametros"  );
                    }

            }
            
            RESULT = retor;
             :};

DECLARACION_FOR::= For:n1 ASIGNACION:n2 TO:n3 Numero:n4 CUERPO Next:n6 {:
           
            
                 :} |   For:n1 ASIGNACION:n2 TO:n3  Identificador:n4 CUERPO Next:n6 {:
                            String revisar = tabla.BuscarTipoN(n4.toString()); 

                            if(!(revisar.equals("Integer"))){
                                semantic_error("error de tipo , con el id de for");
                            }
                    
             :} ;

WHILE::= While:n1 DECLARACION_IF CUERPO End:n4 While:n5 {:
            
          
             :}  ;

DO_WHILE::= Do:n1 While:n2 DECLARACION_IF CUERPO Loop:n5  {:
              
        
             :} ;

    FINAL::= End:n1 SentenciaModulo:n2{:

       
       
         



:};


DESPUES::= Enter DESPUES | Enter;

PROGRAMA::= Enter PROGRAMA | INICIO | INICIO DESPUES ;
